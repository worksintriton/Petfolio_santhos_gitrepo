package com.petfolio.infinitus.doctor;import android.Manifest;import android.annotation.SuppressLint;import android.app.Activity;import android.app.DatePickerDialog;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.IntentSender;import android.content.pm.PackageManager;import android.database.Cursor;import android.graphics.Bitmap;import android.location.Criteria;import android.location.Geocoder;import android.location.Location;import android.location.LocationManager;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.os.Handler;import android.provider.MediaStore;import android.provider.OpenableColumns;import android.provider.Settings;import android.util.Log;import android.view.View;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.Spinner;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.appcompat.app.AlertDialog;import androidx.appcompat.app.AppCompatActivity;import androidx.cardview.widget.CardView;import androidx.core.app.ActivityCompat;import androidx.core.content.ContextCompat;import androidx.recyclerview.widget.DefaultItemAnimator;import androidx.recyclerview.widget.GridLayoutManager;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import com.google.android.gms.common.ConnectionResult;import com.google.android.gms.common.api.GoogleApiClient;import com.google.android.gms.common.api.PendingResult;import com.google.android.gms.common.api.Status;import com.google.android.gms.location.FusedLocationProviderClient;import com.google.android.gms.location.LocationCallback;import com.google.android.gms.location.LocationListener;import com.google.android.gms.location.LocationRequest;import com.google.android.gms.location.LocationServices;import com.google.android.gms.location.LocationSettingsRequest;import com.google.android.gms.location.LocationSettingsResult;import com.google.android.gms.location.LocationSettingsStatusCodes;import com.google.android.gms.maps.CameraUpdateFactory;import com.google.android.gms.maps.GoogleMap;import com.google.android.gms.maps.OnMapReadyCallback;import com.google.android.gms.maps.SupportMapFragment;import com.google.gson.Gson;import com.petfolio.infinitus.R;import com.petfolio.infinitus.activity.LoginActivity;import com.petfolio.infinitus.adapter.AddCertPdfAdapter;import com.petfolio.infinitus.adapter.AddEducAdapter;import com.petfolio.infinitus.adapter.AddExpAdapter;import com.petfolio.infinitus.adapter.AddGovtIdPdfAdapter;import com.petfolio.infinitus.adapter.AddImageListAdapter;import com.petfolio.infinitus.adapter.AddPhotoIDPdfAdapter;import com.petfolio.infinitus.adapter.PetsHandledListAdapter;import com.petfolio.infinitus.adapter.SpecTypesListAdapter;import com.petfolio.infinitus.api.APIClient;import com.petfolio.infinitus.api.RestApiInterface;import com.petfolio.infinitus.appUtils.FileUtil;import com.petfolio.infinitus.interfaces.PetHandledTypeCheckedListener;import com.petfolio.infinitus.interfaces.SpecTypeChckedListener;import com.petfolio.infinitus.petlover.AddYourPetOldUserActivity;import com.petfolio.infinitus.requestpojo.DocBusInfoUploadRequest;import com.petfolio.infinitus.responsepojo.AddPetTypeListModel;import com.petfolio.infinitus.responsepojo.AddSpecTypeListModel;import com.petfolio.infinitus.responsepojo.DocBusInfoUploadResponse;import com.petfolio.infinitus.responsepojo.DropDownListResponse;import com.petfolio.infinitus.responsepojo.FileUploadResponse;import com.petfolio.infinitus.responsepojo.PetTypeListResponse;import com.petfolio.infinitus.service.GPSTracker;import com.petfolio.infinitus.sessionmanager.SessionManager;import com.petfolio.infinitus.utils.ConnectionDetector;import com.petfolio.infinitus.utils.RestUtils;import com.wang.avi.AVLoadingIndicatorView;import java.io.File;import java.io.FileOutputStream;import java.io.OutputStream;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Arrays;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Locale;import java.util.Objects;import butterknife.BindView;import butterknife.ButterKnife;import cn.pedant.SweetAlert.SweetAlertDialog;import es.dmoral.toasty.Toasty;import okhttp3.MediaType;import okhttp3.MultipartBody;import okhttp3.RequestBody;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;public class DoctorBusinessInfoActivity extends AppCompatActivity implements View.OnClickListener, SpecTypeChckedListener, PetHandledTypeCheckedListener , OnMapReadyCallback,        GoogleApiClient.ConnectionCallbacks,        GoogleApiClient.OnConnectionFailedListener, LocationListener {    private String TAG = "DoctorBusinessInfo";    @BindView(R.id.edtx_clinic_name)    EditText edittext_clinic_name;    @BindView(R.id.edtx_educ_nme)    EditText edittext_education_name;    @BindView(R.id.edtx_edu_yr)    EditText edittext_education_year;    @BindView(R.id.edtx_comp_nme)    EditText edittext_company_name;    @BindView(R.id.edtx_from)    EditText edittext_from;    @BindView(R.id.edtx_to)    EditText edittext_to;    @BindView(R.id.edtx_clinic_addr)    EditText edittext_clinic_address;    @BindView(R.id.edtx_clinic_pic_choose)    EditText edtx_clinic_pic_choose;    @BindView(R.id.edtx_clinic_certif_choose)    EditText edtx_cert_pic_choose;    @BindView(R.id.edtx_clinic_govtid_choose)    EditText edtx_govt_pic_choose;    @BindView(R.id.edtx_clinic_photoid_choose)    EditText edtx_photo_pic_choose;    @BindView(R.id.buttonAddedu)    Button buttonAddedu;    @BindView(R.id.buttonAddexpr)    Button buttonAddexpr;    @BindView(R.id.buttonsubmit)    Button buttonsubmit;    @BindView(R.id.rcyrl_added_edu)    RecyclerView recylerView_added_education;    @BindView(R.id.rcylr_added_expr)    RecyclerView recylerView_added_experience;    @BindView(R.id.rcylr_speclist)    RecyclerView recylerView_specializationlist;    @BindView(R.id.rcylr_pettypelist)    RecyclerView recylerView_pettypelist;    @BindView(R.id.rcylr_choosen_clinic_img)    RecyclerView recylerView_choosen_clinic_images;    @BindView(R.id.rcylr_choosen_certificate_img)    RecyclerView recylerView_choosen_certificate_images;    @BindView(R.id.rcylr_choosen_govtid_images)    RecyclerView recylerView_choosen_govtid_images;    @BindView(R.id.rcylr_choosen_photoid_img)    RecyclerView recylerView_choosen_photo_id_images;    @BindView(R.id.cdvw_certificate)    CardView material_cardview_certificate;    @BindView(R.id.img_bck)    ImageView img_bck;    @BindView(R.id.avi_indicator)    AVLoadingIndicatorView avi_indicator;    @BindView(R.id.spr_communicationtype)    Spinner spr_communicationtype;    HashMap<Integer,String> hashMap_Communicationvalue = new HashMap<>();    private int communicationvalue;    String clinic_name,education_name,education_yr,cmpynm,from,to,clinic_addr;    List<DocBusInfoUploadRequest.EducationDetailsBean> educationDetailsBeans = new ArrayList<>();    List<DocBusInfoUploadRequest.ExperienceDetailsBean> experienceDetailsBeans = new ArrayList<>();    List<DocBusInfoUploadRequest.SpecializationBean> specializationBeans = new ArrayList<>();    List<DocBusInfoUploadRequest.PetHandledBean> petHandledBeans = new ArrayList<>();    List<FileUploadResponse> clinicpicUploadResponse = new ArrayList<>();    ArrayList<FileUploadResponse> certificatePicResponse = new ArrayList<>();    ArrayList<FileUploadResponse>  govtIdPicResponse = new ArrayList<>();    ArrayList<FileUploadResponse> photoIdPicResponse = new ArrayList<>();    private List<DropDownListResponse.DataBean.PetHandleBean> pethandleList;    private List<DropDownListResponse.DataBean.SpecialzationBean> petSpecilaziationList;    private final List<DocBusInfoUploadRequest.ClinicPicBean> clinicPicBeans = new ArrayList<>();    private final List<DocBusInfoUploadRequest.CertificatePicBean> certificatePicBeans = new ArrayList<>();    private final List<DocBusInfoUploadRequest.GovtIdPicBean> govtIdPicBeans = new ArrayList<>();    private final List<DocBusInfoUploadRequest.PhotoIdPicBean> photoIdPicBeans = new ArrayList<>();    ArrayList<AddSpecTypeListModel> addSpecTypeListModels = new ArrayList<>();    ArrayList<AddPetTypeListModel> addPetTypeListModels = new ArrayList<>();    AddEducAdapter addEducAdapter;    AddExpAdapter addExpAdapter;    SpecTypesListAdapter specTypesListAdapter;    AddImageListAdapter addImageListAdapter;    AddCertPdfAdapter addCertPdfAdapter;    PetsHandledListAdapter petsHandledListAdapter;    AddGovtIdPdfAdapter addGovtIdPdfAdapter;    AddPhotoIDPdfAdapter addPhotoIDPdfAdapter;    private FusedLocationProviderClient mFusedLocationClient;    private LocationCallback locationCallback;    Geocoder geocoder;    MultipartBody.Part filePart,certPart,govIdPart,photIDPart;    private static final int REQUEST_CLINIC_CAMERA_PERMISSION_CODE = 785 ;    private static final int REQUEST_READ_CLINIC_PDF_PERMISSION = 787 ;    private static final int REQUEST_READ_GOVT_ID_PDF_PERMISSION = 788;    private static final int REQUEST_READ_PHOTO_ID_PDF_PERMISSION = 789;    private static final int REQUEST_READ_CLINIC_PIC_PERMISSION = 786;    private static final int SELECT_CLINIC_CAMERA = 1000 ;    private static final int SELECT_CLINIC_PICTURE = 1001 ;    private static final int SELECT_CERT_PDF = 1002;    private static final int SELECT_GOVTID_PDF = 1003;    private static final int SELECT_PHOTOID_PDF = 1004;    private LocationManager locationManager;    String start_date,dr_title, dr_name,user_id,currentDateandTime;    String status="Not verified",FinalDateTime;    boolean profile_status = true;    private String getfromdate;    private static final int REQUEST_CHECK_SETTINGS_GPS = 0x1;    private GoogleApiClient googleApiClient;    Location mLastLocation;    public static final int MY_PERMISSIONS_REQUEST_LOCATION = 99;    private GoogleMap mMap;    private GPSTracker gpsTracker;    private SupportMapFragment mapFragment;    private double latitude;    private double longitude;    private List<DropDownListResponse.DataBean.CommunicationTypeBean> communicationtypList;    private String strcommunicationtype;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_doctor_business_info);        ButterKnife.bind(this);        SessionManager session = new SessionManager(getApplicationContext());        HashMap<String, String> user = session.getProfileDetails();        dr_name = user.get(SessionManager.KEY_FIRST_NAME);        user_id = user.get(SessionManager.KEY_ID);        dr_title = "Dr";        Log.w(TAG,"dr_name : "+dr_name+" dr_title : "+dr_title);        gpsTracker = new GPSTracker(getApplicationContext());        gpsTracker = new GPSTracker(getApplicationContext());        if (mapFragment == null) {            mapFragment = SupportMapFragment.newInstance();            mapFragment.getMapAsync(this);        }        googleApiConnected();       /* SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map);        assert mapFragment != null;        mapFragment.getMapAsync(this);*/        mFusedLocationClient = LocationServices.getFusedLocationProviderClient(this);        geocoder = new Geocoder(DoctorBusinessInfoActivity.this, Locale.getDefault());        locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);        LocationRequest locationRequest = LocationRequest.create();        locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);        locationRequest.setInterval(1000); // 10 seconds        locationRequest.setFastestInterval(1000); // 5 seconds        avi_indicator.setVisibility(View.GONE);        buttonAddedu.setOnClickListener(this);        buttonAddexpr.setOnClickListener(this);        buttonsubmit.setOnClickListener(this);        edittext_from.setOnClickListener(this);        edittext_to.setOnClickListener(this);        edittext_education_year.setOnClickListener(this);        edtx_clinic_pic_choose.setOnClickListener(this);        edtx_cert_pic_choose.setOnClickListener(this);        edtx_govt_pic_choose.setOnClickListener(this);        edtx_photo_pic_choose.setOnClickListener(this);        img_bck.setOnClickListener(this);        if (new ConnectionDetector(DoctorBusinessInfoActivity.this).isNetworkAvailable(DoctorBusinessInfoActivity.this)) {            dropDownListResponseCall();        }        /* ************ Adding Education ************** */        recylerView_added_education.setHasFixedSize(true);        recylerView_added_education.setNestedScrollingEnabled(false);        LinearLayoutManager layoutManager = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.VERTICAL, false);        recylerView_added_education.setLayoutManager(layoutManager);        addEducAdapter = new AddEducAdapter(getApplicationContext(), educationDetailsBeans);        recylerView_added_education.setAdapter(addEducAdapter);        /* ************ Adding Experience ************** */        recylerView_added_experience.setHasFixedSize(true);        recylerView_added_experience.setNestedScrollingEnabled(false);        LinearLayoutManager layoutManager1 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.VERTICAL, false);        recylerView_added_experience.setLayoutManager(layoutManager1);        addExpAdapter = new AddExpAdapter(getApplicationContext(), experienceDetailsBeans);        recylerView_added_experience.setAdapter(addExpAdapter);        /* ************ Adding Images ************** */        recylerView_choosen_clinic_images.setHasFixedSize(true);        recylerView_choosen_clinic_images.setNestedScrollingEnabled(false);        LinearLayoutManager layoutManager2 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);        recylerView_choosen_clinic_images.setLayoutManager(layoutManager2);        /* ************ Adding Certificate ************** */        recylerView_choosen_certificate_images.setHasFixedSize(true);        recylerView_choosen_certificate_images.setNestedScrollingEnabled(false);        LinearLayoutManager layoutManager3 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);        recylerView_choosen_certificate_images.setLayoutManager(layoutManager3);        /* ************ Adding GovtID ************** */        recylerView_choosen_govtid_images.setHasFixedSize(true);        recylerView_choosen_govtid_images.setNestedScrollingEnabled(false);        LinearLayoutManager layoutManager4 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);        recylerView_choosen_govtid_images.setLayoutManager(layoutManager4);        /* ************ Adding PhotoID ************** */        recylerView_choosen_photo_id_images.setHasFixedSize(true);        recylerView_choosen_photo_id_images.setNestedScrollingEnabled(false);        LinearLayoutManager layoutManager5 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);        recylerView_choosen_photo_id_images.setLayoutManager(layoutManager5);        /* *************** Get Current Date and Time ************************ */        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy hh:mm aa", Locale.getDefault());         currentDateandTime = sdf.format(new Date());        spr_communicationtype.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {            @Override            public void onItemSelected(AdapterView<?> parent, View view, int arg2, long arg3) {                ((TextView) parent.getChildAt(0)).setTextColor(getResources().getColor(R.color.green));                 strcommunicationtype = spr_communicationtype.getSelectedItem().toString();               //  communicationvalue = Integer.parseInt(hashMap_Communicationvalue.get(strcommunicationtype));                Log.w(TAG,"communicationtype : "+strcommunicationtype+" communicationvalue :"+communicationvalue);            }            @Override            public void onNothingSelected(AdapterView<?> arg0) {                // TODO Auto-generated method stub            }        });    }    public boolean checkLocationPermission() {        if (ContextCompat.checkSelfPermission(this,                Manifest.permission.ACCESS_FINE_LOCATION)                != PackageManager.PERMISSION_GRANTED) {            if (ActivityCompat.shouldShowRequestPermissionRationale(this,                    Manifest.permission.ACCESS_FINE_LOCATION)) {                ActivityCompat.requestPermissions(this,                        new String[]{Manifest.permission.ACCESS_FINE_LOCATION},                        MY_PERMISSIONS_REQUEST_LOCATION);            } else {                ActivityCompat.requestPermissions(this,                        new String[]{Manifest.permission.ACCESS_FINE_LOCATION},                        MY_PERMISSIONS_REQUEST_LOCATION);            }            return false;        } else {            return true;        }    }    public void dropDownListResponseCall(){        avi_indicator.setVisibility(View.VISIBLE);        avi_indicator.smoothToShow();        //Creating an object of our api interface        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);        Call<DropDownListResponse> call = apiInterface.dropDownListResponseCall(RestUtils.getContentType());        Log.w(TAG,"url  :%s"+ call.request().url().toString());        call.enqueue(new Callback<DropDownListResponse>() {            @Override            public void onResponse(@NonNull Call<DropDownListResponse> call, @NonNull Response<DropDownListResponse> response) {                avi_indicator.smoothToHide();                if (response.body() != null) {                    if(200 == response.body().getCode()){                        Log.w(TAG,"DropDownListResponse" + new Gson().toJson(response.body()));                        pethandleList = response.body().getData().getPet_handle();                        petSpecilaziationList = response.body().getData().getSpecialzation();                        communicationtypList = response.body().getData().getCommunication_type();                        if(communicationtypList != null && communicationtypList.size()>0){                            setCommunicationtype(communicationtypList);                        }                        if(pethandleList != null && pethandleList.size()>0){                            setPetHandle(pethandleList);                        }                        Log.w(TAG,"petSpecilaziationList : "+new Gson().toJson(petSpecilaziationList));                        if(petSpecilaziationList != null && petSpecilaziationList.size()>0){                            setSpecList(petSpecilaziationList);                        }                    }                }            }            @Override            public void onFailure(@NonNull Call<DropDownListResponse> call, @NonNull  Throwable t) {                avi_indicator.smoothToHide();                Log.w(TAG,"DropDownListResponse flr"+t.getMessage());            }        });    }    private void setCommunicationtype(List<DropDownListResponse.DataBean.CommunicationTypeBean> communicationtypList) {        ArrayList<String> pettypeArrayList = new ArrayList<>();        pettypeArrayList.add("Select Communication Type");        for (int i = 0; i < communicationtypList.size(); i++) {            String petType = communicationtypList.get(i).getCom_type();            hashMap_Communicationvalue.put(communicationtypList.get(i).getValue(), communicationtypList.get(i).getCom_type());            Log.w(TAG,"Communication Type-->"+petType);            pettypeArrayList.add(petType);            ArrayAdapter<String> spinnerArrayAdapter = new ArrayAdapter<>(DoctorBusinessInfoActivity.this, R.layout.spinner_item, pettypeArrayList);            spinnerArrayAdapter.setDropDownViewResource(R.layout.spinner_item); // The drop down view            spr_communicationtype.setAdapter(spinnerArrayAdapter);        }    }    private void setPetHandle(List<DropDownListResponse.DataBean.PetHandleBean> petHandle) {        recylerView_pettypelist.setLayoutManager(new GridLayoutManager(this, 2));        recylerView_pettypelist.setItemAnimator(new DefaultItemAnimator());        petsHandledListAdapter = new PetsHandledListAdapter(getApplicationContext(), petHandle,this);        recylerView_pettypelist.setAdapter(petsHandledListAdapter);    }    private void setSpecList(List<DropDownListResponse.DataBean.SpecialzationBean> SpecilaziationList) {        recylerView_specializationlist.setLayoutManager(new GridLayoutManager(this, 2));        recylerView_specializationlist.setItemAnimator(new DefaultItemAnimator());        specTypesListAdapter = new SpecTypesListAdapter(DoctorBusinessInfoActivity.this, SpecilaziationList,this);        recylerView_specializationlist.setAdapter(specTypesListAdapter);    }    private void getEndDate(){        String[] getfrom = getfromdate.split("-");        Log.w("split_date", Arrays.toString(getfrom));        int year,month,day;        year= Integer.parseInt(getfrom[0]);        month = Integer.parseInt(getfrom[1]);        int month1 = month -1 ;        day = Integer.parseInt(getfrom[2]);        Calendar c = Calendar.getInstance();        c.set(year,month1,day+1);        DatePickerDialog datePickerDialog = new DatePickerDialog(this,                (view, year1, month2, dayOfMonth) -> {                    //String date = year1 + "-" + (month2 + 1) + "-" + dayOfMonth;                    String date = year1+"";                    setEndDate(date);                },        year,        month1,        day);        datePickerDialog.getDatePicker().setMinDate(c.getTimeInMillis());        datePickerDialog.getDatePicker().setMaxDate(new Date().getTime());        datePickerDialog.show();    }    private void setEndDate(String date) {        edittext_to.setText(date.trim());    }    private void getStartDate() {        Calendar c = Calendar.getInstance();        int mYear = c.get(Calendar.YEAR);        int mMonth = c.get(Calendar.MONTH);        int mDay = c.get(Calendar.DAY_OF_MONTH);        DatePickerDialog datePickerDialog = new DatePickerDialog(this,                (view, year, monthOfYear, dayOfMonth) -> {                    getfromdate = year + "-" + (monthOfYear + 1) + "-" + dayOfMonth;                  start_date = year+"";                  setStartDate(start_date);                }, mYear, mMonth, mDay);        datePickerDialog.getDatePicker().setMaxDate(System.currentTimeMillis());        datePickerDialog.show();    }    private void setStartDate(String date) {        edittext_from.setText(date.trim());    }    private void getEduYear() {        // Get Current Date        final Calendar c = Calendar.getInstance();        int mYear = c.get(Calendar.YEAR);        int mMonth = c.get(Calendar.MONTH);        int mDay = c.get(Calendar.DAY_OF_MONTH);        DatePickerDialog datePickerDialog = new DatePickerDialog(this,                (view, year, monthOfYear, dayOfMonth) -> {                    String  date = String.valueOf(year);                    setEduYr(date);                }, mYear, mMonth, mDay);        datePickerDialog.getDatePicker().setMaxDate(System.currentTimeMillis());        datePickerDialog.show();    }    private void setEduYr(String date) {        edittext_education_year.setText(date);    }    private void addExpr() {        cmpynm = edittext_company_name.getText().toString().trim();        from = edittext_from.getText().toString().trim();        to = edittext_to.getText().toString().trim();        int cmpynmlength = cmpynm.trim().length();        if(cmpynm.isEmpty()){            edittext_company_name.setError("Please fill the Company name");        }        else if(from.isEmpty()){            edittext_education_year.setError("Please fill the Start Date");            Toasty.warning(getApplicationContext(), "Please Enter the start date", Toast.LENGTH_SHORT).show();        }        else if(to.isEmpty()){            edittext_education_year.setError("Please fill the End Date");            Toasty.warning(getApplicationContext(), "Please Enter the end date", Toast.LENGTH_SHORT).show();        }        else if(cmpynmlength>25){            edittext_company_name.setError("The maximum length for an Company name is 25 characters ");        }        else{            insertExpr(cmpynm,from,to);        }    }    private void insertExpr(String cmpynm, String from, String to) {        if(experienceDetailsBeans.size()>=3){            Toasty.warning(getApplicationContext(),"Sorry you cannot add more than 3",Toast.LENGTH_SHORT).show();        }        else {            experienceDetailsBeans.add(new DocBusInfoUploadRequest.ExperienceDetailsBean(cmpynm,from,to));            addExpAdapter.notifyDataSetChanged();        }    }    private void addEduc() {        education_name = edittext_education_name.getText().toString().trim();        education_yr = edittext_education_year.getText().toString().trim();        int edunmlength = education_name.trim().length();        int eduyrlength = education_yr.trim().length();        if(education_name.isEmpty()){            edittext_education_name.setError("Please fill the Education name");        }       else if(education_yr.isEmpty()){            edittext_education_year.setError("Please fill the Education year");        }        else if(edunmlength>25){            edittext_education_name.setError("The maximum length for an Education name is 25 characters ");        }        else if(eduyrlength>25){            edittext_education_year.setError("The maximum length for an Education year is 25 characters ");        }       else{            insertEdu(education_name,education_yr);        }    }    private void insertEdu(String education_name, String education_yr) {        if(educationDetailsBeans.size()>=3){            Toasty.warning(getApplicationContext(),"Sorry you cannot add more than 3",Toast.LENGTH_SHORT).show();        }        else {            educationDetailsBeans.add(new DocBusInfoUploadRequest.EducationDetailsBean(education_name,education_yr));            addEducAdapter.notifyDataSetChanged();        }    }    @Override    public void onItemSpecCheck(int position, String specValue, List<DropDownListResponse.DataBean.SpecialzationBean> spectypedataBeanList) {//        Toast.makeText(DoctorBusinessInfoActivity.this, position + specValue + "checked!", Toast.LENGTH_SHORT).show();            addSpecTypeListModels.add(new AddSpecTypeListModel(position,specValue));            DocBusInfoUploadRequest.SpecializationBean specializationBean = new DocBusInfoUploadRequest.SpecializationBean(specValue);            specializationBeans.add(specializationBean);            spectypedataBeanList.get(position).setSelected(true);            specTypesListAdapter.notifyDataSetChanged();            Log.w(TAG +"added_spec_list",addSpecTypeListModels.toString());            Log.w(TAG + "added_spec_list_1",specializationBean.toString());    }    @Override    public void onItemSpecUnCheck(int position, String specValue) {        addSpecTypeListModels.remove(position);        specializationBeans.remove(position);        Log.w(TAG + "removed_spec_list",addSpecTypeListModels.toString());        Log.w(TAG + "removed_spec_list1",addSpecTypeListModels.toString());    }    @Override    public void onItemPetCheck(int position, String pethandleValue, List<DropDownListResponse.DataBean.PetHandleBean> petHandleBeanLists) {            addPetTypeListModels.add(new AddPetTypeListModel(position,pethandleValue));            DocBusInfoUploadRequest.PetHandledBean petHandledBean = new DocBusInfoUploadRequest.PetHandledBean(pethandleValue);            petHandledBeans.add(petHandledBean);            petHandleBeanLists.get(position).setSelected(true);            petsHandledListAdapter.notifyDataSetChanged();            Log.w(TAG +"added_pet_handle_list",addPetTypeListModels.toString());            Log.w(TAG +"added_pet_handle_list1",petHandledBeans.toString());    }    @Override    public void onItemPetUnCheck(int position, String pethandleValue) {        addPetTypeListModels.remove(position);        petHandledBeans.remove(position);        Log.w(TAG +"remove_pet_handle_list",addPetTypeListModels.toString());        Log.w(TAG +"remove_pet_handle_list1",petHandledBeans.toString());    }    private void chooseClinicImage() {        if(clinicPicBeans.size()>=1){            Toasty.warning(getApplicationContext(), "Sorry you can't Add more than 1", Toast.LENGTH_SHORT).show();        }        else        {            final CharSequence[] items = {"Take Photo", "Choose from Library", "Cancel"};            //AlertDialog.Builder alert=new AlertDialog.Builder(this);            AlertDialog.Builder builder = new AlertDialog.Builder(DoctorBusinessInfoActivity.this);            builder.setTitle("Choose option");            builder.setItems(items, (dialog, item) -> {                if (items[item].equals("Take Photo"))                {                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(DoctorBusinessInfoActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)                    {                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);                    }                    else                    {                        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);                        startActivityForResult(intent, SELECT_CLINIC_CAMERA);                    }                }                else if (items[item].equals("Choose from Library"))                {                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(DoctorBusinessInfoActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)                    {                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);                    }                    else{                        Intent intent = new Intent();                        intent.setType("image/*");                        intent.setAction(Intent.ACTION_GET_CONTENT);                        startActivityForResult(Intent.createChooser(intent, "Select Picture"), SELECT_CLINIC_PICTURE);                    }                }                else if (items[item].equals("Cancel")) {                    dialog.dismiss();                }            });            builder.show();        }    }    private void uploadClinicImage() {        avi_indicator.show();        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);        //RestApiInterface ApiService = RetrofitClient.getApiService();        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(filePart);//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());        Log.w(TAG,"url  :%s"+ call.request().url().toString());        call.enqueue(new Callback<FileUploadResponse>() {            @Override            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {                avi_indicator.smoothToHide();                Log.w(TAG,"Profpic"+ "--->" + new Gson().toJson(response.body()));                if (response.body() != null) {                    if (200 == response.body().getCode()) {                       // FileUploadResponse fileUploadResponse = new FileUploadResponse(response.body().getStatus(),response.body().getMessage(),response.body().getData(),response.body().getCode());                        DocBusInfoUploadRequest.ClinicPicBean clinicPicBean = new DocBusInfoUploadRequest.ClinicPicBean(response.body().getData());                        clinicPicBeans.add(clinicPicBean);                        addImageListAdapter = new AddImageListAdapter(getApplicationContext(), clinicPicBeans);                        recylerView_choosen_clinic_images.setAdapter(addImageListAdapter);                    }                }            }            @Override            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {                // avi_indicator.smoothToHide();                Log.w(TAG,"ServerUrlImagePath"+ "On failure working"+ t.getMessage());                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();            }        });    }    private void chooseCertPdf() {        if(certificatePicResponse.size()>=1){            Toasty.warning(getApplicationContext(), "Sorry you can't Add more than 1", Toast.LENGTH_SHORT).show();        }        else {            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M   && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)            {                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PDF_PERMISSION);            }            else{                Intent intent = new Intent();                intent.setType("application/pdf");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select PDF"), SELECT_CERT_PDF);            }        }    }    private void uploadCertPdf() {        avi_indicator.show();        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);        //RestApiInterface ApiService = RetrofitClient.getApiService();        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(certPart);//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());        Log.w(TAG,"url  :%s"+ call.request().url().toString());        call.enqueue(new Callback<FileUploadResponse>() {            @Override            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {                avi_indicator.smoothToHide();                Log.w(TAG,"PdfFileLink"+ "--->" + new Gson().toJson(response.body()));                if (response.body() != null) {                    if (200 == response.body().getCode()) {                        DocBusInfoUploadRequest.CertificatePicBean certificatePicBean = new DocBusInfoUploadRequest.CertificatePicBean(response.body().getData());                        certificatePicBeans.add(certificatePicBean);                        addCertPdfAdapter = new AddCertPdfAdapter(getApplicationContext(), certificatePicBeans);                        recylerView_choosen_certificate_images.setAdapter(addCertPdfAdapter);                    }                    }            }            @Override            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {                // avi_indicator.smoothToHide();                Log.w(TAG,"ServerUrlImagePath"+ "On failure working"+ t.getMessage());                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();            }        });    }    private void chooseGovIDPdf() {        if(govtIdPicResponse.size()>=1){            Toasty.warning(getApplicationContext(), "Sorry you can't Add more than 1", Toast.LENGTH_SHORT).show();        }        else {            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M   && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)            {                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVT_ID_PDF_PERMISSION);            }            else{                Intent intent = new Intent();                intent.setType("application/pdf");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select PDF"), SELECT_GOVTID_PDF);            }        }    }    private void uploadGovtIDPdf() {        avi_indicator.show();        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);        //RestApiInterface ApiService = RetrofitClient.getApiService();        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(govIdPart);//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());        Log.w(TAG,"url  :%s"+ call.request().url().toString());        call.enqueue(new Callback<FileUploadResponse>() {            @Override            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {                avi_indicator.smoothToHide();                Log.w(TAG,"PdfFileLink"+ "--->" + new Gson().toJson(response.body()));                if (response.body() != null) {                    if (200 == response.body().getCode()) {                        DocBusInfoUploadRequest.GovtIdPicBean govtIdPicBean = new DocBusInfoUploadRequest.GovtIdPicBean (response.body().getData());                        govtIdPicBeans.add(govtIdPicBean);                        addGovtIdPdfAdapter = new AddGovtIdPdfAdapter(getApplicationContext(), govtIdPicBeans);                        recylerView_choosen_govtid_images.setAdapter(addGovtIdPdfAdapter);                    }                }            }            @Override            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {                // avi_indicator.smoothToHide();                Log.w(TAG,"ServerUrlImagePath"+ "On failure working"+ t.getMessage());                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();            }        });    }    private void choosePhotoIDPdf() {        if(photoIdPicResponse.size()>=1){            Toasty.warning(getApplicationContext(), "Sorry you can't Add more than 1", Toast.LENGTH_SHORT).show();        }        else {            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M   && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)            {                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTO_ID_PDF_PERMISSION);            }            else{                Intent intent = new Intent();                intent.setType("application/pdf");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select PDF"), SELECT_PHOTOID_PDF);            }        }    }    private void uploadPhotoIDPdf() {        avi_indicator.show();        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);        //RestApiInterface ApiService = RetrofitClient.getApiService();        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(photIDPart);//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());        Log.w(TAG,"url  :%s"+ call.request().url().toString());        call.enqueue(new Callback<FileUploadResponse>() {            @Override            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {                avi_indicator.smoothToHide();                Log.w(TAG,"PdfFileLink"+ "--->" + new Gson().toJson(response.body()));                if (response.body() != null) {                    if (200 == response.body().getCode()) {                        DocBusInfoUploadRequest.PhotoIdPicBean photoIdPicBean = new DocBusInfoUploadRequest.PhotoIdPicBean(response.body().getData());                        photoIdPicBeans.add(photoIdPicBean);                        addPhotoIDPdfAdapter = new AddPhotoIDPdfAdapter(getApplicationContext(), photoIdPicBeans);                        recylerView_choosen_photo_id_images.setAdapter(addPhotoIDPdfAdapter);                    }                }            }            @Override            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {                // avi_indicator.smoothToHide();                Log.w(TAG,"ServerUrlImagePath"+ "On failure working"+ t.getMessage());                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();            }        });    }    private void checkValidation() {        if (ContextCompat.checkSelfPermission(this,                Manifest.permission.ACCESS_FINE_LOCATION)                != PackageManager.PERMISSION_GRANTED) {            ActivityCompat.requestPermissions(this,                    new String[]{Manifest.permission.ACCESS_FINE_LOCATION},                    MY_PERMISSIONS_REQUEST_LOCATION);        }        else {                clinic_name = edittext_clinic_name.getText().toString().trim();                clinic_addr = edittext_clinic_address.getText().toString().trim();                int clnnmlength = clinic_name.trim().length();                int clncaddrlength = clinic_addr.trim().length();                boolean can_proceed = true;                if(clinic_name.isEmpty()){                    edittext_clinic_name.setError("Please fill the clinic name");                    Toasty.warning(getApplicationContext(), "Please Enter the clinic name", Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                else if(clnnmlength>25){                    edittext_education_name.setError("The maximum length for an Clinic name is 25 characters ");                    can_proceed = false;                }                else if(educationDetailsBeans.size()<1){                    Toasty.warning(getApplicationContext(),"Please Add minimum 1 Education",Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                else if(experienceDetailsBeans.size()<1){                    Toasty.warning(getApplicationContext(),"Please Add minimum 1 Experience",Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                else if(specializationBeans.size()<1){                    Toasty.warning(getApplicationContext(),"Please Choose minimum 1 Specialization",Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                else if(petHandledBeans.size()<1){                    Toasty.warning(getApplicationContext(),"Please Choose minimum 1 pet handle",Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                else if(clinic_addr.isEmpty()){                    edittext_clinic_address.setError("Please fill the clinic addr");                    Toasty.warning(getApplicationContext(), "Please Enter the clinic address", Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                else if(clncaddrlength>252){                    edittext_education_name.setError("The maximum length for an Clinic Address is 252 characters ");                }                else if(clinicPicBeans.size()<1){                    Toasty.warning(getApplicationContext(), "Please Choose minimum 1 Clinic Image", Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                else if(certificatePicBeans.size()<1){                    Toasty.warning(getApplicationContext(), "Please Choose Certificate File", Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                else if(govtIdPicBeans.size()<1){                    Toasty.warning(getApplicationContext(), "Please Choose GovtID File", Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                else if(photoIdPicBeans.size()<1){                    Toasty.warning(getApplicationContext(), "Please Choose PhotoID File", Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                if(can_proceed){                    if(validdCommunicationType()){                        upldDrInfoResponseCall();                    }                }        }    }    private void upldDrInfoResponseCall() {            avi_indicator.setVisibility(View.VISIBLE);            avi_indicator.smoothToShow();            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss", Locale.getDefault());            FinalDateTime = sdf.format(new Date());            DocBusInfoUploadRequest docBusInfoUploadRequest = new DocBusInfoUploadRequest(user_id,dr_title,dr_name,clinic_name,clinic_addr                ,latitude,longitude,educationDetailsBeans,experienceDetailsBeans,specializationBeans,                petHandledBeans,clinicPicBeans,certificatePicBeans,govtIdPicBeans,photoIdPicBeans,profile_status,status,FinalDateTime,"Android",strcommunicationtype);            RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);            Log.w(TAG,"docBusInfoUploadRequest "+ new Gson().toJson(docBusInfoUploadRequest));            Call<DocBusInfoUploadResponse> call = apiInterface.docsBusInfoUpldResponse(RestUtils.getContentType(), docBusInfoUploadRequest);            Log.w(TAG,"DocBusInfoUploadModel url  :%s"+" "+ call.request().url().toString());            call.enqueue(new Callback<DocBusInfoUploadResponse>() {                @Override                public void onResponse(@NonNull Call<DocBusInfoUploadResponse> call, @NonNull Response<DocBusInfoUploadResponse> response) {                    avi_indicator.smoothToHide();                    Log.w(TAG,"SignupResponse" + new Gson().toJson(response.body()));                    if (response.body() != null) {                        if(response.body().getCode() == 200){                            new SweetAlertDialog(DoctorBusinessInfoActivity.this, SweetAlertDialog.SUCCESS_TYPE)                                    .setTitleText(response.body().getStatus())                                    .setContentText(response.body().getMessage())                                    .setConfirmText("Ok")                                    .setConfirmClickListener(new SweetAlertDialog.OnSweetClickListener() {                                        @Override                                        public void onClick(SweetAlertDialog sweetAlertDialog) {                                           sweetAlertDialog.dismiss();                                           startActivity(new Intent(DoctorBusinessInfoActivity.this,DoctorDashboardActivity.class));                                        }                                    })                                    .show();                        }                    }                }                @Override                public void onFailure(@NonNull Call<DocBusInfoUploadResponse> call,@NonNull Throwable t) {                    avi_indicator.smoothToHide();                    Log.e("Error", "--->" + t.getMessage());                    Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();                }            });    }    @Override    public void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        switch (requestCode) {            case REQUEST_CHECK_SETTINGS_GPS:                switch (resultCode) {                    case Activity.RESULT_OK:                        getMyLocation();                        break;                    case Activity.RESULT_CANCELED:                        getMyLocation();                        break;                }                break;        }        //	Toast.makeText(getActivity(),"kk",Toast.LENGTH_SHORT).show();        if(requestCode== SELECT_CLINIC_PICTURE || requestCode == SELECT_CLINIC_CAMERA)        {            if(requestCode == SELECT_CLINIC_CAMERA)            {                Bitmap photo = (Bitmap) data.getExtras().get("data");                File file = new File(getFilesDir(), "Petfolio1" + ".jpg");                OutputStream os;                try {                    os = new FileOutputStream(file);                    photo.compress(Bitmap.CompressFormat.JPEG, 100, os);                    os.flush();                    os.close();                } catch (Exception e) {                    Log.e(getClass().getSimpleName(), "Error writing bitmap", e);                }                RequestBody requestFile = RequestBody.create(MediaType.parse("image*/"), file);                filePart = MultipartBody.Part.createFormData("sampleFile",  user_id+currentDateandTime+file.getName(), requestFile);                uploadClinicImage();            }            else{                try {                    if (resultCode == Activity.RESULT_OK)                    {                        Log.w("VALUEEEEEEE1111", " " + data);                        Uri selectedImageUri = data.getData();                        Log.w("selectedImageUri", " " + selectedImageUri);                        String filename = getFileName(selectedImageUri);                        Log.w("filename", " " + filename);                        String filePath = FileUtil.getPath(DoctorBusinessInfoActivity.this,selectedImageUri);                        assert filePath != null;                        File file = new File(filePath); // initialize file here                        long length = file.length() / 1024; // Size in KB                        Log.w("filesize", " " + length);//                        if(length>200){////                            new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)//                                    .setTitleText("File Size")//                                    .setContentText("Plz choose file size less than 200 kb ")//                                    .setConfirmText("Ok")//                                    .show();//                        }////                        else{                            filePart = MultipartBody.Part.createFormData("sampleFile", user_id+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse("image/*"), file));                            uploadClinicImage();                        //}                    }                } catch (Exception e) {                    Log.w("Exception", " " + e);                }            }        }        else if(requestCode== SELECT_CERT_PDF){            try {                if (resultCode == Activity.RESULT_OK)                {                    Log.w("URI", " " + data);                    Uri selectedFileUri = data.getData();                    Log.w("selectedFileUri", " " + selectedFileUri);                    String filename = getFileName(selectedFileUri);                    Log.w("filename", " " + filename);                    String filePath = FileUtil.getPath(DoctorBusinessInfoActivity.this,selectedFileUri);                    assert filePath != null;                    File file = new File(filePath); // initialize file here                    long length = file.length() / 1024; // Size in KB                    Log.w("filesize", " " + length);//                    if(length>200){////                        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)//                                .setTitleText("File Size")//                                .setContentText("Plz choose file size less than 200 kb ")//                                .setConfirmText("Ok")//                                .show();//                    }////                    else{                        certPart = MultipartBody.Part.createFormData("sampleFile", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse("pdf/*"), file));                        uploadCertPdf();//                    }                }            } catch (Exception e) {                Log.w("Exception", " " + e);            }        }        else if(requestCode== SELECT_GOVTID_PDF){            try {                if (resultCode == Activity.RESULT_OK)                {                    Log.w("URI", " " + data);                    Uri selectedFileUri = data.getData();                    Log.w("selectedFileUri", " " + selectedFileUri);                    String filename = getFileName(selectedFileUri);                    Log.w("filename", " " + filename);                    String filePath = FileUtil.getPath(DoctorBusinessInfoActivity.this,selectedFileUri);                    assert filePath != null;                    File file = new File(filePath); // initialize file here                    long length = file.length() / 1024; // Size in KB                    Log.w("filesize", " " + length);//                    if(length>200){////                        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)//                                .setTitleText("File Size")//                                .setContentText("Plz choose file size less than 200 kb ")//                                .setConfirmText("Ok")//                                .show();//                    }////                    else{                        govIdPart = MultipartBody.Part.createFormData("sampleFile", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse("pdf/*"), file));                        uploadGovtIDPdf();                    //}                }            } catch (Exception e) {                Log.w("Exception", " " + e);            }        }        else if(requestCode== SELECT_PHOTOID_PDF){            try {                if (resultCode == Activity.RESULT_OK)                {                    Log.w("URI", " " + data);                    Uri selectedFileUri = data.getData();                    Log.w("selectedFileUri", " " + selectedFileUri);                    String filename = getFileName(selectedFileUri);                    Log.w("filename", " " + filename);                    String filePath = FileUtil.getPath(DoctorBusinessInfoActivity.this,selectedFileUri);                    assert filePath != null;                    File file = new File(filePath); // initialize file here                    long length = file.length() / 1024; // Size in KB                    Log.w("filesize", " " + length);//                    if(length>200){////                        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)//                                .setTitleText("File Size")//                                .setContentText("Plz choose file size less than 200 kb ")//                                .setConfirmText("Ok")//                                .show();//                    }////                    else{                        photIDPart = MultipartBody.Part.createFormData("sampleFile", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse("pdf/*"), file));                        uploadPhotoIDPdf();                    //}                }            } catch (Exception e) {                Log.w("Exception", " " + e);            }        }    }    @Override    public void onBackPressed() {        super.onBackPressed();        startActivity(new Intent(DoctorBusinessInfoActivity.this, LoginActivity.class));        finish();    }    @Override    public void onClick(View v) {        switch (v.getId()){            case R.id.buttonsubmit:                checkValidation();                break;            case R.id.img_bck:                onBackPressed();                break;            case R.id.buttonAddedu:                addEduc();                break;            case R.id.buttonAddexpr:                addExpr();                break;            case R.id.edtx_from:                getStartDate();                break;            case R.id.edtx_to:                if(edittext_from.getText().toString().equals("")){                    Toasty.warning(getApplicationContext(), "Please Choose Start Date", Toast.LENGTH_SHORT).show();                }                else{                    getEndDate();                }                break;            case R.id.edtx_clinic_pic_choose:                chooseClinicImage();                break;            case R.id.edtx_clinic_certif_choose:                chooseCertPdf();                break;            case R.id.edtx_clinic_govtid_choose:                chooseGovIDPdf();                break;            case R.id.edtx_clinic_photoid_choose:                choosePhotoIDPdf();                break;            case R.id.edtx_edu_yr:                getEduYear();                break;        }    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        if (requestCode == MY_PERMISSIONS_REQUEST_LOCATION) {            if (grantResults.length > 0                    && grantResults[0] == PackageManager.PERMISSION_GRANTED) {                if (ContextCompat.checkSelfPermission(getApplicationContext(),                        Manifest.permission.ACCESS_FINE_LOCATION)                        == PackageManager.PERMISSION_GRANTED) {                }            } else {                Toast.makeText(getApplicationContext(), "permission denied", Toast.LENGTH_LONG).show();            }        }        if (requestCode == REQUEST_READ_CLINIC_PIC_PERMISSION) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                Intent intent = new Intent();                intent.setType("image/*");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select Picture"), SELECT_CLINIC_PICTURE);            } else {                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                        .setTitleText("Permisson Required")                        .setContentText("Plz Allow Permissions for choosing Images from Gallery ")                        .setConfirmText("Ok")                        .setConfirmClickListener(sDialog -> {                            sDialog.dismissWithAnimation();                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);                            }                        })                        .setCancelButton("Cancel", sDialog -> {                            sDialog.dismissWithAnimation();                            showWarning(REQUEST_READ_CLINIC_PIC_PERMISSION);                        })                        .show();            }        }        else if (requestCode == REQUEST_CLINIC_CAMERA_PERMISSION_CODE) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);                startActivityForResult(intent, SELECT_CLINIC_CAMERA);            } else {                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                        .setTitleText("Permisson Required")                        .setContentText("Plz Allow Camera for taking picture")                        .setConfirmText("Ok")                        .setConfirmClickListener(sDialog -> {                            sDialog.dismissWithAnimation();                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);                            }                        })                        .setCancelButton("Cancel", sDialog -> {                            sDialog.dismissWithAnimation();                            showWarning(REQUEST_CLINIC_CAMERA_PERMISSION_CODE);                        })                        .show();            }        }        else if (requestCode == REQUEST_READ_CLINIC_PDF_PERMISSION) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                Intent intent = new Intent();                intent.setType("application/pdf");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select PDF"), SELECT_CERT_PDF);            } else {                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                        .setTitleText("Permisson Required")                        .setContentText("Plz Allow Permissions for choosing Pdf files ")                        .setConfirmText("Ok")                        .setConfirmClickListener(sDialog -> {                            sDialog.dismissWithAnimation();                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PDF_PERMISSION);                            }                        })                        .setCancelButton("Cancel", sDialog -> {                            sDialog.dismissWithAnimation();                            showWarning(REQUEST_READ_CLINIC_PDF_PERMISSION);                        })                        .show();            }        }        else if (requestCode == REQUEST_READ_GOVT_ID_PDF_PERMISSION) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                Intent intent = new Intent();                intent.setType("application/pdf");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select PDF"), SELECT_GOVTID_PDF);            } else {                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                        .setTitleText("Permisson Required")                        .setContentText("Plz Allow Permissions for choosing Pdf Files ")                        .setConfirmText("Ok")                        .setConfirmClickListener(sDialog -> {                            sDialog.dismissWithAnimation();                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVT_ID_PDF_PERMISSION);                            }                        })                        .setCancelButton("Cancel", new SweetAlertDialog.OnSweetClickListener() {                            @Override                            public void onClick(SweetAlertDialog sDialog) {                                sDialog.dismissWithAnimation();                                showWarning(REQUEST_READ_GOVT_ID_PDF_PERMISSION);                            }                        })                        .show();            }        }        else if (requestCode == REQUEST_READ_PHOTO_ID_PDF_PERMISSION) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                Intent intent = new Intent();                intent.setType("application/pdf");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select PDF"), SELECT_PHOTOID_PDF);            } else {                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                        .setTitleText("Permisson Required")                        .setContentText("Plz Allow Permissions for choosing Pdf files ")                        .setConfirmText("Ok")                        .setConfirmClickListener(sDialog -> {                            sDialog.dismissWithAnimation();                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTO_ID_PDF_PERMISSION);                            }                        })                        .setCancelButton("Cancel", sDialog -> {                            sDialog.dismissWithAnimation();                            showWarning(REQUEST_READ_PHOTO_ID_PDF_PERMISSION);                        })                        .show();            }        }        else if (requestCode == MY_PERMISSIONS_REQUEST_LOCATION) {            // If request is cancelled, the result arrays are empty.            if (grantResults.length > 0                    && grantResults[0] == PackageManager.PERMISSION_GRANTED) {                // permission was granted, yay! Do the                // location-related task you need to do.//                if(locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)){                    checkValidation();                ////                else {////                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)//                            .setTitleText("Permisson Required")//                            .setContentText("Plz Turn on Gps ")//                            .setConfirmText("Ok")//                            .setConfirmClickListener(sDialog -> {////                                sDialog.dismissWithAnimation();////                                startActivity(new Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS));////                            })//                            .setCancelButton("Cancel", sDialog -> {//                                sDialog.dismissWithAnimation();////                                checkValidation();//                            })//                            .show();//                }            }            else {                    // permission denied                    showWarning(MY_PERMISSIONS_REQUEST_LOCATION);                }            }    }    private void showWarning(int REQUEST_PERMISSION_CODE) {        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                .setTitleText("Sorry!!")                .setContentText("You Can't proceed further unless you allow permission")                .setConfirmText("Ok")                .setConfirmClickListener(sDialog -> {                    sDialog.dismissWithAnimation();                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)                    {                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_PERMISSION_CODE);                    }                })                .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)                .show();    }    public String getFileName(Uri uri) {        String result = null;        if (uri.getScheme().equals("content")) {            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {                if (cursor != null && cursor.moveToFirst()) {                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));                }            }        }        if (result == null) {            result = uri.getPath();            int cut = result.lastIndexOf('/');            if (cut != -1) {                result = result.substring(cut + 1);            }        }        return result;    }    private void googleApiConnected() {        googleApiClient = new GoogleApiClient.Builder(Objects.requireNonNull(getApplicationContext())).                addConnectionCallbacks(this).                addOnConnectionFailedListener(this).                addApi(LocationServices.API).build();        googleApiClient.connect();    }    private void checkLocation() {        try {            LocationManager lm = (LocationManager) getApplicationContext().getSystemService(Context.LOCATION_SERVICE);            boolean gps_enabled = false;            boolean network_enabled = false;            try {                gps_enabled = lm.isProviderEnabled(LocationManager.GPS_PROVIDER);            } catch (Exception ignored) {            }            try {                network_enabled = lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER);            } catch (Exception ignored) {            }            if (!gps_enabled && !network_enabled) {                if (!lm.isProviderEnabled(LocationManager.GPS_PROVIDER)) {                    getMyLocation();                }            } else {                getLatandLong();            }        } catch (Exception e) {            e.printStackTrace();        }    }    @Override    public void onLocationChanged(Location location) {        mLastLocation = location;        latitude = mLastLocation.getLatitude();        longitude = mLastLocation.getLongitude();        Log.w(TAG,"onLocationChanged : "+" latitude : "+latitude+ " longitude : "+longitude);    }    @Override    public void onConnected(@Nullable Bundle bundle) {        permissionChecking();    }    @Override    public void onConnectionSuspended(int i) {    }    @Override    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {    }    @SuppressLint("LongLogTag")    @Override    public void onMapReady(GoogleMap googleMap) {        mMap = googleMap;    }    private void permissionChecking() {        if (getApplicationContext() != null) {            if (Build.VERSION.SDK_INT >= 23 && (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) &&                    (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED)) {                ActivityCompat.requestPermissions(Objects.requireNonNull(this), new String[]{Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION}, 5);            } else {                checkLocation();            }        }    }    public void getMyLocation() {        if (googleApiClient != null) {            if (googleApiClient.isConnected()) {                if(getApplicationContext() != null){                    if (ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {                        // TODO: Consider calling                        //    ActivityCompat#requestPermissions                        // here to request the missing permissions, and then overriding                        //   public void onRequestPermissionsResult(int requestCode, String[] permissions,                        //                                          int[] grantResults)                        // to handle the case where the user grants the permission. See the documentation                        // for ActivityCompat#requestPermissions for more details.                        return;                    }                }                mLastLocation = LocationServices.FusedLocationApi.getLastLocation(googleApiClient);                LocationRequest locationRequest = new LocationRequest();                locationRequest.setInterval(2000);                locationRequest.setFastestInterval(2000);                locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);                LocationSettingsRequest.Builder builder = new LocationSettingsRequest.Builder().addLocationRequest(locationRequest);                builder.setAlwaysShow(true);                LocationServices.FusedLocationApi.requestLocationUpdates(googleApiClient, locationRequest, this);                PendingResult<LocationSettingsResult> result = LocationServices.SettingsApi.checkLocationSettings(googleApiClient, builder.build());                result.setResultCallback(result1 -> {                    Status status = result1.getStatus();                    switch (status.getStatusCode()) {                        case LocationSettingsStatusCodes.SUCCESS:                            // All location settings are satisfied.                            // You can initialize location requests here.                            mLastLocation = LocationServices.FusedLocationApi.getLastLocation(googleApiClient);                            Handler handler = new Handler();                            int delay = 1000; //milliseconds                            handler.postDelayed(new Runnable() {                                @SuppressLint("LongLogTag")                                public void run() {                                    //do something                                    Log.w(TAG, "getMyLocation-->");                                    //parkingListResponseCall(checkinhours,checkouthours,requestCheckinDate,requestCheckoutDate, selectedVehicleTypeId);                                }                            }, delay);                            break;                        case LocationSettingsStatusCodes.RESOLUTION_REQUIRED:                            try {                                status.startResolutionForResult(this, REQUEST_CHECK_SETTINGS_GPS);                            } catch (IntentSender.SendIntentException e) {                                // Ignore the error.                            }                            break;                        case LocationSettingsStatusCodes.SETTINGS_CHANGE_UNAVAILABLE:                            break;                    }                });            }        }    }    private void getLatandLong() {        try {            if (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 1);            } else {                GPSTracker gps = new GPSTracker(getApplicationContext());                // Check if GPS enabled                if (gps.canGetLocation()) {                    latitude = gps.getLatitude();                    longitude = gps.getLongitude();                    Log.w(TAG, "getLatandLong--->" + "latitude" + " " + latitude + "longitude" + " " + longitude);                }            }        } catch (Exception e) {            e.printStackTrace();        }    }    public boolean validdCommunicationType() {        if(strcommunicationtype.equalsIgnoreCase("Select Communication Type")){            final AlertDialog alertDialog = new AlertDialog.Builder(DoctorBusinessInfoActivity.this).create();            alertDialog.setMessage(getString(R.string.err_msg_type_of_communicationtype));            alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, "Ok",                    (dialog, which) -> alertDialog.cancel());            alertDialog.show();            return false;        }        return true;    }}