package com.petfolio.infinitus.serviceprovider;import android.Manifest;import android.annotation.SuppressLint;import android.app.Activity;import android.app.Dialog;import android.content.Context;import android.content.Intent;import android.content.IntentSender;import android.content.pm.PackageManager;import android.database.Cursor;import android.graphics.Bitmap;import android.location.Address;import android.location.Geocoder;import android.location.Location;import android.location.LocationManager;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.os.Handler;import android.provider.MediaStore;import android.provider.OpenableColumns;import android.util.Log;import android.view.View;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.appcompat.app.AlertDialog;import androidx.appcompat.app.AppCompatActivity;import androidx.cardview.widget.CardView;import androidx.core.app.ActivityCompat;import androidx.core.content.ContextCompat;import androidx.recyclerview.widget.DefaultItemAnimator;import androidx.recyclerview.widget.GridLayoutManager;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import com.google.android.gms.common.ConnectionResult;import com.google.android.gms.common.api.GoogleApiClient;import com.google.android.gms.common.api.PendingResult;import com.google.android.gms.common.api.Status;import com.google.android.gms.location.LocationListener;import com.google.android.gms.location.LocationRequest;import com.google.android.gms.location.LocationServices;import com.google.android.gms.location.LocationSettingsRequest;import com.google.android.gms.location.LocationSettingsResult;import com.google.android.gms.location.LocationSettingsStatusCodes;import com.google.android.gms.maps.GoogleMap;import com.google.android.gms.maps.OnMapReadyCallback;import com.google.android.gms.maps.SupportMapFragment;import com.google.gson.Gson;import com.petfolio.infinitus.R;import com.petfolio.infinitus.adapter.AddGovtIdPdfAdapter;import com.petfolio.infinitus.adapter.AddMoreServiceAdapter;import com.petfolio.infinitus.adapter.AddMoreSpecialzationAdapter;import com.petfolio.infinitus.adapter.AddPhotoIDPdfAdapter;import com.petfolio.infinitus.adapter.AddSPCertPdfAdapter;import com.petfolio.infinitus.adapter.AddServiceImageListAdapter;import com.petfolio.infinitus.adapter.SPServiceListAdapter;import com.petfolio.infinitus.adapter.SPSpecialzationListAdapter;import com.petfolio.infinitus.api.APIClient;import com.petfolio.infinitus.api.RestApiInterface;import com.petfolio.infinitus.appUtils.FileUtil;import com.petfolio.infinitus.interfaces.AddMoreServiceRemoveListener;import com.petfolio.infinitus.interfaces.AddMoreSpecialzationRemoveListener;import com.petfolio.infinitus.interfaces.SPServiceChckedListener;import com.petfolio.infinitus.interfaces.SPSpecialzationChckedListener;import com.petfolio.infinitus.requestpojo.DocBusInfoUploadRequest;import com.petfolio.infinitus.requestpojo.SPDetailsByUserIdRequest;import com.petfolio.infinitus.requestpojo.ServiceProviderRegisterFormCreateRequest;import com.petfolio.infinitus.responsepojo.AddSpecTypeListModel;import com.petfolio.infinitus.responsepojo.FileUploadResponse;import com.petfolio.infinitus.responsepojo.SPServiceListResponse;import com.petfolio.infinitus.responsepojo.ServiceProviderRegisterFormCreateResponse;import com.petfolio.infinitus.service.GPSTracker;import com.petfolio.infinitus.sessionmanager.SessionManager;import com.petfolio.infinitus.utils.ConnectionDetector;import com.petfolio.infinitus.utils.RestUtils;import com.wang.avi.AVLoadingIndicatorView;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.OutputStream;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Locale;import java.util.Objects;import butterknife.BindView;import butterknife.ButterKnife;import cn.pedant.SweetAlert.SweetAlertDialog;import es.dmoral.toasty.Toasty;import okhttp3.MediaType;import okhttp3.MultipartBody;import okhttp3.RequestBody;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;public class ServiceProviderEditFormActivity extends AppCompatActivity implements View.OnClickListener, SPServiceChckedListener, AddMoreServiceRemoveListener, SPSpecialzationChckedListener, AddMoreSpecialzationRemoveListener,        OnMapReadyCallback, GoogleApiClient.ConnectionCallbacks,        GoogleApiClient.OnConnectionFailedListener, LocationListener {    private final String TAG = "ServiceProviderRegisterFormActivity";    @SuppressLint("NonConstantResourceId")    @BindView(R.id.edt_business_name)    EditText edt_business_name;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rl_service_gallery_image)    RelativeLayout rl_service_gallery_image;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rl_certificates)    RelativeLayout rl_certificates;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rl_govtid)    RelativeLayout rl_govtid;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rl_photoid)    RelativeLayout rl_photoid;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.buttonsubmit)    Button buttonsubmit;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rcylr_sp_servicelist)    RecyclerView rcylr_sp_servicelist;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rcylr_sp_servicestaticlist)    RecyclerView rcylr_sp_servicestaticlist;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.edt_addmore_service)    EditText edt_addmore_service;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.btn_add_service)    Button btn_add_service;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rcylr_sp_specializationlist)    RecyclerView rcylr_sp_specializationlist;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rcylr_sp_specializationstaticlist)    RecyclerView rcylr_sp_specializationstaticlist;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.edt_specialization_ifany)    EditText edt_specialization_ifany;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.btn_add_specialization)    Button btn_add_specialization;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.txt_no_records_specialization)    TextView txt_no_records_specialization;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rcylr_choosen_service_img)    RecyclerView rcylr_choosen_service_img;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rcylr_choosen_certificate_img)    RecyclerView recylerView_choosen_certificate_images;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rcylr_choosen_govtid_images)    RecyclerView recylerView_choosen_govtid_images;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rcylr_choosen_photoid_img)    RecyclerView recylerView_choosen_photo_id_images;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.cdvw_certificate)    CardView material_cardview_certificate;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.img_bck)    ImageView img_bck;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.avi_indicator)    AVLoadingIndicatorView avi_indicator;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.txt_no_records)    TextView txt_no_records;    String business_name;    ArrayList<FileUploadResponse> certificatePicResponse = new ArrayList<>();    private final List<DocBusInfoUploadRequest.GovtIdPicBean> govtIdPicBeans = new ArrayList<>();    private final List<DocBusInfoUploadRequest.PhotoIdPicBean> photoIdPicBeans = new ArrayList<>();    ArrayList<AddSpecTypeListModel> addSpecTypeListModels = new ArrayList<>();    SPServiceListAdapter spServiceListAdapter;    SPSpecialzationListAdapter spSpecialzationListAdapter;    AddMoreServiceAdapter addMoreServiceAdapter;    AddMoreSpecialzationAdapter addMoreSpecialzationAdapter;    AddServiceImageListAdapter addServiceImageListAdapter;    AddSPCertPdfAdapter addSPCertPdfAdapter;    AddGovtIdPdfAdapter addGovtIdPdfAdapter;    AddPhotoIDPdfAdapter addPhotoIDPdfAdapter;    MultipartBody.Part filePart,certPart,govIdPart,photIDPart;    private static final int REQUEST_CLINIC_CAMERA_PERMISSION_CODE = 785 ;    private static final int REQUEST_READ_CLINIC_PDF_PERMISSION = 787 ;    private static final int REQUEST_READ_GOVT_ID_PDF_PERMISSION = 788;    private static final int REQUEST_READ_PHOTO_ID_PDF_PERMISSION = 789;    private static final int REQUEST_READ_CLINIC_PIC_PERMISSION = 786;    private static final int SELECT_CLINIC_CAMERA = 1000 ;    private static final int SELECT_CLINIC_PICTURE = 1001 ;    private static final int SELECT_CERT_PDF = 1002;    private static final int SELECT_GOVTID_PDF = 1003;    private static final int SELECT_PHOTOID_PDF = 1004;    String user_id,currentDateandTime;    private List<SPServiceListResponse.DataBean.ServiceListBean> spServiceList;    private List<SPServiceListResponse.DataBean.SpecializationBean> spSpecialzationList;    List<ServiceProviderRegisterFormCreateRequest.BusServiceListBean> bus_service_list = new ArrayList<>();    List<ServiceProviderRegisterFormCreateRequest.BusServiceListBean> bus_service_addmore_list = new ArrayList<>();    List<ServiceProviderRegisterFormCreateRequest.BusSpecListBean> bus_specialzation_addmore_list = new ArrayList<>();    List<ServiceProviderRegisterFormCreateRequest.BusSpecListBean> bus_spec_list = new ArrayList<>();    List<ServiceProviderRegisterFormCreateRequest.BusCertifBean> bus_certif_list = new ArrayList<>();    List<ServiceProviderRegisterFormCreateRequest.BusServiceGallBean> bus_service_gall_list = new ArrayList<>();    private String username;    private String useremail;    private String userphone;    private String govtIdPic;    private String photoIdPic;    Dialog alertDialog;    private GoogleApiClient googleApiClient;    Location mLastLocation;    public static final int MY_PERMISSIONS_REQUEST_LOCATION = 99;    private SupportMapFragment mapFragment;    private double latitude;    private double longitude;    private static final int REQUEST_CHECK_SETTINGS_GPS = 0x1;    private String AddressLine;    @SuppressLint("LongLogTag")    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_service_provider_edit_form);        ButterKnife.bind(this);        SessionManager session = new SessionManager(getApplicationContext());        HashMap<String, String> user = session.getProfileDetails();        username = user.get(SessionManager.KEY_FIRST_NAME);        user_id = user.get(SessionManager.KEY_ID);        useremail = user.get(SessionManager.KEY_EMAIL_ID);        userphone = user.get(SessionManager.KEY_MOBILE);        Log.w(TAG,"username : "+username+" user_id : "+user_id);        avi_indicator.setVisibility(View.GONE);        rcylr_sp_servicestaticlist.setVisibility(View.GONE);        if (mapFragment == null) {            mapFragment = SupportMapFragment.newInstance();            mapFragment.getMapAsync(this);        }        googleApiConnected();        LocationRequest locationRequest = LocationRequest.create();        locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);        locationRequest.setInterval(1000); // 10 seconds        locationRequest.setFastestInterval(1000); // 5 seconds        if(user_id != null){            if (new ConnectionDetector(getApplicationContext()).isNetworkAvailable(getApplicationContext())) {                spDetailsReponseByUserIdCall();            }        }        buttonsubmit.setOnClickListener(this);        rl_service_gallery_image.setOnClickListener(this);        rl_certificates.setOnClickListener(this);        rl_govtid.setOnClickListener(this);        rl_photoid.setOnClickListener(this);        img_bck.setOnClickListener(this);        btn_add_service.setOnClickListener(this);        btn_add_specialization.setOnClickListener(this);        if (new ConnectionDetector(ServiceProviderEditFormActivity.this).isNetworkAvailable(ServiceProviderEditFormActivity.this)) {            SPServiceListResponseCall();        }        /* ************ Adding Education ************** */       /* recylerView_added_education.setHasFixedSize(true);        recylerView_added_education.setNestedScrollingEnabled(false);        LinearLayoutManager layoutManager = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.VERTICAL, false);        recylerView_added_education.setLayoutManager(layoutManager);        addEducAdapter = new AddEducAdapter(getApplicationContext(), educationDetailsBeans);        recylerView_added_education.setAdapter(addEducAdapter);*/        /* ************ Adding service gallery Images ************** */        rcylr_choosen_service_img.setHasFixedSize(true);        rcylr_choosen_service_img.setNestedScrollingEnabled(false);        LinearLayoutManager layoutManager2 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);        rcylr_choosen_service_img.setLayoutManager(layoutManager2);        /* ************ Adding Certificate ************** */        recylerView_choosen_certificate_images.setHasFixedSize(true);        recylerView_choosen_certificate_images.setNestedScrollingEnabled(false);        LinearLayoutManager layoutManager3 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);        recylerView_choosen_certificate_images.setLayoutManager(layoutManager3);        /* ************ Adding GovtID ************** */        recylerView_choosen_govtid_images.setHasFixedSize(true);        recylerView_choosen_govtid_images.setNestedScrollingEnabled(false);        LinearLayoutManager layoutManager4 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);        recylerView_choosen_govtid_images.setLayoutManager(layoutManager4);        /* ************ Adding PhotoID ************** */        recylerView_choosen_photo_id_images.setHasFixedSize(true);        recylerView_choosen_photo_id_images.setNestedScrollingEnabled(false);        LinearLayoutManager layoutManager5 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);        recylerView_choosen_photo_id_images.setLayoutManager(layoutManager5);        /* *************** Get Current Date and Time ************************ */        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy hh:mm aa", Locale.getDefault());         currentDateandTime = sdf.format(new Date());    }    @SuppressLint("LongLogTag")    public void SPServiceListResponseCall(){        avi_indicator.setVisibility(View.VISIBLE);        avi_indicator.smoothToShow();        //Creating an object of our api interface        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);        Call<SPServiceListResponse> call = apiInterface.SPServiceListResponseCall(RestUtils.getContentType());        Log.w(TAG,"url  :%s"+ call.request().url().toString());        call.enqueue(new Callback<SPServiceListResponse>() {            @SuppressLint("SetTextI18n")            @Override            public void onResponse(@NonNull Call<SPServiceListResponse> call, @NonNull Response<SPServiceListResponse> response) {                avi_indicator.smoothToHide();                if (response.body() != null) {                    if(200 == response.body().getCode()){                        Log.w(TAG,"SPServiceListResponse" + new Gson().toJson(response.body()));                        if(response.body().getData() != null) {                            spServiceList = response.body().getData().getService_list();                            spSpecialzationList = response.body().getData().getSpecialization();                        }                        Log.w(TAG,"spServiceList : "+new Gson().toJson(spServiceList));                        if(spServiceList != null && spServiceList.size()>0){                            rcylr_sp_servicelist.setVisibility(View.VISIBLE);                            txt_no_records.setVisibility(View.GONE);                            setSPServiceList(spServiceList);                        }else{                            rcylr_sp_servicelist.setVisibility(View.GONE);                            txt_no_records.setVisibility(View.VISIBLE);                            txt_no_records.setText("No services found");                        }                        Log.w(TAG,"spSpecialzationList : "+new Gson().toJson(spSpecialzationList));                        if(spSpecialzationList != null && spSpecialzationList.size()>0){                            rcylr_sp_specializationlist.setVisibility(View.VISIBLE);                            txt_no_records_specialization.setVisibility(View.GONE);                            setSPSpecialzationList(spSpecialzationList);                        }else{                            rcylr_sp_specializationlist.setVisibility(View.GONE);                            txt_no_records_specialization.setVisibility(View.VISIBLE);                            txt_no_records_specialization.setText("No specialzation found");                        }                    }                }            }            @Override            public void onFailure(@NonNull Call<SPServiceListResponse> call, @NonNull  Throwable t) {                avi_indicator.smoothToHide();                Log.w(TAG,"SPServiceListResponse flr"+t.getMessage());            }        });    }    private void setSPServiceList(List<SPServiceListResponse.DataBean.ServiceListBean> spServiceList) {        rcylr_sp_servicelist.setLayoutManager(new GridLayoutManager(this, 2));        rcylr_sp_servicelist.setItemAnimator(new DefaultItemAnimator());        spServiceListAdapter = new SPServiceListAdapter(getApplicationContext(), spServiceList,this);        rcylr_sp_servicelist.setAdapter(spServiceListAdapter);    }    private void setSPAddMoreServiceList(List<ServiceProviderRegisterFormCreateRequest.BusServiceListBean> bus_service_addmore_list) {        rcylr_sp_servicestaticlist.setLayoutManager(new GridLayoutManager(this, 2));        rcylr_sp_servicestaticlist.setItemAnimator(new DefaultItemAnimator());        addMoreServiceAdapter = new AddMoreServiceAdapter(getApplicationContext(), bus_service_addmore_list,this);        rcylr_sp_servicestaticlist.setAdapter(addMoreServiceAdapter);    }    private void setSPSpecialzationList(List<SPServiceListResponse.DataBean.SpecializationBean> spSpecialzationList) {        rcylr_sp_specializationlist.setLayoutManager(new GridLayoutManager(this, 2));        rcylr_sp_specializationlist.setItemAnimator(new DefaultItemAnimator());        spSpecialzationListAdapter = new SPSpecialzationListAdapter(getApplicationContext(), spSpecialzationList,this);        rcylr_sp_specializationlist.setAdapter(spSpecialzationListAdapter);    }    private void setSPAddMoreSpecialzationList(List<ServiceProviderRegisterFormCreateRequest.BusSpecListBean> bus_specialzation_addmore_list) {        rcylr_sp_specializationstaticlist.setLayoutManager(new GridLayoutManager(this, 2));        rcylr_sp_specializationstaticlist.setItemAnimator(new DefaultItemAnimator());        addMoreSpecialzationAdapter = new AddMoreSpecialzationAdapter(getApplicationContext(), bus_specialzation_addmore_list,this);        rcylr_sp_specializationstaticlist.setAdapter(addMoreSpecialzationAdapter);    }    @SuppressLint("LongLogTag")    @Override    public void onItemSPServiceCheck(int position, String specValue, List<SPServiceListResponse.DataBean.ServiceListBean> spectypedataBeanList) {//        Toast.makeText(DoctorBusinessInfoActivity.this, position + specValue + "checked!", Toast.LENGTH_SHORT).show();            addSpecTypeListModels.add(new AddSpecTypeListModel(position,specValue));           ServiceProviderRegisterFormCreateRequest.BusServiceListBean busServiceListBean = new ServiceProviderRegisterFormCreateRequest.BusServiceListBean();           busServiceListBean.setBus_service_list(specValue);           bus_service_list.add(busServiceListBean);            spectypedataBeanList.get(position).setSelected(true);            spServiceListAdapter.notifyDataSetChanged();            Log.w(TAG +"added_spec_list",addSpecTypeListModels.toString());            Log.w(TAG + "added_spec_list_1",new Gson().toJson(bus_service_list));    }    @SuppressLint("LongLogTag")    @Override    public void onItemSPServiceUnCheck(int position, String specValue) {        addSpecTypeListModels.remove(position);        bus_service_list.remove(position);        Log.w(TAG + "removed_service_list",new Gson().toJson(bus_service_list));    }    @SuppressLint("LongLogTag")    private void chooseServiceGalleryImage() {        Log.w(TAG,"bus_service_gall_list.size() : "+bus_service_gall_list.size()+" conditions : "+(bus_service_gall_list.size()>=3));        if(bus_service_gall_list.size()>=3){            Toasty.warning(getApplicationContext(), "Sorry you can't Add more than 3", Toast.LENGTH_SHORT).show();        }        else        {            final CharSequence[] items = {"Take Photo", "Choose from Library", "Cancel"};            //AlertDialog.Builder alert=new AlertDialog.Builder(this);            AlertDialog.Builder builder = new AlertDialog.Builder(ServiceProviderEditFormActivity.this);            builder.setTitle("Choose option");            builder.setItems(items, (dialog, item) -> {                if (items[item].equals("Take Photo"))                {                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(ServiceProviderEditFormActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)                    {                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);                    }                    else                    {                        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);                        startActivityForResult(intent, SELECT_CLINIC_CAMERA);                    }                }                else if (items[item].equals("Choose from Library"))                {                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(ServiceProviderEditFormActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)                    {                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);                    }                    else{                        Intent intent = new Intent();                        intent.setType("image/*");                        intent.setAction(Intent.ACTION_GET_CONTENT);                        startActivityForResult(Intent.createChooser(intent, "Select Picture"), SELECT_CLINIC_PICTURE);                    }                }                else if (items[item].equals("Cancel")) {                    dialog.dismiss();                }            });            builder.show();        }    }    @SuppressLint("LongLogTag")    private void uploadClinicImage() {        avi_indicator.show();        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);        //RestApiInterface ApiService = RetrofitClient.getApiService();        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(filePart);//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());        Log.w(TAG,"url  :%s"+ call.request().url().toString());        call.enqueue(new Callback<FileUploadResponse>() {            @SuppressLint("LongLogTag")            @Override            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {                avi_indicator.smoothToHide();                Log.w(TAG,"Profpic"+ "--->" + new Gson().toJson(response.body()));                if (response.body() != null) {                    if (200 == response.body().getCode()) {                        ServiceProviderRegisterFormCreateRequest.BusServiceGallBean busServiceGallBean = new ServiceProviderRegisterFormCreateRequest.BusServiceGallBean();                        busServiceGallBean.setBus_service_gall(response.body().getData());                        bus_service_gall_list.add(busServiceGallBean);                        addServiceImageListAdapter = new AddServiceImageListAdapter(getApplicationContext(), bus_service_gall_list);                        rcylr_choosen_service_img.setAdapter(addServiceImageListAdapter);                    }                }            }            @SuppressLint("LongLogTag")            @Override            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {                // avi_indicator.smoothToHide();                Log.w(TAG,"ServerUrlImagePath"+ "On failure working"+ t.getMessage());                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();            }        });    }    @SuppressLint("LongLogTag")    private void chooseCertPdf() {        Log.w(TAG,"certificatePicResponse.size() : "+certificatePicResponse.size()+" conditions : "+(certificatePicResponse.size()>=1));        if(certificatePicResponse.size()>=3){            Toasty.warning(getApplicationContext(), "Sorry you can't Add more than 3", Toast.LENGTH_SHORT).show();        }        else {            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M   && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)            {                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PDF_PERMISSION);            }            else{                Intent intent = new Intent();                intent.setType("application/pdf");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select PDF"), SELECT_CERT_PDF);            }        }    }    @SuppressLint("LongLogTag")    private void uploadCertPdf() {        avi_indicator.show();        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);        //RestApiInterface ApiService = RetrofitClient.getApiService();        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(certPart);//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());        Log.w(TAG,"url  :%s"+ call.request().url().toString());        call.enqueue(new Callback<FileUploadResponse>() {            @SuppressLint("LongLogTag")            @Override            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {                avi_indicator.smoothToHide();                Log.w(TAG,"PdfFileLink"+ "--->" + new Gson().toJson(response.body()));                if (response.body() != null) {                    if (200 == response.body().getCode()) {                        ServiceProviderRegisterFormCreateRequest.BusCertifBean busCertifBean = new ServiceProviderRegisterFormCreateRequest.BusCertifBean();                        busCertifBean.setBus_certif(response.body().getData());                        bus_certif_list.add(busCertifBean);                        addSPCertPdfAdapter = new AddSPCertPdfAdapter(getApplicationContext(), bus_certif_list);                        recylerView_choosen_certificate_images.setAdapter(addSPCertPdfAdapter);                    }                    }            }            @SuppressLint("LongLogTag")            @Override            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {                // avi_indicator.smoothToHide();                Log.w(TAG,"ServerUrlImagePath"+ "On failure working"+ t.getMessage());                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();            }        });    }    @SuppressLint("LongLogTag")    private void chooseGovIDPdf() {        Log.w(TAG," govtIdPicBeans.size() : "+govtIdPicBeans.size()+" conditions : "+(govtIdPicBeans.size()>=1));        if(govtIdPicBeans.size()>=1){            Toasty.warning(getApplicationContext(), "Sorry you can't Add more than 1", Toast.LENGTH_SHORT).show();        }        else {            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M   && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)            {                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVT_ID_PDF_PERMISSION);            }            else{                Intent intent = new Intent();                intent.setType("application/pdf");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select PDF"), SELECT_GOVTID_PDF);            }        }    }    @SuppressLint("LongLogTag")    private void uploadGovtIDPdf() {        avi_indicator.show();        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);        //RestApiInterface ApiService = RetrofitClient.getApiService();        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(govIdPart);//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());        Log.w(TAG,"url  :%s"+ call.request().url().toString());        call.enqueue(new Callback<FileUploadResponse>() {            @SuppressLint("LongLogTag")            @Override            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {                avi_indicator.smoothToHide();                Log.w(TAG,"PdfFileLink"+ "--->" + new Gson().toJson(response.body()));                if (response.body() != null) {                    if (200 == response.body().getCode()) {                        govtIdPic = response.body().getData();                        DocBusInfoUploadRequest.GovtIdPicBean govtIdPicBean = new DocBusInfoUploadRequest.GovtIdPicBean (response.body().getData());                        govtIdPicBeans.add(govtIdPicBean);                        addGovtIdPdfAdapter = new AddGovtIdPdfAdapter(getApplicationContext(), govtIdPicBeans);                        recylerView_choosen_govtid_images.setAdapter(addGovtIdPdfAdapter);                    }                }            }            @SuppressLint("LongLogTag")            @Override            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {                // avi_indicator.smoothToHide();                Log.w(TAG,"ServerUrlImagePath"+ "On failure working"+ t.getMessage());                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();            }        });    }    @SuppressLint("LongLogTag")    private void choosePhotoIDPdf() {        Log.w(TAG," photoIdPicBeans.size() : "+photoIdPicBeans.size()+" conditions : "+(photoIdPicBeans.size()>=1));        if(photoIdPicBeans.size()>=1){            Toasty.warning(getApplicationContext(), "Sorry you can't Add more than 1", Toast.LENGTH_SHORT).show();        }        else {            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M   && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)            {                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTO_ID_PDF_PERMISSION);            }            else{                Intent intent = new Intent();                intent.setType("application/pdf");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select PDF"), SELECT_PHOTOID_PDF);            }        }    }    @SuppressLint("LongLogTag")    private void uploadPhotoIDPdf() {        avi_indicator.show();        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);        //RestApiInterface ApiService = RetrofitClient.getApiService();        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(photIDPart);//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());        Log.w(TAG,"url  :%s"+ call.request().url().toString());        call.enqueue(new Callback<FileUploadResponse>() {            @SuppressLint("LongLogTag")            @Override            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {                avi_indicator.smoothToHide();                Log.w(TAG,"PdfFileLink"+ "--->" + new Gson().toJson(response.body()));                if (response.body() != null) {                    if (200 == response.body().getCode()) {                        photoIdPic = response.body().getData();                        DocBusInfoUploadRequest.PhotoIdPicBean photoIdPicBean = new DocBusInfoUploadRequest.PhotoIdPicBean(response.body().getData());                        photoIdPicBeans.add(photoIdPicBean);                        addPhotoIDPdfAdapter = new AddPhotoIDPdfAdapter(getApplicationContext(), photoIdPicBeans);                        recylerView_choosen_photo_id_images.setAdapter(addPhotoIDPdfAdapter);                    }                }            }            @SuppressLint("LongLogTag")            @Override            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {                // avi_indicator.smoothToHide();                Log.w(TAG,"ServerUrlImagePath"+ "On failure working"+ t.getMessage());                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();            }        });    }    private void checkValidation() {            business_name = edt_business_name.getText().toString().trim();            boolean can_proceed = true;                if(business_name.isEmpty()){                    edt_business_name.setError("Please fill the business name");                    edt_business_name.requestFocus();                    can_proceed = false;                }                else if(bus_service_list != null && bus_service_list.size()<1){                    Toasty.warning(getApplicationContext(),"Please Choose minimum 1 Service",Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                /* else if(specializationBeans.size()<1){                    Toasty.warning(getApplicationContext(),"Please Choose minimum 1 Specialization",Toast.LENGTH_SHORT).show();                    can_proceed = false;                }*/                else if(bus_service_gall_list.size()<1){                    Toasty.warning(getApplicationContext(), "Please Choose minimum 1 Service gallery image", Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                else if(photoIdPicBeans.size()<1){                    Toasty.warning(getApplicationContext(), "Please Choose PhotoID File", Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                else if(govtIdPicBeans.size()<1){                    Toasty.warning(getApplicationContext(), "Please Choose GovtID File", Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                else if(bus_certif_list.size()<1){                    Toasty.warning(getApplicationContext(), "Please Choose Certificate File", Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                if(can_proceed){                    if (new ConnectionDetector(getApplicationContext()).isNetworkAvailable(getApplicationContext())) {                        serviceProviderRegisterFormCreateResponseCall();                    }                }    }    @Override    public void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        switch (requestCode) {            case REQUEST_CHECK_SETTINGS_GPS:                switch (resultCode) {                    case Activity.RESULT_OK:                        getMyLocation();                        break;                    case Activity.RESULT_CANCELED:                        getMyLocation();                        break;                }                break;        }        //	Toast.makeText(getActivity(),"kk",Toast.LENGTH_SHORT).show();        if(requestCode== SELECT_CLINIC_PICTURE || requestCode == SELECT_CLINIC_CAMERA)        {            if(requestCode == SELECT_CLINIC_CAMERA)            {                Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get("data");                File file = new File(getFilesDir(), "Petfolio1" + ".jpg");                OutputStream os;                try {                    os = new FileOutputStream(file);                    if (photo != null) {                        photo.compress(Bitmap.CompressFormat.JPEG, 100, os);                    }                    os.flush();                    os.close();                } catch (Exception e) {                    Log.e(getClass().getSimpleName(), "Error writing bitmap", e);                }                RequestBody requestFile = RequestBody.create(MediaType.parse("image*/"), file);                filePart = MultipartBody.Part.createFormData("sampleFile",  user_id+currentDateandTime+file.getName(), requestFile);                uploadClinicImage();            }            else{                try {                    if (resultCode == Activity.RESULT_OK)                    {                        Log.w("VALUEEEEEEE1111", " " + data);                        Uri selectedImageUri = data.getData();                        Log.w("selectedImageUri", " " + selectedImageUri);                        String filename = null;                        if (selectedImageUri != null) {                            filename = getFileName(selectedImageUri);                        }                        Log.w("filename", " " + filename);                        String filePath = FileUtil.getPath(ServiceProviderEditFormActivity.this,selectedImageUri);                        assert filePath != null;                        File file = new File(filePath); // initialize file here                        long length = file.length() / 1024; // Size in KB                        Log.w("filesize", " " + length);//                        if(length>200){////                            new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)//                                    .setTitleText("File Size")//                                    .setContentText("Plz choose file size less than 200 kb ")//                                    .setConfirmText("Ok")//                                    .show();//                        }////                        else{                            filePart = MultipartBody.Part.createFormData("sampleFile", user_id+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse("image/*"), file));                            uploadClinicImage();                        //}                    }                } catch (Exception e) {                    Log.w("Exception", " " + e);                }            }        }        else if(requestCode== SELECT_CERT_PDF){            try {                if (resultCode == Activity.RESULT_OK)                {                    Log.w("URI", " " + data);                    Uri selectedFileUri = data.getData();                    Log.w("selectedFileUri", " " + selectedFileUri);                    String filename = null;                    if (selectedFileUri != null) {                        filename = getFileName(selectedFileUri);                    }                    Log.w("filename", " " + filename);                    String filePath = FileUtil.getPath(ServiceProviderEditFormActivity.this,selectedFileUri);                    assert filePath != null;                    File file = new File(filePath); // initialize file here                    long length = file.length() / 1024; // Size in KB                    Log.w("filesize", " " + length);//                    if(length>200){////                        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)//                                .setTitleText("File Size")//                                .setContentText("Plz choose file size less than 200 kb ")//                                .setConfirmText("Ok")//                                .show();//                    }////                    else{                        certPart = MultipartBody.Part.createFormData("sampleFile", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse("pdf/*"), file));                        uploadCertPdf();//                    }                }            } catch (Exception e) {                Log.w("Exception", " " + e);            }        }        else if(requestCode== SELECT_GOVTID_PDF){            try {                if (resultCode == Activity.RESULT_OK)                {                    Log.w("URI", " " + data);                    Uri selectedFileUri = data.getData();                    Log.w("selectedFileUri", " " + selectedFileUri);                    String filename = null;                    if (selectedFileUri != null) {                        filename = getFileName(selectedFileUri);                    }                    Log.w("filename", " " + filename);                    String filePath = FileUtil.getPath(ServiceProviderEditFormActivity.this,selectedFileUri);                    assert filePath != null;                    File file = new File(filePath); // initialize file here                    long length = file.length() / 1024; // Size in KB                    Log.w("filesize", " " + length);//                    if(length>200){////                        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)//                                .setTitleText("File Size")//                                .setContentText("Plz choose file size less than 200 kb ")//                                .setConfirmText("Ok")//                                .show();//                    }////                    else{                        govIdPart = MultipartBody.Part.createFormData("sampleFile", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse("pdf/*"), file));                        uploadGovtIDPdf();                    //}                }            } catch (Exception e) {                Log.w("Exception", " " + e);            }        }        else if(requestCode== SELECT_PHOTOID_PDF){            try {                if (resultCode == Activity.RESULT_OK)                {                    Log.w("URI", " " + data);                    Uri selectedFileUri = data.getData();                    Log.w("selectedFileUri", " " + selectedFileUri);                    String filename = null;                    if (selectedFileUri != null) {                        filename = getFileName(selectedFileUri);                    }                    Log.w("filename", " " + filename);                    String filePath = FileUtil.getPath(ServiceProviderEditFormActivity.this,selectedFileUri);                    assert filePath != null;                    File file = new File(filePath); // initialize file here                    long length = file.length() / 1024; // Size in KB                    Log.w("filesize", " " + length);//                    if(length>200){////                        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)//                                .setTitleText("File Size")//                                .setContentText("Plz choose file size less than 200 kb ")//                                .setConfirmText("Ok")//                                .show();//                    }////                    else{                        photIDPart = MultipartBody.Part.createFormData("sampleFile", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse("pdf/*"), file));                        uploadPhotoIDPdf();                    //}                }            } catch (Exception e) {                Log.w("Exception", " " + e);            }        }    }    @Override    public void onBackPressed() {        super.onBackPressed();        startActivity(new Intent(ServiceProviderEditFormActivity.this, ServiceProviderDashboardActivity.class));        finish();    }    @SuppressLint("NonConstantResourceId")    @Override    public void onClick(View v) {        switch (v.getId()){            case R.id.buttonsubmit:                checkValidation();                break;            case R.id.img_bck:                onBackPressed();                break;                case R.id.rl_service_gallery_image:                    chooseServiceGalleryImage();                break;            case R.id.rl_certificates:                chooseCertPdf();                break;            case R.id.rl_govtid:                chooseGovIDPdf();                break;            case R.id.rl_photoid:                choosePhotoIDPdf();                break;                case R.id.btn_add_service:                    addMoreService();                break;                case R.id.btn_add_specialization:                    addMoreSpecialzation();                break;        }    }    @SuppressLint("LongLogTag")    private void addMoreService() {        if(edt_addmore_service.getText().toString() != null && !edt_addmore_service.getText().toString().isEmpty()){            ServiceProviderRegisterFormCreateRequest.BusServiceListBean busServiceListBean = new ServiceProviderRegisterFormCreateRequest.BusServiceListBean();            busServiceListBean.setBus_service_list(edt_addmore_service.getText().toString());            bus_service_addmore_list.add(busServiceListBean);            bus_service_list.add(busServiceListBean);            rcylr_sp_servicestaticlist.setVisibility(View.VISIBLE);            setSPAddMoreServiceList(bus_service_addmore_list);            edt_addmore_service.setText("");            Log.w(TAG,"moreServiceArrayList : "+new Gson().toJson(bus_service_list));        }else{            showWarningAddMoreService();        }    }    @SuppressLint("LongLogTag")    private void addMoreSpecialzation() {        if(edt_specialization_ifany.getText().toString() != null && !edt_specialization_ifany.getText().toString().isEmpty()){            ServiceProviderRegisterFormCreateRequest.BusSpecListBean busSpecListBean = new ServiceProviderRegisterFormCreateRequest.BusSpecListBean();            busSpecListBean.setBus_spec_list(edt_specialization_ifany.getText().toString());            bus_specialzation_addmore_list.add(busSpecListBean);            bus_spec_list.add(busSpecListBean);            rcylr_sp_specializationstaticlist.setVisibility(View.VISIBLE);            setSPAddMoreSpecialzationList(bus_specialzation_addmore_list);            edt_specialization_ifany.setText("");            Log.w(TAG,"moreSpecialzationArrayList : "+new Gson().toJson(bus_spec_list));        }else{            showWarningAddMoreSpecialzation();        }    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        if (requestCode == MY_PERMISSIONS_REQUEST_LOCATION) {            if (grantResults.length > 0                    && grantResults[0] == PackageManager.PERMISSION_GRANTED) {                if (ContextCompat.checkSelfPermission(getApplicationContext(),                        Manifest.permission.ACCESS_FINE_LOCATION)                        == PackageManager.PERMISSION_GRANTED) {                }            } else {                Toast.makeText(getApplicationContext(), "permission denied", Toast.LENGTH_LONG).show();            }        }        if (requestCode == REQUEST_READ_CLINIC_PIC_PERMISSION) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                Intent intent = new Intent();                intent.setType("image/*");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select Picture"), SELECT_CLINIC_PICTURE);            } else {                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                        .setTitleText("Permisson Required")                        .setContentText("Plz Allow Permissions for choosing Images from Gallery ")                        .setConfirmText("Ok")                        .setConfirmClickListener(sDialog -> {                            sDialog.dismissWithAnimation();                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);                            }                        })                        .setCancelButton("Cancel", sDialog -> {                            sDialog.dismissWithAnimation();                            showWarning(REQUEST_READ_CLINIC_PIC_PERMISSION);                        })                        .show();            }        }        else if (requestCode == REQUEST_CLINIC_CAMERA_PERMISSION_CODE) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);                startActivityForResult(intent, SELECT_CLINIC_CAMERA);            } else {                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                        .setTitleText("Permisson Required")                        .setContentText("Plz Allow Camera for taking picture")                        .setConfirmText("Ok")                        .setConfirmClickListener(sDialog -> {                            sDialog.dismissWithAnimation();                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);                            }                        })                        .setCancelButton("Cancel", sDialog -> {                            sDialog.dismissWithAnimation();                            showWarning(REQUEST_CLINIC_CAMERA_PERMISSION_CODE);                        })                        .show();            }        }        else if (requestCode == REQUEST_READ_CLINIC_PDF_PERMISSION) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                Intent intent = new Intent();                intent.setType("application/pdf");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select PDF"), SELECT_CERT_PDF);            } else {                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                        .setTitleText("Permisson Required")                        .setContentText("Plz Allow Permissions for choosing Pdf files ")                        .setConfirmText("Ok")                        .setConfirmClickListener(sDialog -> {                            sDialog.dismissWithAnimation();                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PDF_PERMISSION);                            }                        })                        .setCancelButton("Cancel", sDialog -> {                            sDialog.dismissWithAnimation();                            showWarning(REQUEST_READ_CLINIC_PDF_PERMISSION);                        })                        .show();            }        }        else if (requestCode == REQUEST_READ_GOVT_ID_PDF_PERMISSION) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                Intent intent = new Intent();                intent.setType("application/pdf");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select PDF"), SELECT_GOVTID_PDF);            } else {                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                        .setTitleText("Permisson Required")                        .setContentText("Plz Allow Permissions for choosing Pdf Files ")                        .setConfirmText("Ok")                        .setConfirmClickListener(sDialog -> {                            sDialog.dismissWithAnimation();                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVT_ID_PDF_PERMISSION);                            }                        })                        .setCancelButton("Cancel", sDialog -> {                            sDialog.dismissWithAnimation();                            showWarning(REQUEST_READ_GOVT_ID_PDF_PERMISSION);                        })                        .show();            }        }        else if (requestCode == REQUEST_READ_PHOTO_ID_PDF_PERMISSION) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                Intent intent = new Intent();                intent.setType("application/pdf");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select PDF"), SELECT_PHOTOID_PDF);            } else {                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                        .setTitleText("Permisson Required")                        .setContentText("Plz Allow Permissions for choosing Pdf files ")                        .setConfirmText("Ok")                        .setConfirmClickListener(sDialog -> {                            sDialog.dismissWithAnimation();                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTO_ID_PDF_PERMISSION);                            }                        })                        .setCancelButton("Cancel", sDialog -> {                            sDialog.dismissWithAnimation();                            showWarning(REQUEST_READ_PHOTO_ID_PDF_PERMISSION);                        })                        .show();            }        }    }    private void showWarning(int REQUEST_PERMISSION_CODE) {        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                .setTitleText("Sorry!!")                .setContentText("You Can't proceed further unless you allow permission")                .setConfirmText("Ok")                .setConfirmClickListener(sDialog -> {                    sDialog.dismissWithAnimation();                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)                    {                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_PERMISSION_CODE);                    }                })                .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)                .show();    }    private void showWarningAddMoreService() {        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                .setTitleText("Add More Service!!")                .setContentText("Please enter the service name")                .setConfirmText("Ok")                .setConfirmClickListener(SweetAlertDialog::dismissWithAnimation)                .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)                .show();    }    private void showWarningAddMoreSpecialzation() {        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                .setTitleText("Add More Specialzation!!")                .setContentText("Please enter the specialzation name")                .setConfirmText("Ok")                .setConfirmClickListener(SweetAlertDialog::dismissWithAnimation)                .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)                .show();    }    public String getFileName(Uri uri) {        String result = null;        if (Objects.requireNonNull(uri.getScheme()).equals("content")) {            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {                if (cursor != null && cursor.moveToFirst()) {                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));                }            }        }        if (result == null) {            result = uri.getPath();            int cut = 0;            if (result != null) {                cut = result.lastIndexOf('/');            }            if (cut != -1) {                if (result != null) {                    result = result.substring(cut + 1);                }            }        }        return result;    }    @SuppressLint("LongLogTag")    private void serviceProviderRegisterFormCreateResponseCall() {        avi_indicator.setVisibility(View.VISIBLE);        avi_indicator.smoothToShow();        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);        Call<ServiceProviderRegisterFormCreateResponse> call = apiInterface.serviceProviderRegisterFormCreateResponseCall(RestUtils.getContentType(), serviceProviderRegisterFormCreateRequest());        Log.w(TAG,"ServiceProviderRegisterFormCreateResponse url  :%s"+" "+ call.request().url().toString());        call.enqueue(new Callback<ServiceProviderRegisterFormCreateResponse>() {            @SuppressLint("LongLogTag")            @Override            public void onResponse(@NonNull Call<ServiceProviderRegisterFormCreateResponse> call, @NonNull Response<ServiceProviderRegisterFormCreateResponse> response) {                Log.w(TAG,"ServiceProviderRegisterFormCreateResponse"+ "--->" + new Gson().toJson(response.body()));                avi_indicator.smoothToHide();                if (response.body() != null) {                    if(response.body().getCode() == 200){                        startActivity(new Intent(ServiceProviderEditFormActivity.this,ServiceProviderDashboardActivity.class));                        finish();                    }                    else{                        showErrorLoading(response.body().getMessage());                    }                }            }            @SuppressLint("LongLogTag")            @Override            public void onFailure(@NonNull Call<ServiceProviderRegisterFormCreateResponse> call, @NonNull Throwable t) {                avi_indicator.smoothToHide();                Log.w(TAG,"ServiceProviderRegisterFormCreateResponse flr"+"--->" + t.getMessage());            }        });    }    @SuppressLint("LongLogTag")    private ServiceProviderRegisterFormCreateRequest serviceProviderRegisterFormCreateRequest() {        /*         * user_id : 5fc61b82b750da703e48da78         * bus_user_name : mohammed Imthiyas         * bus_user_email : mohammed@gmail.com         * bussiness_name : Mohammed imthiyas         * bus_user_phone : 9876543210         * bus_service_list : [{"bus_service_list":"Service - 1"},{"bus_service_list":"Service - 2"},{"bus_service_list":"Service - 3"}]         * bus_spec_list : [{"bus_spec_list":"Spec -1"},{"bus_spec_list":"Spec -1"},{"bus_spec_list":"Spec -1"}]         * bus_service_gall : [{"bus_service_gall":"http://mysalveo.com/api/uploads/images.jpeg"},{"bus_service_gall":"http://mysalveo.com/api/uploads/images.jpeg"},{"bus_service_gall":"http://mysalveo.com/api/uploads/images.jpeg"}]         * bus_profile : http://mysalveo.com/api/uploads/images.jpeg         * bus_proof : http://mysalveo.com/api/uploads/images.jpeg         * bus_certif : [{"bus_certif":"http://mysalveo.com/api/uploads/images.jpeg"},{"bus_certif":"http://mysalveo.com/api/uploads/images.jpeg"},{"bus_certif":"http://mysalveo.com/api/uploads/images.jpeg"}]         * date_and_time : 23-10-2020 12:00 AM         * mobile_type : Admin         * profile_status : true         * profile_verification_status : Not verified         *"sp_loc" : "No, chennai tamil nadu",         *"sp_lat" : 12.00909,         *"sp_long" : 80.980098,         */        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy hh:mm aa", Locale.getDefault());        String currentDateandTime = sdf.format(new Date());        ServiceProviderRegisterFormCreateRequest serviceProviderRegisterFormCreateRequest = new ServiceProviderRegisterFormCreateRequest();        serviceProviderRegisterFormCreateRequest.setUser_id(user_id);        serviceProviderRegisterFormCreateRequest.setBus_user_name(username);        serviceProviderRegisterFormCreateRequest.setBus_user_email(useremail);        serviceProviderRegisterFormCreateRequest.setBussiness_name(edt_business_name.getText().toString());        serviceProviderRegisterFormCreateRequest.setBus_user_phone(userphone);        serviceProviderRegisterFormCreateRequest.setBus_service_list(bus_service_list);        serviceProviderRegisterFormCreateRequest.setBus_spec_list(bus_spec_list);        serviceProviderRegisterFormCreateRequest.setBus_service_gall(bus_service_gall_list);        serviceProviderRegisterFormCreateRequest.setBus_profile(photoIdPic);        serviceProviderRegisterFormCreateRequest.setBus_proof(govtIdPic);        serviceProviderRegisterFormCreateRequest.setBus_certif(bus_certif_list);        serviceProviderRegisterFormCreateRequest.setDate_and_time(currentDateandTime);        serviceProviderRegisterFormCreateRequest.setMobile_type("Android");        serviceProviderRegisterFormCreateRequest.setProfile_status(true);        serviceProviderRegisterFormCreateRequest.setProfile_verification_status("Not verified");        serviceProviderRegisterFormCreateRequest.setSp_loc(AddressLine);        serviceProviderRegisterFormCreateRequest.setSp_lat(latitude);        serviceProviderRegisterFormCreateRequest.setSp_long(longitude);        Log.w(TAG,"serviceProviderRegisterFormCreateRequest"+ "--->" + new Gson().toJson(serviceProviderRegisterFormCreateRequest));        return serviceProviderRegisterFormCreateRequest;    }    @SuppressLint("LongLogTag")    @Override    public void addMoreServiceRemoveListener(int position, String servicevalue) {        Log.w(TAG,"addMoreServiceRemoveListener : "+servicevalue);        if(servicevalue != null){            if(bus_service_list != null){                for (int i = 0; i < bus_service_list.size(); i++)                    if (bus_service_list.get(i).getBus_service_list().equalsIgnoreCase(servicevalue)) {                        bus_service_list.remove(i);                        Log.w(TAG, "after removing list if" + new Gson().toJson(bus_service_list));                    }            }        }    }    public void showErrorLoading(String errormesage){        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);        alertDialogBuilder.setMessage(errormesage);        alertDialogBuilder.setPositiveButton("ok",                (arg0, arg1) -> hideLoading());        AlertDialog alertDialog = alertDialogBuilder.create();        alertDialog.show();    }    public void hideLoading(){        try {            alertDialog.dismiss();        }catch (Exception ignored){        }    }    @Override    public void onItemSPSpecialzationCheck(int position, String specValue, List<SPServiceListResponse.DataBean.SpecializationBean> dataBeanList) {        ServiceProviderRegisterFormCreateRequest.BusSpecListBean busSpecListBean = new ServiceProviderRegisterFormCreateRequest.BusSpecListBean();        busSpecListBean.setBus_spec_list(specValue);        bus_spec_list.add(busSpecListBean);        dataBeanList.get(position).setSelected(true);        spSpecialzationListAdapter.notifyDataSetChanged();    }    @SuppressLint("LongLogTag")    @Override    public void onItemSPSpecialzationUnCheck(int position, String specValue) {        bus_spec_list.remove(position);        Log.w(TAG + "removed_specialzation_list",new Gson().toJson(bus_spec_list));    }    @SuppressLint("LongLogTag")    @Override    public void addMoreSpecialzationRemoveListener(int position, String specValue) {        Log.w(TAG,"addMoreSpecialzationRemoveListener : "+specValue);        if(specValue != null){            if(bus_spec_list != null){                for (int i = 0; i < bus_spec_list.size(); i++)                    if (bus_spec_list.get(i).getBus_spec_list().equalsIgnoreCase(specValue)) {                        bus_spec_list.remove(i);                        Log.w(TAG, "after removing list if" + new Gson().toJson(bus_spec_list));                    }            }        }    }    private void googleApiConnected() {        googleApiClient = new GoogleApiClient.Builder(Objects.requireNonNull(getApplicationContext())).                addConnectionCallbacks(this).                addOnConnectionFailedListener(this).                addApi(LocationServices.API).build();        googleApiClient.connect();    }    private void checkLocation() {        try {            LocationManager lm = (LocationManager) getApplicationContext().getSystemService(Context.LOCATION_SERVICE);            boolean gps_enabled = false;            boolean network_enabled = false;            try {                gps_enabled = lm.isProviderEnabled(LocationManager.GPS_PROVIDER);            } catch (Exception ignored) {            }            try {                network_enabled = lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER);            } catch (Exception ignored) {            }            if (!gps_enabled && !network_enabled) {                if (!lm.isProviderEnabled(LocationManager.GPS_PROVIDER)) {                    getMyLocation();                }            } else {                getLatandLong();            }        } catch (Exception e) {            e.printStackTrace();        }    }    @SuppressLint("LongLogTag")    @Override    public void onLocationChanged(Location location) {        mLastLocation = location;        latitude = mLastLocation.getLatitude();        longitude = mLastLocation.getLongitude();        if(latitude != 0 && longitude != 0){            getAddress(latitude,longitude);        }        Log.w(TAG,"onLocationChanged : "+" latitude : "+latitude+ " longitude : "+longitude);    }    @Override    public void onConnected(@Nullable Bundle bundle) {        permissionChecking();    }    @Override    public void onConnectionSuspended(int i) {    }    @Override    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {    }    @SuppressLint("LongLogTag")    @Override    public void onMapReady(GoogleMap googleMap) {    }    private void permissionChecking() {        if (getApplicationContext() != null) {            if (Build.VERSION.SDK_INT >= 23 && (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) &&                    (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED)) {                ActivityCompat.requestPermissions(Objects.requireNonNull(this), new String[]{Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION}, 5);            } else {                checkLocation();            }        }    }    public void getMyLocation() {        if (googleApiClient != null) {            if (googleApiClient.isConnected()) {                if(getApplicationContext() != null){                    if (ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {                        // TODO: Consider calling                        //    ActivityCompat#requestPermissions                        // here to request the missing permissions, and then overriding                        //   public void onRequestPermissionsResult(int requestCode, String[] permissions,                        //                                          int[] grantResults)                        // to handle the case where the user grants the permission. See the documentation                        // for ActivityCompat#requestPermissions for more details.                        return;                    }                }                mLastLocation = LocationServices.FusedLocationApi.getLastLocation(googleApiClient);                LocationRequest locationRequest = new LocationRequest();                locationRequest.setInterval(2000);                locationRequest.setFastestInterval(2000);                locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);                LocationSettingsRequest.Builder builder = new LocationSettingsRequest.Builder().addLocationRequest(locationRequest);                builder.setAlwaysShow(true);                LocationServices.FusedLocationApi.requestLocationUpdates(googleApiClient, locationRequest, this);                PendingResult<LocationSettingsResult> result = LocationServices.SettingsApi.checkLocationSettings(googleApiClient, builder.build());                result.setResultCallback(result1 -> {                    Status status = result1.getStatus();                    switch (status.getStatusCode()) {                        case LocationSettingsStatusCodes.SUCCESS:                            // All location settings are satisfied.                            // You can initialize location requests here.                            mLastLocation = LocationServices.FusedLocationApi.getLastLocation(googleApiClient);                            Handler handler = new Handler();                            int delay = 1000; //milliseconds                            handler.postDelayed(new Runnable() {                                @SuppressLint("LongLogTag")                                public void run() {                                    //do something                                    Log.w(TAG, "getMyLocation-->");                                    //parkingListResponseCall(checkinhours,checkouthours,requestCheckinDate,requestCheckoutDate, selectedVehicleTypeId);                                }                            }, delay);                            break;                        case LocationSettingsStatusCodes.RESOLUTION_REQUIRED:                            try {                                status.startResolutionForResult(this, REQUEST_CHECK_SETTINGS_GPS);                            } catch (IntentSender.SendIntentException e) {                                // Ignore the error.                            }                            break;                        case LocationSettingsStatusCodes.SETTINGS_CHANGE_UNAVAILABLE:                            break;                    }                });            }        }    }    @SuppressLint("LongLogTag")    private void getLatandLong() {        try {            if (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 1);            } else {                GPSTracker gps = new GPSTracker(getApplicationContext());                // Check if GPS enabled                if (gps.canGetLocation()) {                    latitude = gps.getLatitude();                    longitude = gps.getLongitude();                    Log.w(TAG, "getLatandLong--->" + "latitude" + " " + latitude + "longitude" + " " + longitude);                    if(latitude != 0 && longitude != 0){                        getAddress(latitude,longitude);                    }                }            }        } catch (Exception e) {            e.printStackTrace();        }    }    @SuppressLint("LongLogTag")    private void getAddress(double latitude, double longitude) {        StringBuilder result = new StringBuilder();        try {            Geocoder geocoder = new Geocoder(this, Locale.getDefault());            List<Address> listAddresses = geocoder.getFromLocation(latitude, longitude, 1);            if (null != listAddresses && listAddresses.size() > 0) {                Address address = listAddresses.get(0);                result.append(address.getLocality()).append("\n");                result.append(address.getCountryName());                String state = listAddresses.get(0).getAdminArea();                String country = listAddresses.get(0).getCountryName();                String subLocality = listAddresses.get(0).getSubLocality();                String postalcode = listAddresses.get(0).getPostalCode();                AddressLine = listAddresses.get(0).getAddressLine(0);                String CityName = listAddresses.get(0).getLocality();                if(CityName != null){                    AddressLine = CityName+" "+listAddresses.get(0).getAddressLine(0);                }                // Thoroughfare seems to be the street name without numbers               String street = address.getThoroughfare();                Log.w(TAG,"AddressLine :"+AddressLine+"  CityName :"+CityName+"  street :"+street);                Log.w(TAG,"state :"+state+" "+"country :"+country+"subLocality :"+subLocality+"  postalcode :"+postalcode);            }        } catch (IOException e) {            Log.e("tag", Objects.requireNonNull(e.getMessage()));        }        result.toString();    }    @SuppressLint("LongLogTag")    private void spDetailsReponseByUserIdCall() {        avi_indicator.setVisibility(View.VISIBLE);        avi_indicator.smoothToShow();        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);        Call<ServiceProviderRegisterFormCreateResponse> call = apiInterface.spDetailsReponseByUserIdCall(RestUtils.getContentType(), spDetailsByUserIdRequest());        Log.w(TAG,"spDetailsReponseByUserIdCall url  :%s"+" "+ call.request().url().toString());        call.enqueue(new Callback<ServiceProviderRegisterFormCreateResponse>() {            @SuppressLint("LongLogTag")            @Override            public void onResponse(@NonNull Call<ServiceProviderRegisterFormCreateResponse> call, @NonNull Response<ServiceProviderRegisterFormCreateResponse> response) {                Log.w(TAG,"spDetailsReponseByUserIdCall"+ "--->" + new Gson().toJson(response.body()));                avi_indicator.smoothToHide();                if (response.body() != null) {                    if(response.body().getCode() == 200){                    }                    else{                        showErrorLoading(response.body().getMessage());                    }                }            }            @SuppressLint("LongLogTag")            @Override            public void onFailure(@NonNull Call<ServiceProviderRegisterFormCreateResponse> call, @NonNull Throwable t) {                avi_indicator.smoothToHide();                Log.w(TAG,"spDetailsReponseByUserIdCall flr"+"--->" + t.getMessage());            }        });    }    @SuppressLint("LongLogTag")    private SPDetailsByUserIdRequest spDetailsByUserIdRequest() {        /*         * user_id : 5fc61b82b750da703e48da78         */        SPDetailsByUserIdRequest spDetailsByUserIdRequest = new SPDetailsByUserIdRequest();        spDetailsByUserIdRequest.setUser_id(user_id);        Log.w(TAG,"spDetailsByUserIdRequest"+ "--->" + new Gson().toJson(spDetailsByUserIdRequest));        return spDetailsByUserIdRequest;    }}