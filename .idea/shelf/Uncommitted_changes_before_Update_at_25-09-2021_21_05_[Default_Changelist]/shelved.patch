Index: app/src/main/java/com/petfolio/infinituss/adapter/AddGovtIdPdfAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.petfolio.infinituss.adapter;\r\n\r\n\r\nimport android.content.Context;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.petfolio.infinituss.R;\r\nimport com.petfolio.infinituss.requestpojo.DocBusInfoUploadRequest;\r\n\r\nimport java.util.List;\r\n\r\npublic class AddGovtIdPdfAdapter extends RecyclerView.Adapter<AddGovtIdPdfAdapter.AddImageListHolder> {\r\n    Context context;\r\n    List<  DocBusInfoUploadRequest.GovtIdPicBean> govtIdPicBeans;\r\n    View view;\r\n    String extension;\r\n\r\n    public AddGovtIdPdfAdapter(Context context, List<  DocBusInfoUploadRequest.GovtIdPicBean> govtIdPicBeans) {\r\n        this.context = context;\r\n        this.govtIdPicBeans = govtIdPicBeans;\r\n\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public AddImageListHolder onCreateViewHolder(ViewGroup parent, int viewType) {\r\n        view = LayoutInflater.from(parent.getContext()).inflate(R.layout.adapter_pdf_upload, parent, false);\r\n        return new AddImageListHolder(view);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull AddImageListHolder holder, final int position) {\r\n        final   DocBusInfoUploadRequest.GovtIdPicBean govtIdPicBeanse = govtIdPicBeans.get(position);\r\n        if (govtIdPicBeanse.getGovt_id_pic()!= null) {\r\n\r\n            String uri = govtIdPicBeanse.getGovt_id_pic();\r\n            if(uri.contains(\".\")) {\r\n                extension = uri.substring(uri.lastIndexOf(\".\"));\r\n\r\n                Log.w(\"extension\",extension);\r\n            }\r\n\r\n        }\r\n        if(extension != null && !extension.isEmpty()) {\r\n            if (extension.equals(\".png\") || extension.equals(\".jpg\") || (extension.equals(\".jpeg\"))) {\r\n                Glide.with(context)\r\n                        .load(govtIdPicBeanse.getGovt_id_pic())\r\n                        .into(holder.certificate_pics_1);\r\n\r\n            }\r\n        } else {\r\n\r\n            holder.certificate_pics_1.setImageResource(R.drawable.pdf_icon);\r\n        }\r\n\r\n        holder.removeImg.setOnClickListener(view -> {\r\n            govtIdPicBeans.remove(position);\r\n            notifyDataSetChanged();\r\n        });\r\n\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return govtIdPicBeans.size();\r\n    }\r\n\r\n    public static class AddImageListHolder extends RecyclerView.ViewHolder {\r\n        ImageView removeImg,certificate_pics_1;\r\n        public AddImageListHolder(View itemView) {\r\n            super(itemView);\r\n            certificate_pics_1 = itemView.findViewById(R.id.pdf_file);\r\n            removeImg = itemView.findViewById(R.id.close);\r\n        }\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/petfolio/infinituss/adapter/AddGovtIdPdfAdapter.java b/app/src/main/java/com/petfolio/infinituss/adapter/AddGovtIdPdfAdapter.java
--- a/app/src/main/java/com/petfolio/infinituss/adapter/AddGovtIdPdfAdapter.java	(revision f1734ca40ba206b2d8b7b0e5c5470841991c7822)
+++ b/app/src/main/java/com/petfolio/infinituss/adapter/AddGovtIdPdfAdapter.java	(date 1632582506018)
@@ -9,6 +9,7 @@
 import android.widget.ImageView;
 
 import androidx.annotation.NonNull;
+import androidx.cardview.widget.CardView;
 import androidx.recyclerview.widget.RecyclerView;
 
 import com.bumptech.glide.Glide;
@@ -39,28 +40,46 @@
     @Override
     public void onBindViewHolder(@NonNull AddImageListHolder holder, final int position) {
         final   DocBusInfoUploadRequest.GovtIdPicBean govtIdPicBeanse = govtIdPicBeans.get(position);
+
         if (govtIdPicBeanse.getGovt_id_pic()!= null) {
 
             String uri = govtIdPicBeanse.getGovt_id_pic();
+
             if(uri.contains(".")) {
+
                 extension = uri.substring(uri.lastIndexOf("."));
 
                 Log.w("extension",extension);
             }
-
-        }
-        if(extension != null && !extension.isEmpty()) {
-            if (extension.equals(".png") || extension.equals(".jpg") || (extension.equals(".jpeg"))) {
-                Glide.with(context)
-                        .load(govtIdPicBeanse.getGovt_id_pic())
-                        .into(holder.certificate_pics_1);
+            if(extension != null && !extension.isEmpty()) {
+
+                if (extension.equals(".png") || extension.equals(".jpg") || (extension.equals(".jpeg"))) {
+
+
+                    Glide.with(context)
+                            .load(govtIdPicBeanse.getGovt_id_pic())
+                            .into(holder.certificate_pics_1);
 
-            }
-        } else {
+                } else {
 
-            holder.certificate_pics_1.setImageResource(R.drawable.pdf_icon);
-        }
+                    holder.certificate_pics_1.setImageResource(R.drawable.pdf_icon);
+                }
 
+            }
+
+            else {
+
+                holder.material_cardview_education_details.setVisibility(View.VISIBLE);
+            }
+
+        }
+
+        else {
+
+            holder.material_cardview_education_details.setVisibility(View.VISIBLE);
+        }
+
+
         holder.removeImg.setOnClickListener(view -> {
             govtIdPicBeans.remove(position);
             notifyDataSetChanged();
@@ -75,10 +94,12 @@
 
     public static class AddImageListHolder extends RecyclerView.ViewHolder {
         ImageView removeImg,certificate_pics_1;
+        CardView material_cardview_education_details;
         public AddImageListHolder(View itemView) {
             super(itemView);
             certificate_pics_1 = itemView.findViewById(R.id.pdf_file);
             removeImg = itemView.findViewById(R.id.close);
+            material_cardview_education_details = itemView.findViewById(R.id.material_cardview_education_details);
         }
     }
 
Index: app/src/main/java/com/petfolio/infinituss/vendor/VendorRegisterFormActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.petfolio.infinituss.vendor;\r\rimport android.Manifest;\rimport android.annotation.SuppressLint;\rimport android.app.Activity;\rimport android.app.Dialog;\rimport android.content.Context;\rimport android.content.Intent;\rimport android.content.IntentSender;\rimport android.content.pm.PackageManager;\rimport android.database.Cursor;\rimport android.graphics.Bitmap;\rimport android.graphics.Color;\rimport android.graphics.drawable.ColorDrawable;\rimport android.location.Address;\rimport android.location.Geocoder;\rimport android.location.Location;\rimport android.location.LocationManager;\rimport android.net.Uri;\rimport android.os.Build;\rimport android.os.Bundle;\rimport android.os.Handler;\rimport android.provider.MediaStore;\rimport android.provider.OpenableColumns;\rimport android.util.Log;\rimport android.view.View;\rimport android.view.WindowManager;\rimport android.widget.Button;\rimport android.widget.EditText;\rimport android.widget.ImageView;\rimport android.widget.RelativeLayout;\rimport android.widget.TextView;\rimport android.widget.Toast;\r\rimport androidx.annotation.NonNull;\rimport androidx.annotation.Nullable;\rimport androidx.appcompat.app.AlertDialog;\rimport androidx.appcompat.app.AppCompatActivity;\rimport androidx.cardview.widget.CardView;\rimport androidx.core.app.ActivityCompat;\rimport androidx.core.content.ContextCompat;\rimport androidx.recyclerview.widget.LinearLayoutManager;\rimport androidx.recyclerview.widget.RecyclerView;\r\rimport com.google.android.gms.common.ConnectionResult;\rimport com.google.android.gms.common.api.GoogleApiClient;\rimport com.google.android.gms.common.api.PendingResult;\rimport com.google.android.gms.common.api.Status;\rimport com.google.android.gms.location.LocationListener;\rimport com.google.android.gms.location.LocationRequest;\rimport com.google.android.gms.location.LocationServices;\rimport com.google.android.gms.location.LocationSettingsRequest;\rimport com.google.android.gms.location.LocationSettingsResult;\rimport com.google.android.gms.location.LocationSettingsStatusCodes;\rimport com.google.android.gms.maps.GoogleMap;\rimport com.google.android.gms.maps.OnMapReadyCallback;\rimport com.google.android.gms.maps.SupportMapFragment;\rimport com.google.gson.Gson;\rimport com.petfolio.infinituss.R;\rimport com.petfolio.infinituss.activity.LoginActivity;\rimport com.petfolio.infinituss.adapter.AddGovtIdPdfAdapter;\rimport com.petfolio.infinituss.adapter.AddPhotoIDPdfAdapter;\rimport com.petfolio.infinituss.adapter.VendorAddCertPdfAdapter;\rimport com.petfolio.infinituss.adapter.VendorAddServiceImageListAdapter;\rimport com.petfolio.infinituss.api.APIClient;\rimport com.petfolio.infinituss.api.RestApiInterface;\rimport com.petfolio.infinituss.appUtils.FileUtil;\rimport com.petfolio.infinituss.doctor.DoctorBusinessInfoActivity;\rimport com.petfolio.infinituss.doctor.DoctorMyCalendarNewUserActivity;\rimport com.petfolio.infinituss.requestpojo.DocBusInfoUploadRequest;\rimport com.petfolio.infinituss.requestpojo.VendorRegisterFormCreateRequest;\rimport com.petfolio.infinituss.responsepojo.FileUploadResponse;\rimport com.petfolio.infinituss.responsepojo.VendorRegisterFormCreateResponse;\rimport com.petfolio.infinituss.service.GPSTracker;\rimport com.petfolio.infinituss.serviceprovider.ServiceProviderRegisterFormActivity;\rimport com.petfolio.infinituss.vendor.VendorRegisterFormActivity;\rimport com.petfolio.infinituss.vendor.VendorRegisterFormActivity;\rimport com.petfolio.infinituss.sessionmanager.SessionManager;\rimport com.petfolio.infinituss.utils.ConnectionDetector;\rimport com.petfolio.infinituss.utils.RestUtils;\rimport com.theartofdev.edmodo.cropper.CropImage;\rimport com.wang.avi.AVLoadingIndicatorView;\r\rimport java.io.File;\rimport java.io.FileOutputStream;\rimport java.io.IOException;\rimport java.io.OutputStream;\rimport java.text.SimpleDateFormat;\rimport java.util.ArrayList;\rimport java.util.Date;\rimport java.util.HashMap;\rimport java.util.List;\rimport java.util.Locale;\rimport java.util.Objects;\r\rimport butterknife.BindView;\rimport butterknife.ButterKnife;\rimport cn.pedant.SweetAlert.SweetAlertDialog;\rimport es.dmoral.toasty.Toasty;\rimport okhttp3.MediaType;\rimport okhttp3.MultipartBody;\rimport okhttp3.RequestBody;\rimport retrofit2.Call;\rimport retrofit2.Callback;\rimport retrofit2.Response;\r\rpublic class VendorRegisterFormActivity extends AppCompatActivity implements View.OnClickListener,\r        OnMapReadyCallback, GoogleApiClient.ConnectionCallbacks,\r        GoogleApiClient.OnConnectionFailedListener, LocationListener {\r\r    private final String TAG = \"VenderRegisterFormActivity\";\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edt_business_name)\r    EditText edt_business_name;\r\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edt_business_email)\r    EditText edt_business_email;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edt_business)\r    EditText edt_business;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edt_phone)\r    EditText edt_phone;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edt_business_registration)\r    EditText edt_business_registration;\r\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rl_upload_gallery_image)\r    RelativeLayout rl_upload_gallery_image;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rl_certificates)\r    RelativeLayout rl_certificates;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rl_govtid)\r    RelativeLayout rl_govtid;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rl_photoid)\r    RelativeLayout rl_photoid;\r\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.btn_submit)\r    Button btn_submit;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_choosen_gallery_img)\r    RecyclerView rcylr_choosen_gallery_img;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_choosen_certificate_img)\r    RecyclerView recylerView_choosen_certificate_images;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_choosen_govtid_images)\r    RecyclerView recylerView_choosen_govtid_images;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_choosen_photoid_img)\r    RecyclerView recylerView_choosen_photo_id_images;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.cdvw_certificate)\r    CardView material_cardview_certificate;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.img_back)\r    ImageView img_back;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.avi_indicator)\r    AVLoadingIndicatorView avi_indicator;\r\r    String business_name;\r\r    ArrayList<FileUploadResponse> certificatePicResponse = new ArrayList<>();\r\r    private final List<DocBusInfoUploadRequest.GovtIdPicBean> govtIdPicBeans = new ArrayList<>();\r\r    private final List<DocBusInfoUploadRequest.PhotoIdPicBean> photoIdPicBeans = new ArrayList<>();\r\r\r\r    VendorAddServiceImageListAdapter vendorAddServiceImageListAdapter;\r\r    VendorAddCertPdfAdapter vendorAddCertPdfAdapter;\r\r\r    AddGovtIdPdfAdapter addGovtIdPdfAdapter;\r    AddPhotoIDPdfAdapter addPhotoIDPdfAdapter;\r\r    MultipartBody.Part filePart,certPart,govIdPart,photIDPart;\r\r\r    private static final int REQUEST_CLINIC_CAMERA_PERMISSION_CODE = 785 ;\r\r    private static final int REQUEST_READ_CLINIC_PDF_PERMISSION = 787 ;\r\r    private static final int REQUEST_READ_GOVT_ID_PDF_PERMISSION = 788;\r\r    private static final int REQUEST_READ_PHOTO_ID_PDF_PERMISSION = 789;\r\r    private static final int REQUEST_READ_CLINIC_PIC_PERMISSION = 786;\r\r    private static final int REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE = 790;\r\r    private static final int REQUEST_READ_CERTIFICATE_PIC_PERMISSION = 791;\r\r    private static final int REQUEST_GOVTID_CAMERA_PERMISSION_CODE = 792;\r\r    private static final int REQUEST_READ_GOVTID_PIC_PERMISSION = 793;\r\r    private static final int REQUEST_PHOTOID_CAMERA_PERMISSION_CODE = 794;\r\r    private static final int REQUEST_READ_PHOTOID_PIC_PERMISSION = 795;\r\r\r\r\r    private static final int SELECT_CLINIC_CAMERA = 1000 ;\r\r    private static final int SELECT_CLINIC_PICTURE = 1001 ;\r\r    private static final int SELECT_CERT_PDF = 1002;\r\r    private static final int SELECT_GOVTID_PDF = 1003;\r\r    private static final int SELECT_PHOTOID_PDF = 1004;\r\r    private static final int SELECT_CERTIFICATE_CAMERA = 1005;\r\r    private static final int SELECT_CERTIFICATE_PICTURE = 1006;\r\r    private static final int SELECT_GOVTID_CAMERA = 1007;\r\r    private static final int SELECT_GOVTID_PICTURE = 1008;\r\r    private static final int SELECT_PHOTOID_CAMERA = 1009;\r\r    private static final int SELECT_PHOTOID_PICTURE = 1010;\r\r\r    String user_id,currentDateandTime;\r\r\r    List<VendorRegisterFormCreateRequest.CertifiBean> bus_certif_list = new ArrayList<>();\r    List<VendorRegisterFormCreateRequest.BussinessGalleryBean> bus_service_gall_list = new ArrayList<>();\r    private String username;\r    private String useremail;\r    private String userphone;\r    private String govtIdPic;\r    private String photoIdPic;\r    Dialog alertDialog;\r\r    private GoogleApiClient googleApiClient;\r    Location mLastLocation;\r    public static final int MY_PERMISSIONS_REQUEST_LOCATION = 99;\r    private SupportMapFragment mapFragment;\r    private double latitude;\r    private double longitude;\r    private static final int REQUEST_CHECK_SETTINGS_GPS = 0x1;\r    private String AddressLine;\r    private Dialog dialog;\r\r    /*Crop Functonality */\r\r    private boolean isAddClinicPic = false;\r    private boolean isAddCertfProof = false;\r    private boolean isAddGovtIdproof = false;\r    private boolean isAddPhotoIDproof = false;\r\r\r    @SuppressLint({\"LongLogTag\", \"LogNotTimber\"})\r    @Override\r    protected void onCreate(Bundle savedInstanceState) {\r        super.onCreate(savedInstanceState);\r        setContentView(R.layout.activity_vendor_register_form);\r        ButterKnife.bind(this);\r        SessionManager session = new SessionManager(getApplicationContext());\r        HashMap<String, String> user = session.getProfileDetails();\r        username = user.get(SessionManager.KEY_FIRST_NAME);\r        user_id = user.get(SessionManager.KEY_ID);\r        useremail = user.get(SessionManager.KEY_EMAIL_ID);\r        userphone = user.get(SessionManager.KEY_MOBILE);\r\r        Log.w(TAG,\"username : \"+username+\" user_id : \"+user_id);\r\r        if(useremail != null){\r            edt_business_email.setText(useremail);\r        }\r        if(username != null){\r            edt_business.setText(username);\r        }\r        if(userphone != null){\r            edt_phone.setText(userphone);\r        }\r\r        avi_indicator.setVisibility(View.GONE);\r\r        if (mapFragment == null) {\r            mapFragment = SupportMapFragment.newInstance();\r            mapFragment.getMapAsync(this);\r        }\r        googleApiConnected();\r        LocationRequest locationRequest = LocationRequest.create();\r        locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);\r        locationRequest.setInterval(1000); // 10 seconds\r        locationRequest.setFastestInterval(1000); // 5 seconds\r\r\r\r        btn_submit.setOnClickListener(this);\r        rl_upload_gallery_image.setOnClickListener(this);\r        rl_certificates.setOnClickListener(this);\r        rl_govtid.setOnClickListener(this);\r        rl_photoid.setOnClickListener(this);\r        img_back.setOnClickListener(this);\r\r\r\r\r\r\r\r        /* ************ Adding service gallery Images ************** */\r\r        rcylr_choosen_gallery_img.setHasFixedSize(true);\r\r        rcylr_choosen_gallery_img.setNestedScrollingEnabled(false);\r\r        LinearLayoutManager layoutManager2 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);\r\r        rcylr_choosen_gallery_img.setLayoutManager(layoutManager2);\r\r\r        /* ************ Adding Certificate ************** */\r\r        recylerView_choosen_certificate_images.setHasFixedSize(true);\r\r        recylerView_choosen_certificate_images.setNestedScrollingEnabled(false);\r\r        LinearLayoutManager layoutManager3 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);\r\r        recylerView_choosen_certificate_images.setLayoutManager(layoutManager3);\r\r\r        /* ************ Adding GovtID ************** */\r\r        recylerView_choosen_govtid_images.setHasFixedSize(true);\r\r        recylerView_choosen_govtid_images.setNestedScrollingEnabled(false);\r\r        LinearLayoutManager layoutManager4 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);\r\r        recylerView_choosen_govtid_images.setLayoutManager(layoutManager4);\r\r\r\r        /* ************ Adding PhotoID ************** */\r\r        recylerView_choosen_photo_id_images.setHasFixedSize(true);\r\r        recylerView_choosen_photo_id_images.setNestedScrollingEnabled(false);\r\r        LinearLayoutManager layoutManager5 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);\r\r        recylerView_choosen_photo_id_images.setLayoutManager(layoutManager5);\r\r\r        /* *************** Get Current Date and Time ************************ */\r\r        SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r        currentDateandTime = sdf.format(new Date());\r\r\r\r\r    }\r\r\r\r\r    @SuppressLint(\"LongLogTag\")\r    private void chooseServiceGalleryImage() {\r        Log.w(TAG,\"bus_service_gall_list.size() : \"+bus_service_gall_list.size()+\" conditions : \"+(bus_service_gall_list.size()>=3));\r\r\r        if(bus_service_gall_list!=null&&bus_service_gall_list.size()>=3){\r\r            Toasty.warning(getApplicationContext(), \"Sorry you can't Add more than 3\", Toast.LENGTH_SHORT).show();\r\r        }\r\r        else\r        {\r         /*   final CharSequence[] items = {\"Take Photo\", \"Choose from Library\", \"Cancel\"};\r            //AlertDialog.Builder alert=new AlertDialog.Builder(this);\r            AlertDialog.Builder builder = new AlertDialog.Builder(VendorRegisterFormActivity.this);\r            builder.setTitle(\"Choose option\");\r            builder.setItems(items, (dialog, item) -> {\r                if (items[item].equals(\"Take Photo\"))\r                {\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(VendorRegisterFormActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r                    }\r                    else\r                    {\r\r\r                        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\r                        startActivityForResult(intent, SELECT_CLINIC_CAMERA);\r                    }\r\r                }\r\r                else if (items[item].equals(\"Choose from Library\"))\r                {\r\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(VendorRegisterFormActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r                    }\r\r                    else{\r\r                        Intent intent = new Intent();\r                        intent.setType(\"image/*\");\r                        intent.setAction(Intent.ACTION_GET_CONTENT);\r                        startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_CLINIC_PICTURE);\r\r\r                    }\r                }\r\r                else if (items[item].equals(\"Cancel\")) {\r                    dialog.dismiss();\r                }\r            });\r            builder.show();\r*/\r\r            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(VendorRegisterFormActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r            {\r                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r            }\r\r            else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(VendorRegisterFormActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r            {\r                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r            }\r\r            else\r            {\r\r                isAddClinicPic = true;\r\r                isAddCertfProof = false;\r\r                isAddGovtIdproof = false;\r\r                isAddPhotoIDproof = false;\r\r                CropImage.activity().start(VendorRegisterFormActivity.this);\r\r                /*CropImage.activity().start(AddYourPetImageOlduserActivity.this);*/\r            }\r         }\r\r    }\r\r    @SuppressLint(\"LongLogTag\")\r    private void uploadClinicImage() {\r\r        avi_indicator.show();\r\r        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\r        //RestApiInterface ApiService = RetrofitClient.getApiService();\r\r        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(filePart);\r\r//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());\r\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\r        call.enqueue(new Callback<FileUploadResponse>() {\r            @SuppressLint(\"LongLogTag\")\r            @Override\r            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"Profpic\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                if (response.body() != null) {\r                    if (200 == response.body().getCode()) {\r\r                        isAddClinicPic = false;\r\r                        VendorRegisterFormCreateRequest.BussinessGalleryBean busServiceGallBean = new VendorRegisterFormCreateRequest.BussinessGalleryBean();\r                        busServiceGallBean.setBussiness_gallery(response.body().getData());\r                        bus_service_gall_list.add(busServiceGallBean);\r\r\r\r                        vendorAddServiceImageListAdapter = new VendorAddServiceImageListAdapter(getApplicationContext(), bus_service_gall_list);\r\r                        rcylr_choosen_gallery_img.setAdapter(vendorAddServiceImageListAdapter);\r\r                    }\r\r                }\r\r\r            }\r\r            @SuppressLint(\"LongLogTag\")\r            @Override\r            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r                // avi_indicator.smoothToHide();\r                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r            }\r        });\r\r\r    }\r\r    private void chooseCertPdf() {\r\r        if(certificatePicResponse!=null&&certificatePicResponse.size()>=1){\r\r            Toasty.warning(getApplicationContext(), \"Sorry you can't Add more than 1\", Toast.LENGTH_SHORT).show();\r\r        }\r\r        else {\r\r            final CharSequence[] items = {\"Select Image\", \"Select File\",\"Cancel\"};\r            //AlertDialog.Builder alert=new AlertDialog.Builder(this);\r            AlertDialog.Builder builder = new AlertDialog.Builder(VendorRegisterFormActivity.this);\r            builder.setTitle(\"Choose option\");\r            builder.setItems(items, (dialog, item) -> {\r                if (items[item].equals(\"Select Image\"))\r                {\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(VendorRegisterFormActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE);\r                    }\r                    else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CERTIFICATE_PIC_PERMISSION);\r                    }\r                    else {\r\r                        isAddCertfProof = true;\r\r                        isAddClinicPic = false;\r\r                        isAddGovtIdproof = false;\r\r                        isAddPhotoIDproof = false;\r\r                        CropImage.activity().start(VendorRegisterFormActivity.this);\r\r                    }\r\r                }\r\r                else if (items[item].equals(\"Select File\")){\r\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M   && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PDF_PERMISSION);\r                    }\r\r                    else{\r\r                        Intent intent = new Intent();\r                        intent.setType(\"application/pdf\");\r                        intent.setAction(Intent.ACTION_GET_CONTENT);\r                        startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_CERT_PDF);\r\r\r                    }\r\r\r                }\r\r                else if (items[item].equals(\"Cancel\")) {\r                    dialog.dismiss();\r                }\r            });\r            builder.show();\r\r        }\r\r    }\r\r\r    @SuppressLint(\"LongLogTag\")\r    private void uploadCertPdf() {\r\r        avi_indicator.show();\r\r        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\r        //RestApiInterface ApiService = RetrofitClient.getApiService();\r\r        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(certPart);\r\r//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());\r\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\r        call.enqueue(new Callback<FileUploadResponse>() {\r            @SuppressLint(\"LongLogTag\")\r            @Override\r            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"PdfFileLink\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                if (response.body() != null) {\r\r                    if (200 == response.body().getCode()) {\r\r\r                        isAddCertfProof = false;\r\r                        VendorRegisterFormCreateRequest.CertifiBean busCertifBean = new VendorRegisterFormCreateRequest.CertifiBean();\r                        busCertifBean.setCertifi(response.body().getData());\r                        bus_certif_list.add(busCertifBean);\r                        vendorAddCertPdfAdapter = new VendorAddCertPdfAdapter(getApplicationContext(), bus_certif_list);\r                        recylerView_choosen_certificate_images.setAdapter(vendorAddCertPdfAdapter);\r\r\r                    }\r\r                }\r\r\r            }\r\r            @SuppressLint(\"LongLogTag\")\r            @Override\r            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r                // avi_indicator.smoothToHide();\r                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r            }\r        });\r\r\r    }\r\r    private void chooseGovIDPdf() {\r\r        if(govtIdPicBeans!=null&&govtIdPicBeans.size()>=1){\r\r            Toasty.warning(getApplicationContext(), \"Sorry you can't Add more than 1\", Toast.LENGTH_SHORT).show();\r\r        }\r\r        else {\r\r            final CharSequence[] items = {\"Select Image\", \"Select File\",\"Cancel\"};\r            //AlertDialog.Builder alert=new AlertDialog.Builder(this);\r            AlertDialog.Builder builder = new AlertDialog.Builder(VendorRegisterFormActivity.this);\r            builder.setTitle(\"Choose option\");\r            builder.setItems(items, (dialog, item) -> {\r                if (items[item].equals(\"Select Image\"))\r                {\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(VendorRegisterFormActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_GOVTID_CAMERA_PERMISSION_CODE);\r                    }\r                    else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVTID_PIC_PERMISSION);\r                    }\r\r                    else {\r\r                        isAddGovtIdproof = true;\r\r                        isAddClinicPic = false;\r\r                        isAddCertfProof = false;\r\r                        isAddPhotoIDproof = false;\r\r\r                        CropImage.activity().start(VendorRegisterFormActivity.this);\r\r                    }\r\r\r                }\r\r                else if (items[item].equals(\"Select File\")){\r\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M   && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVT_ID_PDF_PERMISSION);\r                    }\r\r                    else{\r\r                        Intent intent = new Intent();\r                        intent.setType(\"application/pdf\");\r                        intent.setAction(Intent.ACTION_GET_CONTENT);\r                        startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_GOVTID_PDF);\r\r\r                    }\r\r\r                }\r\r                else if (items[item].equals(\"Cancel\")) {\r                    dialog.dismiss();\r                }\r            });\r            builder.show();\r\r        }\r\r\r    }\r\r\r    @SuppressLint(\"LongLogTag\")\r    private void uploadGovtIDPdf() {\r\r        avi_indicator.show();\r\r        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\r        //RestApiInterface ApiService = RetrofitClient.getApiService();\r\r        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(govIdPart);\r\r//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());\r\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\r        call.enqueue(new Callback<FileUploadResponse>() {\r            @SuppressLint(\"LogNotTimber\")\r            @Override\r            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"PdfFileLink\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                if (response.body() != null) {\r\r                    if (200 == response.body().getCode()) {\r\r                        isAddGovtIdproof = false;\r\r                        DocBusInfoUploadRequest.GovtIdPicBean govtIdPicBean = new DocBusInfoUploadRequest.GovtIdPicBean (response.body().getData());\r\r                        govtIdPicBeans.add(govtIdPicBean);\r\r                        addGovtIdPdfAdapter = new AddGovtIdPdfAdapter(getApplicationContext(), govtIdPicBeans);\r\r                        recylerView_choosen_govtid_images.setAdapter(addGovtIdPdfAdapter);\r\r                    }\r\r                }\r\r\r            }\r\r            @Override\r            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r                // avi_indicator.smoothToHide();\r                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r            }\r        });\r\r\r    }\r\r    private void choosePhotoIDPdf() {\r\r        if(photoIdPicBeans!=null&&photoIdPicBeans.size()>=1){\r\r            Toasty.warning(getApplicationContext(), \"Sorry you can't Add more than 1\", Toast.LENGTH_SHORT).show();\r\r        }\r\r        else {\r\r            final CharSequence[] items = {\"Select Image\", \"Select File\",\"Cancel\"};\r            //AlertDialog.Builder alert=new AlertDialog.Builder(this);\r            AlertDialog.Builder builder = new AlertDialog.Builder(VendorRegisterFormActivity.this);\r            builder.setTitle(\"Choose option\");\r            builder.setItems(items, (dialog, item) -> {\r                if (items[item].equals(\"Select Image\"))\r                {\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(VendorRegisterFormActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_PHOTOID_CAMERA_PERMISSION_CODE);\r                    }\r                    else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTOID_PIC_PERMISSION);\r                    }\r                    {\r                        isAddPhotoIDproof=true;\r\r                        isAddClinicPic = false;\r\r                        isAddCertfProof = false;\r\r                        isAddGovtIdproof = false;\r\r                        CropImage.activity().start(VendorRegisterFormActivity.this);\r\r                    }\r\r                }\r\r                else if (items[item].equals(\"Select File\")){\r\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M   && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTO_ID_PDF_PERMISSION);\r                    }\r\r                    else{\r\r                        Intent intent = new Intent();\r                        intent.setType(\"application/pdf\");\r                        intent.setAction(Intent.ACTION_GET_CONTENT);\r                        startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_PHOTOID_PDF);\r\r\r                    }\r\r\r                }\r\r                else if (items[item].equals(\"Cancel\")) {\r                    dialog.dismiss();\r                }\r            });\r            builder.show();\r\r        }\r\r    }\r\r    @SuppressLint(\"LongLogTag\")\r    private void uploadPhotoIDPdf() {\r\r        avi_indicator.show();\r\r        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\r        //RestApiInterface ApiService = RetrofitClient.getApiService();\r\r        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(photIDPart);\r\r//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());\r\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\r        call.enqueue(new Callback<FileUploadResponse>() {\r            @Override\r            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"PdfFileLink\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                if (response.body() != null) {\r\r                    if (200 == response.body().getCode()) {\r\r                        isAddPhotoIDproof = false;\r\r                        DocBusInfoUploadRequest.PhotoIdPicBean photoIdPicBean = new DocBusInfoUploadRequest.PhotoIdPicBean(response.body().getData());\r\r                        photoIdPicBeans.add(photoIdPicBean);\r\r                        addPhotoIDPdfAdapter = new AddPhotoIDPdfAdapter(getApplicationContext(), photoIdPicBeans);\r\r                        recylerView_choosen_photo_id_images.setAdapter(addPhotoIDPdfAdapter);\r\r                    }\r\r                }\r\r\r\r\r            }\r\r            @Override\r            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r                // avi_indicator.smoothToHide();\r                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r            }\r        });\r\r\r    }\r\r    private void checkValidation() {\r            business_name = edt_business_name.getText().toString().trim();\r            boolean can_proceed = true;\r\r                if(business_name.isEmpty()){\r                    edt_business_name.setError(\"Please fill the business name\");\r                    edt_business_name.requestFocus();\r                    can_proceed = false;\r\r                }else if(edt_business_email.getText().toString().isEmpty()){\r                    edt_business_email.setError(\"Please fill the business email\");\r                    edt_business_email.requestFocus();\r                    can_proceed = false;\r\r                }else if(edt_business.getText().toString().isEmpty()){\r                    edt_business.setError(\"Please fill the business\");\r                    edt_business.requestFocus();\r                    can_proceed = false;\r\r                }else if(edt_phone.getText().toString().isEmpty()){\r                    edt_phone.setError(\"Please fill the phone number\");\r                    edt_phone.requestFocus();\r                    can_proceed = false;\r\r                }else if(edt_business_registration.getText().toString().isEmpty()){\r                    edt_business_registration.setError(\"Please fill the business registration details\");\r                    edt_business_registration.requestFocus();\r                    can_proceed = false;\r\r                }\r\r\r                else if(bus_service_gall_list!=null&&bus_service_gall_list.size()<1){\r\r                    Toasty.warning(getApplicationContext(), \"Please Choose minimum 1 Uplaod gallery image\", Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r                }\r                else if(photoIdPicBeans!=null&&photoIdPicBeans.size()<1){\r\r                    Toasty.warning(getApplicationContext(), \"Please Choose PhotoID File\", Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r                }\r                else if(govtIdPicBeans!=null&&govtIdPicBeans.size()<1){\r\r                    Toasty.warning(getApplicationContext(), \"Please Choose GovtID File\", Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r                }\r                else if(bus_certif_list!=null&&bus_certif_list.size()<1){\r\r                    Toasty.warning(getApplicationContext(), \"Please Choose Certificate File\", Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r                }\r\r\r\r\r                if(can_proceed){\r                    if (new ConnectionDetector(getApplicationContext()).isNetworkAvailable(getApplicationContext())) {\r                        vendorRegisterFormCreateResponseCall();\r                    }\r                }\r\r\r\r\r\r    }\r\r\r\r\r    @Override\r    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r        super.onActivityResult(requestCode, resultCode, data);\r\r        try{\r            switch (requestCode) {\r                case REQUEST_CHECK_SETTINGS_GPS:\r                    switch (resultCode) {\r                        case Activity.RESULT_OK:\r                            getMyLocation();\r                            break;\r                        case Activity.RESULT_CANCELED:\r                            getMyLocation();\r                            break;\r                    }\r                    break;\r            }\r            //\tToast.makeText(getActivity(),\"kk\",Toast.LENGTH_SHORT).show();\r\r            if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {\r                CropImage.ActivityResult result = CropImage.getActivityResult(data);\r                if (resultCode == RESULT_OK) {\r                    Uri resultUri = result.getUri();\r\r                    if (resultUri != null) {\r\r                        Log.w(\"selectedImageUri\", \" \" + resultUri);\r\r                        String filename = getFileName(resultUri);\r\r                        Log.w(\"filename\", \" \" + filename);\r\r                        String filePath = FileUtil.getPath(VendorRegisterFormActivity.this, resultUri);\r\r                        assert filePath != null;\r\r                        File file = new File(filePath); // initialize file here\r\r                        long length = file.length() / 1024; // Size in KB\r\r                        Log.w(\"filesize\", \" \" + length);\r\r                        if (length > 2000) {\r\r                            new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                                    .setTitleText(\"File Size\")\r                                    .setContentText(\"Please choose file size less than 2 MB \")\r                                    .setConfirmText(\"Ok\")\r                                    .show();\r                        } else {\r\r\r                            SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r                            String currentDateandTime = sdf.format(new Date());\r\r                            if(isAddClinicPic){\r\r                                filePart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                                uploadClinicImage();\r                            }\r\r                            else if(isAddCertfProof){\r\r                                certPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                                uploadCertPdf();\r                            }\r\r                            else if(isAddGovtIdproof){\r\r                                govIdPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                                uploadGovtIDPdf();\r                            }\r                            else if(isAddPhotoIDproof){\r\r                                photIDPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                                uploadPhotoIDPdf();\r                            }\r                        }\r\r\r                    } else {\r\r                        Toasty.warning(VendorRegisterFormActivity.this, \"Image Error!!Please upload Some other image\", Toasty.LENGTH_LONG).show();\r                    }\r\r\r                }\r            }\r\r            else if(requestCode== SELECT_CLINIC_PICTURE || requestCode == SELECT_CLINIC_CAMERA)\r            {\r\r                if(requestCode == SELECT_CLINIC_CAMERA)\r                {\r                    Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get(\"data\");\r\r                    File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\r                    OutputStream os;\r                    try {\r                        os = new FileOutputStream(file);\r                        if (photo != null) {\r                            photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r                        }\r                        os.flush();\r                        os.close();\r                    } catch (Exception e) {\r                        Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r                    }\r\r                    RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\r                    filePart = MultipartBody.Part.createFormData(\"sampleFile\",  user_id+currentDateandTime+file.getName(), requestFile);\r\r                    uploadClinicImage();\r\r                }\r\r                else{\r\r                    try {\r                        if (resultCode == Activity.RESULT_OK)\r                        {\r\r                            Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\r                            Uri selectedImageUri = data.getData();\r\r                            Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\r                            String filename = null;\r                            if (selectedImageUri != null) {\r                                filename = getFileName(selectedImageUri);\r                            }\r\r                            Log.w(\"filename\", \" \" + filename);\r\r                            String filePath = FileUtil.getPath(VendorRegisterFormActivity.this,selectedImageUri);\r\r                            assert filePath != null;\r\r                            File file = new File(filePath); // initialize file here\r\r                            long length = file.length() / 1024; // Size in KB\r\r                            Log.w(\"filesize\", \" \" + length);\r\r//                        if(length>200){\r//\r//                            new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r//                                    .setTitleText(\"File Size\")\r//                                    .setContentText(\"Please choose file size less than 200 kb \")\r//                                    .setConfirmText(\"Ok\")\r//                                    .show();\r//                        }\r//\r//                        else{\r\r                            filePart = MultipartBody.Part.createFormData(\"sampleFile\", user_id+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                            uploadClinicImage();\r                            //}\r\r                        }\r                    } catch (Exception e) {\r\r                        Log.w(\"Exception\", \" \" + e);\r                    }\r\r                }\r\r            }\r\r            else if(requestCode == SELECT_CERTIFICATE_CAMERA)\r            {\r                Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get(\"data\");\r\r                File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\r                OutputStream os;\r                try {\r                    os = new FileOutputStream(file);\r                    if (photo != null) {\r                        photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r                    }\r                    os.flush();\r                    os.close();\r                } catch (Exception e) {\r                    Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r                }\r\r                RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\r                certPart = MultipartBody.Part.createFormData(\"sampleFile\",  user_id+currentDateandTime+file.getName(), requestFile);\r\r                uploadCertPdf();\r\r            }\r\r            else if(requestCode == SELECT_CERTIFICATE_PICTURE){\r\r                try {\r                    if (resultCode == Activity.RESULT_OK) {\r\r                        Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\r                        Uri selectedImageUri = data.getData();\r\r                        Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\r                        String filename = null;\r                        if (selectedImageUri != null) {\r                            filename = getFileName(selectedImageUri);\r                        }\r\r                        Log.w(\"filename\", \" \" + filename);\r\r                        String filePath = FileUtil.getPath(VendorRegisterFormActivity.this,selectedImageUri);\r\r                        assert filePath != null;\r\r                        File file = new File(filePath); // initialize file here\r\r                        long length = file.length() / 1024; // Size in KB\r\r                        Log.w(\"filesize\", \" \" + length);\r\r                        certPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                        uploadCertPdf();\r\r\r                    }\r                } catch (Exception e) {\r\r                    Log.w(\"Exception\", \" \" + e);\r                }\r\r            }\r\r            else if(requestCode== SELECT_CERT_PDF){\r\r                try {\r                    if (resultCode == Activity.RESULT_OK)\r                    {\r\r                        if(data!=null){\r\r                            Log.w(\"URI\", \" \" + data);\r\r                            Uri selectedFileUri = data.getData();\r\r                            if(selectedFileUri!=null){\r\r                                Log.w(\"selectedFileUri\", \" \" + selectedFileUri);\r\r                                String filename = getFileName(selectedFileUri);\r\r                                Log.w(\"filename\", \" \" + filename);\r\r                                String filePath = FileUtil.getPath(VendorRegisterFormActivity.this,selectedFileUri);\r\r                                assert filePath != null;\r\r                                File file = new File(filePath); // initialize file here\r\r                                long length = file.length() / 1024; // Size in KB\r\r                                Log.w(\"filesize\", \" \" + length);\r\r                                if(length>2000){\r\r                                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                                            .setTitleText(\"File Size\")\r                                            .setContentText(\"Please choose file size less than 2MB \")\r                                            .setConfirmText(\"Ok\")\r                                            .show();\r                                }\r\r                                else{\r\r                                    certPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"pdf/*\"), file));\r\r                                    uploadCertPdf();\r                            }\r\r\r                  }\r\r                            else {\r\r                                Toasty.warning(getApplicationContext(),\"File Error!Please Choose some other file\",Toasty.LENGTH_LONG).show();\r\r                            }\r                        }\r                        else {\r\r                            Toasty.warning(getApplicationContext(),\"File Error!Please Choose some other file\",Toasty.LENGTH_LONG).show();\r\r                        }\r\r                    }\r                } catch (Exception e) {\r\r                    Log.w(\"Exception\", \" \" + e);\r                }\r            }\r\r            else if(requestCode == SELECT_GOVTID_CAMERA)\r            {\r                Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get(\"data\");\r\r                File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\r                OutputStream os;\r                try {\r                    os = new FileOutputStream(file);\r                    if (photo != null) {\r                        photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r                    }\r                    os.flush();\r                    os.close();\r                } catch (Exception e) {\r                    Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r                }\r\r                RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\r                govIdPart = MultipartBody.Part.createFormData(\"sampleFile\",  user_id+currentDateandTime+file.getName(), requestFile);\r\r                uploadGovtIDPdf();\r\r            }\r\r            else if(requestCode == SELECT_GOVTID_PICTURE){\r\r                try {\r                    if (resultCode == Activity.RESULT_OK) {\r\r                        Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\r                        Uri selectedImageUri = data.getData();\r\r                        Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\r                        String filename = null;\r                        if (selectedImageUri != null) {\r                            filename = getFileName(selectedImageUri);\r                        }\r\r                        Log.w(\"filename\", \" \" + filename);\r\r                        String filePath = FileUtil.getPath(VendorRegisterFormActivity.this,selectedImageUri);\r\r                        assert filePath != null;\r\r                        File file = new File(filePath); // initialize file here\r\r                        long length = file.length() / 1024; // Size in KB\r\r                        Log.w(\"filesize\", \" \" + length);\r\r                        govIdPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                        uploadGovtIDPdf();\r\r\r                    }\r                } catch (Exception e) {\r\r                    Log.w(\"Exception\", \" \" + e);\r                }\r\r            }\r\r            else if(requestCode== SELECT_GOVTID_PDF){\r\r                try {\r                    if (resultCode == Activity.RESULT_OK)\r                    {\r\r                        if(data!=null){\r\r                            Log.w(\"URI\", \" \" + data);\r\r                            Uri selectedFileUri = data.getData();\r\r                            if(selectedFileUri!=null){\r\r                                Log.w(\"selectedFileUri\", \" \" + selectedFileUri);\r\r                                String filename = getFileName(selectedFileUri);\r\r                                Log.w(\"filename\", \" \" + filename);\r\r                                String filePath = FileUtil.getPath(VendorRegisterFormActivity.this,selectedFileUri);\r\r                                assert filePath != null;\r\r                                File file = new File(filePath); // initialize file here\r\r                                long length = file.length() / 1024; // Size in KB\r\r                                Log.w(\"filesize\", \" \" + length);\r\r                                if(length>200){\r\r                                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                                            .setTitleText(\"File Size\")\r                                            .setContentText(\"Please choose file size less than 200 kb \")\r                                            .setConfirmText(\"Ok\")\r                                            .show();\r                                }\r\r                                else{\r\r                                    govIdPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"pdf/*\"), file));\r\r                                    uploadGovtIDPdf();\r                                }\r                            }\r\r                            else {\r\r\r                                Toasty.warning(VendorRegisterFormActivity.this, \"File Error!!Please upload Some other file\", Toasty.LENGTH_LONG).show();\r\r                            }\r\r                        }\r\r                        else {\r\r\r                            Toasty.warning(VendorRegisterFormActivity.this, \"File Error!!Please upload Some other file\", Toasty.LENGTH_LONG).show();\r\r                        }\r\r\r                    }\r                } catch (Exception e) {\r\r                    Log.w(\"Exception\", \" \" + e);\r                }\r            }\r\r            else if(requestCode == SELECT_PHOTOID_CAMERA)\r            {\r                Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get(\"data\");\r\r                File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\r                OutputStream os;\r                try {\r                    os = new FileOutputStream(file);\r                    if (photo != null) {\r                        photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r                    }\r                    os.flush();\r                    os.close();\r                } catch (Exception e) {\r                    Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r                }\r\r                RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\r                photIDPart = MultipartBody.Part.createFormData(\"sampleFile\",  user_id+currentDateandTime+file.getName(), requestFile);\r\r                uploadPhotoIDPdf();\r\r            }\r\r            else if(requestCode == SELECT_PHOTOID_PICTURE){\r\r                try {\r                    if (resultCode == Activity.RESULT_OK) {\r\r                        Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\r                        Uri selectedImageUri = data.getData();\r\r                        Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\r                        String filename = null;\r                        if (selectedImageUri != null) {\r                            filename = getFileName(selectedImageUri);\r                        }\r\r                        Log.w(\"filename\", \" \" + filename);\r\r                        String filePath = FileUtil.getPath(VendorRegisterFormActivity.this,selectedImageUri);\r\r                        assert filePath != null;\r\r                        File file = new File(filePath); // initialize file here\r\r                        long length = file.length() / 1024; // Size in KB\r\r                        Log.w(\"filesize\", \" \" + length);\r\r                        photIDPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                        uploadPhotoIDPdf();\r\r\r                    }\r                } catch (Exception e) {\r\r                    Log.w(\"Exception\", \" \" + e);\r                }\r\r            }\r\r            else if(requestCode== SELECT_PHOTOID_PDF){\r\r                try {\r                    if (resultCode == Activity.RESULT_OK)\r                    {\r                        if(data!=null){\r                            Log.w(\"URI\", \" \" + data);\r\r                            Uri selectedFileUri = data.getData();\r\r                            if(selectedFileUri!=null){\r\r                                Log.w(\"selectedFileUri\", \" \" + selectedFileUri);\r\r                                String filename = getFileName(selectedFileUri);\r\r                                Log.w(\"filename\", \" \" + filename);\r\r                                String filePath = FileUtil.getPath(VendorRegisterFormActivity.this,selectedFileUri);\r\r                                assert filePath != null;\r\r                                File file = new File(filePath); // initialize file here\r\r                                long length = file.length() / 1024; // Size in KB\r\r                                Log.w(\"filesize\", \" \" + length);\r\r                                if(length>2000){\r\r                                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                                            .setTitleText(\"File Size\")\r                                            .setContentText(\"Please choose file size less than 2MB \")\r                                            .setConfirmText(\"Ok\")\r                                            .show();\r                                }\r\r                                else{\r\r                                    photIDPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"pdf/*\"), file));\r\r                                    uploadPhotoIDPdf();\r                                }\r                            }\r\r                            else {\r\r                                Toasty.warning(VendorRegisterFormActivity.this, \"File Error!!Please upload Some other file\", Toasty.LENGTH_LONG).show();\r                            }\r\r                        }\r\r                        else {\r\r                            Toasty.warning(VendorRegisterFormActivity.this, \"File Error!!Please upload Some other file\", Toasty.LENGTH_LONG).show();\r                        }\r\r\r\r                    }\r                } catch (Exception e) {\r\r                    Log.w(\"Exception\", \" \" + e);\r                }\r            }\r\r\r\r        }\r        catch (Exception e){\r\r            Log.w(\"Exception\", \" \" + e);\r        }\r\r\r    }\r\r    @Override\r    public void onBackPressed() {\r        super.onBackPressed();\r        startActivity(new Intent(VendorRegisterFormActivity.this, LoginActivity.class));\r        finish();\r    }\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @Override\r    public void onClick(View v) {\r\r        switch (v.getId()){\r\r            case R.id.btn_submit:\r                checkValidation();\r                break;\r\r            case R.id.img_back:\r                onBackPressed();\r                break;\r\r                case R.id.rl_upload_gallery_image:\r                    chooseServiceGalleryImage();\r                break;\r\r            case R.id.rl_certificates:\r                chooseCertPdf();\r                break;\r\r            case R.id.rl_govtid:\r                chooseGovIDPdf();\r                break;\r\r            case R.id.rl_photoid:\r                choosePhotoIDPdf();\r                break;\r\r\r\r\r\r        }\r\r    }\r\r\r    @SuppressLint(\"MissingSuperCall\")\r    @Override\r    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\r        if (requestCode == MY_PERMISSIONS_REQUEST_LOCATION) {\r            if (grantResults.length > 0\r                    && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r                if (ContextCompat.checkSelfPermission(getApplicationContext(),\r                        Manifest.permission.ACCESS_FINE_LOCATION)\r                        == PackageManager.PERMISSION_GRANTED) {\r\r\r                }\r            } else {\r                Toast.makeText(getApplicationContext(), \"permission denied\", Toast.LENGTH_LONG).show();\r            }\r        }\r        if (requestCode == REQUEST_READ_CLINIC_PIC_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r              /*  Intent intent = new Intent();\r                intent.setType(\"image/*\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_CLINIC_PICTURE);\r*/\r                chooseServiceGalleryImage();\r\r                choosePhotoIDPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_CLINIC_CAMERA_PERMISSION_CODE) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r                /*Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\r                //    intent.putExtra(MediaStore.EXTRA_SCREEN_ORIENTATION, ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\r\r                startActivityForResult(intent, SELECT_CLINIC_CAMERA);*/\r\r                chooseServiceGalleryImage();\r\r                choosePhotoIDPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Camera for taking picture\")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_READ_CLINIC_PDF_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r/*\r                Intent intent = new Intent();\r                intent.setType(\"application/pdf\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_CERT_PDF);*/\r\r                choosePhotoIDPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Pdf files \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PDF_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_READ_GOVT_ID_PDF_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r/*\r                Intent intent = new Intent();\r                intent.setType(\"application/pdf\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_GOVTID_PDF);*/\r\r                choosePhotoIDPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Pdf Files \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVT_ID_PDF_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", new SweetAlertDialog.OnSweetClickListener() {\r                            @Override\r                            public void onClick(SweetAlertDialog sDialog) {\r                                sDialog.dismissWithAnimation();\r\r                            }\r                        })\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_READ_PHOTO_ID_PDF_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r/*\r                Intent intent = new Intent();\r                intent.setType(\"application/pdf\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_PHOTOID_PDF);*/\r\r                choosePhotoIDPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Pdf files \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTO_ID_PDF_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == MY_PERMISSIONS_REQUEST_LOCATION) {\r            // If request is cancelled, the result arrays are empty.\r            if (grantResults.length > 0\r                    && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r\r                checkValidation();\r\r\r\r            }\r\r            else {\r\r                // permission denied\r                showWarning(MY_PERMISSIONS_REQUEST_LOCATION);\r\r\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_READ_CERTIFICATE_PIC_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r                /*Intent intent = new Intent();\r                intent.setType(\"image/*\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_CERTIFICATE_PICTURE);*//*\r                chooseCertPdf();*/\r\r                choosePhotoIDPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CERTIFICATE_PIC_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r//                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r//\r/*//                //    intent.putExtra(MediaStore.EXTRA_SCREEN_ORIENTATION, ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\r//\r//                startActivityForResult(intent, SELECT_CERTIFICATE_CAMERA);\r\r                chooseCertPdf();*/\r\r                choosePhotoIDPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Camera for taking picture\")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_READ_GOVTID_PIC_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r                /*Intent intent = new Intent();\r                intent.setType(\"image/*\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_GOVTID_PICTURE);\r*/\r                chooseGovIDPdf();\r\r                choosePhotoIDPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVTID_PIC_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_GOVTID_CAMERA_PERMISSION_CODE) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r                /*Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\r                //    intent.putExtra(MediaStore.EXTRA_SCREEN_ORIENTATION, ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\r\r                startActivityForResult(intent, SELECT_GOVTID_CAMERA);\r*/\r                chooseGovIDPdf();\r\r                choosePhotoIDPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Camera for taking picture\")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_GOVTID_CAMERA_PERMISSION_CODE);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_READ_PHOTOID_PIC_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r                /*Intent intent = new Intent();\r                intent.setType(\"image/*\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_PHOTOID_PICTURE);*/\r\r                choosePhotoIDPdf();\r\r                choosePhotoIDPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTOID_PIC_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_PHOTOID_CAMERA_PERMISSION_CODE) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r                /*Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\r                //    intent.putExtra(MediaStore.EXTRA_SCREEN_ORIENTATION, ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\r\r                startActivityForResult(intent, SELECT_PHOTOID_CAMERA);*/\r\r                choosePhotoIDPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Camera for taking picture\")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_PHOTOID_CAMERA_PERMISSION_CODE);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                        .show();\r\r            }\r\r        }\r\r\r    }\r\r\r    private void showWarning(int REQUEST_PERMISSION_CODE) {\r\r        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                .setTitleText(\"Sorry!!\")\r                .setContentText(\"You Can't proceed further unless you allow permission\")\r                .setConfirmText(\"Ok\")\r                .setConfirmClickListener(sDialog -> {\r\r                    sDialog.dismissWithAnimation();\r\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_PERMISSION_CODE);\r                    }\r\r\r                })\r                .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                .show();\r    }\r    private void showWarningAddMoreService() {\r\r        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                .setTitleText(\"Add More Service!!\")\r                .setContentText(\"Please enter the service name\")\r                .setConfirmText(\"Ok\")\r                .setConfirmClickListener(SweetAlertDialog::dismissWithAnimation)\r                .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                .show();\r    }\r    private void showWarningAddMoreSpecialzation() {\r\r        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                .setTitleText(\"Add More Specialzation!!\")\r                .setContentText(\"Please enter the specialzation name\")\r                .setConfirmText(\"Ok\")\r                .setConfirmClickListener(SweetAlertDialog::dismissWithAnimation)\r                .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                .show();\r    }\r\r    public String getFileName(Uri uri) {\r        String result = null;\r        if (Objects.requireNonNull(uri.getScheme()).equals(\"content\")) {\r            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {\r                if (cursor != null && cursor.moveToFirst()) {\r                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));\r                }\r            }\r        }\r        if (result == null) {\r            result = uri.getPath();\r            int cut = 0;\r            if (result != null) {\r                cut = result.lastIndexOf('/');\r            }\r            if (cut != -1) {\r                if (result != null) {\r                    result = result.substring(cut + 1);\r                }\r            }\r        }\r        return result;\r    }\r\r\r\r\r    @SuppressLint(\"LongLogTag\")\r    private void vendorRegisterFormCreateResponseCall() {\r        avi_indicator.setVisibility(View.VISIBLE);\r        avi_indicator.smoothToShow();\r        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);\r        Call<VendorRegisterFormCreateResponse> call = apiInterface.vendorRegisterFormCreateResponseCall(RestUtils.getContentType(), vendorRegisterFormCreateRequest());\r        Log.w(TAG,\"vendorRegisterFormCreateResponseCall url  :%s\"+\" \"+ call.request().url().toString());\r\r        call.enqueue(new Callback<VendorRegisterFormCreateResponse>() {\r            @SuppressLint(\"LongLogTag\")\r            @Override\r            public void onResponse(@NonNull Call<VendorRegisterFormCreateResponse> call, @NonNull Response<VendorRegisterFormCreateResponse> response) {\r\r                Log.w(TAG,\"vendorRegisterFormCreateResponseCall\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                avi_indicator.smoothToHide();\r\r                if (response.body() != null) {\r                    if(response.body().getCode() == 200){\r\r                        if(response.body().getMessage() != null){\r                            showRegisterSuccessalert(response.body().getMessage());\r                        }\r\r\r\r                    }\r                    else{\r                        showErrorLoading(response.body().getMessage());\r                    }\r                }\r\r\r            }\r\r            @SuppressLint(\"LongLogTag\")\r            @Override\r            public void onFailure(@NonNull Call<VendorRegisterFormCreateResponse> call, @NonNull Throwable t) {\r\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"VendorRegisterFormCreateResponse flr\"+\"--->\" + t.getMessage());\r            }\r        });\r\r    }\r    @SuppressLint(\"LongLogTag\")\r    private VendorRegisterFormCreateRequest vendorRegisterFormCreateRequest() {\r        /*\r         * user_id : 123123213\r         * user_name : Mohammed imthiyas\r         * user_email : mohammed@gmail.com\r         * bussiness_name : Mohammed\r         * bussiness_email : mohammed@gmail.com\r         * bussiness : Mohammed\r         * bussiness_phone : 9876543210\r         * business_reg : Resdf\r         * bussiness_gallery : [{\"bussiness_gallery\":\"\"},{\"bussiness_gallery\":\"\"}]\r         * photo_id_proof : \"\"\r         * govt_id_proof :\"\"\r         * certifi : [{\"certifi\":\"\"},{\"certifi\":\"\"}]\r         * date_and_time : 23-10-2020 12:00 AM\r         * mobile_type : Admin\r         * profile_status : true\r         * profile_verification_status : Not Verified\r         * bussiness_loc : 12.0\r         * bussiness_lat : 80.0\r         * bussiness_long : Moolakadai\r         * delete_status : true\r         */\r\r        SimpleDateFormat sdf = new SimpleDateFormat(\"dd/MM/yyyy hh:mm aa\", Locale.getDefault());\r        String currentDateandTime = sdf.format(new Date());\r        VendorRegisterFormCreateRequest vendorRegisterFormCreateRequest = new VendorRegisterFormCreateRequest();\r        vendorRegisterFormCreateRequest.setUser_id(user_id);\r        vendorRegisterFormCreateRequest.setUser_name(username);\r        vendorRegisterFormCreateRequest.setUser_email(useremail);\r        vendorRegisterFormCreateRequest.setBussiness_name(edt_business_name.getText().toString());\r        vendorRegisterFormCreateRequest.setBussiness_email(edt_business_email.getText().toString());\r        vendorRegisterFormCreateRequest.setBussiness(edt_business.getText().toString());\r        vendorRegisterFormCreateRequest.setBussiness_phone(edt_phone.getText().toString());\r        vendorRegisterFormCreateRequest.setBusiness_reg(edt_business_registration.getText().toString());\r        vendorRegisterFormCreateRequest.setBussiness_gallery(bus_service_gall_list);\r        vendorRegisterFormCreateRequest.setPhoto_id_proof(photoIdPic);\r        vendorRegisterFormCreateRequest.setGovt_id_proof(govtIdPic);\r        vendorRegisterFormCreateRequest.setCertifi(bus_certif_list);\r        vendorRegisterFormCreateRequest.setDate_and_time(currentDateandTime);\r        vendorRegisterFormCreateRequest.setMobile_type(\"Android\");\r        vendorRegisterFormCreateRequest.setProfile_status(true);\r        vendorRegisterFormCreateRequest.setProfile_verification_status(\"Not verified\");\r        vendorRegisterFormCreateRequest.setBussiness_loc(AddressLine);\r        vendorRegisterFormCreateRequest.setBussiness_lat(latitude);\r        vendorRegisterFormCreateRequest.setBussiness_long(longitude);\r\r        Log.w(TAG,\"vendorRegisterFormCreateRequest\"+ \"--->\" + new Gson().toJson(vendorRegisterFormCreateRequest));\r        return vendorRegisterFormCreateRequest;\r    }\r\r\r\r    public void showErrorLoading(String errormesage){\r        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);\r        alertDialogBuilder.setMessage(errormesage);\r        alertDialogBuilder.setPositiveButton(\"ok\",\r                (arg0, arg1) -> hideLoading());\r\r\r\r\r        AlertDialog alertDialog = alertDialogBuilder.create();\r        alertDialog.show();\r    }\r    public void hideLoading(){\r        try {\r            alertDialog.dismiss();\r        }catch (Exception ignored){\r\r        }\r    }\r\r\r\r\r    private void googleApiConnected() {\r\r        googleApiClient = new GoogleApiClient.Builder(Objects.requireNonNull(getApplicationContext())).\r                addConnectionCallbacks(this).\r                addOnConnectionFailedListener(this).\r                addApi(LocationServices.API).build();\r        googleApiClient.connect();\r\r    }\r    private void checkLocation() {\r        try {\r            LocationManager lm = (LocationManager) getApplicationContext().getSystemService(Context.LOCATION_SERVICE);\r            boolean gps_enabled = false;\r            boolean network_enabled = false;\r\r            try {\r                gps_enabled = lm.isProviderEnabled(LocationManager.GPS_PROVIDER);\r            } catch (Exception ignored) {\r            }\r\r            try {\r                network_enabled = lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER);\r            } catch (Exception ignored) {\r            }\r\r            if (!gps_enabled && !network_enabled) {\r\r                if (!lm.isProviderEnabled(LocationManager.GPS_PROVIDER)) {\r                    getMyLocation();\r                }\r\r            } else {\r                getLatandLong();\r            }\r        } catch (Exception e) {\r            e.printStackTrace();\r        }\r\r    }\r    @SuppressLint(\"LongLogTag\")\r    @Override\r    public void onLocationChanged(Location location) {\r        mLastLocation = location;\r        latitude = mLastLocation.getLatitude();\r        longitude = mLastLocation.getLongitude();\r\r        if(latitude != 0 && longitude != 0){\r            getAddress(latitude,longitude);\r        }\r\r        Log.w(TAG,\"onLocationChanged : \"+\" latitude : \"+latitude+ \" longitude : \"+longitude);\r\r\r\r\r\r\r    }\r    @Override\r    public void onConnected(@Nullable Bundle bundle) {\r        permissionChecking();\r    }\r    @Override\r    public void onConnectionSuspended(int i) {\r\r    }\r    @Override\r    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {\r\r    }\r    @SuppressLint(\"LongLogTag\")\r    @Override\r    public void onMapReady(GoogleMap googleMap) {\r\r\r    }\r    private void permissionChecking() {\r        if (getApplicationContext() != null) {\r            if (Build.VERSION.SDK_INT >= 23 && (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) &&\r                    (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED)) {\r\r                ActivityCompat.requestPermissions(Objects.requireNonNull(this), new String[]{Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION}, 5);\r\r            } else {\r\r                checkLocation();\r            }\r        }\r    }\r    public void getMyLocation() {\r\r        if (googleApiClient != null) {\r\r            if (googleApiClient.isConnected()) {\r                if(getApplicationContext() != null){\r                    if (ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r                        // TODO: Consider calling\r                        //    ActivityCompat#requestPermissions\r                        // here to request the missing permissions, and then overriding\r                        //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\r                        //                                          int[] grantResults)\r                        // to handle the case where the user grants the permission. See the documentation\r                        // for ActivityCompat#requestPermissions for more details.\r\r                        return;\r                    }\r\r                }\r\r                mLastLocation = LocationServices.FusedLocationApi.getLastLocation(googleApiClient);\r                LocationRequest locationRequest = new LocationRequest();\r                locationRequest.setInterval(2000);\r                locationRequest.setFastestInterval(2000);\r                locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);\r                LocationSettingsRequest.Builder builder = new LocationSettingsRequest.Builder().addLocationRequest(locationRequest);\r                builder.setAlwaysShow(true);\r                LocationServices.FusedLocationApi.requestLocationUpdates(googleApiClient, locationRequest, this);\r                PendingResult<LocationSettingsResult> result = LocationServices.SettingsApi.checkLocationSettings(googleApiClient, builder.build());\r                result.setResultCallback(result1 -> {\r                    Status status = result1.getStatus();\r                    switch (status.getStatusCode()) {\r                        case LocationSettingsStatusCodes.SUCCESS:\r                            // All location settings are satisfied.\r                            // You can initialize location requests here.\r                            mLastLocation = LocationServices.FusedLocationApi.getLastLocation(googleApiClient);\r\r\r\r\r\r\r                            Handler handler = new Handler();\r                            int delay = 1000; //milliseconds\r\r                            handler.postDelayed(new Runnable() {\r                                @SuppressLint(\"LongLogTag\")\r                                public void run() {\r                                    //do something\r                                    Log.w(TAG, \"getMyLocation-->\");\r\r                                    //parkingListResponseCall(checkinhours,checkouthours,requestCheckinDate,requestCheckoutDate, selectedVehicleTypeId);\r\r\r                                }\r                            }, delay);\r\r\r                            break;\r                        case LocationSettingsStatusCodes.RESOLUTION_REQUIRED:\r                            try {\r                                status.startResolutionForResult(this, REQUEST_CHECK_SETTINGS_GPS);\r                            } catch (IntentSender.SendIntentException e) {\r                                // Ignore the error.\r                            }\r                            break;\r                        case LocationSettingsStatusCodes.SETTINGS_CHANGE_UNAVAILABLE:\r                            break;\r                    }\r                });\r            }\r\r\r        }\r    }\r    @SuppressLint(\"LongLogTag\")\r    private void getLatandLong() {\r        try {\r            if (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 1);\r\r            } else {\r                GPSTracker gps = new GPSTracker(getApplicationContext());\r                // Check if GPS enabled\r                if (gps.canGetLocation()) {\r                    latitude = gps.getLatitude();\r                    longitude = gps.getLongitude();\r\r                    Log.w(TAG, \"getLatandLong--->\" + \"latitude\" + \" \" + latitude + \"longitude\" + \" \" + longitude);\r                    if(latitude != 0 && longitude != 0){\r                        getAddress(latitude,longitude);\r                    }\r\r\r\r\r                }\r            }\r\r\r\r\r        } catch (Exception e) {\r            e.printStackTrace();\r        }\r    }\r\r    @SuppressLint({\"LongLogTag\", \"LogNotTimber\"})\r    private void getAddress(double latitude, double longitude) {\r        StringBuilder result = new StringBuilder();\r        try {\r            Geocoder geocoder = new Geocoder(this, Locale.getDefault());\r            List<Address> listAddresses = geocoder.getFromLocation(latitude, longitude, 1);\r            if (null != listAddresses && listAddresses.size() > 0) {\r                Address address = listAddresses.get(0);\r                result.append(address.getLocality()).append(\"\\n\");\r                result.append(address.getCountryName());\r\r                String state = listAddresses.get(0).getAdminArea();\r                String country = listAddresses.get(0).getCountryName();\r                String subLocality = listAddresses.get(0).getSubLocality();\r                String postalcode = listAddresses.get(0).getPostalCode();\r                AddressLine = listAddresses.get(0).getAddressLine(0);\r                String CityName = listAddresses.get(0).getLocality();\r                if(CityName != null){\r                    AddressLine = CityName+\" \"+listAddresses.get(0).getAddressLine(0);\r\r                }\r\r\r                // Thoroughfare seems to be the street name without numbers\r               String street = address.getThoroughfare();\r\r\r            }\r        } catch (IOException e) {\r            Log.e(\"tag\", Objects.requireNonNull(e.getMessage()));\r        }\r\r        result.toString();\r    }\r\r\r    private void showRegisterSuccessalert(String message) {\r        try {\r\r            dialog = new Dialog(VendorRegisterFormActivity.this);\r            dialog.setCancelable(false);\r            dialog.setContentView(R.layout.alert_success_register);\r            TextView txt_success_msg = dialog.findViewById(R.id.txt_success_msg);\r            Button btn_back_to_login = dialog.findViewById(R.id.btn_back_to_login);\r            txt_success_msg.setText(message);\r\r            btn_back_to_login.setOnClickListener(new View.OnClickListener() {\r                @Override\r                public void onClick(View view) {\r                    startActivity(new Intent(VendorRegisterFormActivity.this, VendorDashboardActivity.class));\r                    finish();\r                    dialog.dismiss();\r\r                }\r            });\r            Objects.requireNonNull(dialog.getWindow()).setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r            dialog.show();\r\r        } catch (WindowManager.BadTokenException e) {\r            e.printStackTrace();\r        }\r\r\r\r\r    }\r\r}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/petfolio/infinituss/vendor/VendorRegisterFormActivity.java b/app/src/main/java/com/petfolio/infinituss/vendor/VendorRegisterFormActivity.java
--- a/app/src/main/java/com/petfolio/infinituss/vendor/VendorRegisterFormActivity.java	(revision f1734ca40ba206b2d8b7b0e5c5470841991c7822)
+++ b/app/src/main/java/com/petfolio/infinituss/vendor/VendorRegisterFormActivity.java	(date 1632584136800)
@@ -1,5 +1,7 @@
 package com.petfolio.infinituss.vendor;
 
+import static android.os.Environment.DIRECTORY_DOCUMENTS;
+
 import android.Manifest;
 import android.annotation.SuppressLint;
 import android.app.Activity;
@@ -19,9 +21,11 @@
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
+import android.os.Environment;
 import android.os.Handler;
 import android.provider.MediaStore;
 import android.provider.OpenableColumns;
+import android.text.TextUtils;
 import android.util.Log;
 import android.view.View;
 import android.view.WindowManager;
@@ -46,6 +50,7 @@
 import com.google.android.gms.common.api.GoogleApiClient;
 import com.google.android.gms.common.api.PendingResult;
 import com.google.android.gms.common.api.Status;
+import com.google.android.gms.common.util.IOUtils;
 import com.google.android.gms.location.LocationListener;
 import com.google.android.gms.location.LocationRequest;
 import com.google.android.gms.location.LocationServices;
@@ -78,12 +83,13 @@
 import com.petfolio.infinituss.sessionmanager.SessionManager;
 import com.petfolio.infinituss.utils.ConnectionDetector;
 import com.petfolio.infinituss.utils.RestUtils;
-import com.theartofdev.edmodo.cropper.CropImage;
+import com.canhub.cropper.CropImage;
 import com.wang.avi.AVLoadingIndicatorView;
 
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.OutputStream;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
@@ -460,6 +466,10 @@
             {
                 requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);
             }
+            else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(VendorRegisterFormActivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)
+            {
+                requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);
+            }
 
             else
             {
@@ -476,7 +486,7 @@
 
                 /*CropImage.activity().start(AddYourPetImageOlduserActivity.this);*/
             }
-         }
+        }
 
     }
 
@@ -561,6 +571,11 @@
                     {
                         requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CERTIFICATE_PIC_PERMISSION);
                     }
+                    else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(VendorRegisterFormActivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)
+                    {
+                        requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, REQUEST_READ_CERTIFICATE_PIC_PERMISSION);
+                    }
+
                     else {
 
                         isAddCertfProof = true;
@@ -688,6 +703,11 @@
                     {
                         requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVTID_PIC_PERMISSION);
                     }
+                    else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)
+                    {
+                        requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, REQUEST_READ_GOVTID_PIC_PERMISSION);
+                    }
+
 
                     else {
 
@@ -818,6 +838,10 @@
                     {
                         requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTOID_PIC_PERMISSION);
                     }
+                    else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)
+                    {
+                        requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, REQUEST_READ_PHOTOID_PIC_PERMISSION);
+                    }
                     {
                         isAddPhotoIDproof=true;
 
@@ -919,74 +943,76 @@
     }
 
     private void checkValidation() {
-            business_name = edt_business_name.getText().toString().trim();
-            boolean can_proceed = true;
+        business_name = edt_business_name.getText().toString().trim();
+        boolean can_proceed = true;
 
-                if(business_name.isEmpty()){
-                    edt_business_name.setError("Please fill the business name");
-                    edt_business_name.requestFocus();
-                    can_proceed = false;
+        if(business_name.isEmpty()){
+            edt_business_name.setError("Please fill the business name");
+            edt_business_name.requestFocus();
+            can_proceed = false;
 
-                }else if(edt_business_email.getText().toString().isEmpty()){
-                    edt_business_email.setError("Please fill the business email");
-                    edt_business_email.requestFocus();
-                    can_proceed = false;
+        }else if(edt_business_email.getText().toString().isEmpty()){
+            edt_business_email.setError("Please fill the business email");
+            edt_business_email.requestFocus();
+            can_proceed = false;
 
-                }else if(edt_business.getText().toString().isEmpty()){
+        }
+                /*else if(edt_business.getText().toString().isEmpty()){
                     edt_business.setError("Please fill the business");
                     edt_business.requestFocus();
                     can_proceed = false;
 
-                }else if(edt_phone.getText().toString().isEmpty()){
-                    edt_phone.setError("Please fill the phone number");
-                    edt_phone.requestFocus();
-                    can_proceed = false;
+                }*/
+        else if(edt_phone.getText().toString().isEmpty()){
+            edt_phone.setError("Please fill the phone number");
+            edt_phone.requestFocus();
+            can_proceed = false;
 
-                }else if(edt_business_registration.getText().toString().isEmpty()){
-                    edt_business_registration.setError("Please fill the business registration details");
-                    edt_business_registration.requestFocus();
-                    can_proceed = false;
+        }else if(edt_business_registration.getText().toString().isEmpty()){
+            edt_business_registration.setError("Please fill the business registration details");
+            edt_business_registration.requestFocus();
+            can_proceed = false;
 
-                }
+        }
 
 
-                else if(bus_service_gall_list!=null&&bus_service_gall_list.size()<1){
+        else if(bus_service_gall_list!=null&&bus_service_gall_list.size()<1){
 
-                    Toasty.warning(getApplicationContext(), "Please Choose minimum 1 Uplaod gallery image", Toast.LENGTH_SHORT).show();
+            Toasty.warning(getApplicationContext(), "Please Choose minimum 1 Uplaod gallery image", Toast.LENGTH_SHORT).show();
 
-                    can_proceed = false;
+            can_proceed = false;
 
-                }
-                else if(photoIdPicBeans!=null&&photoIdPicBeans.size()<1){
+        }
+        else if(photoIdPicBeans!=null&&photoIdPicBeans.size()<1){
 
-                    Toasty.warning(getApplicationContext(), "Please Choose PhotoID File", Toast.LENGTH_SHORT).show();
+            Toasty.warning(getApplicationContext(), "Please Choose PhotoID File", Toast.LENGTH_SHORT).show();
 
-                    can_proceed = false;
+            can_proceed = false;
 
-                }
-                else if(govtIdPicBeans!=null&&govtIdPicBeans.size()<1){
+        }
+        else if(govtIdPicBeans!=null&&govtIdPicBeans.size()<1){
 
-                    Toasty.warning(getApplicationContext(), "Please Choose GovtID File", Toast.LENGTH_SHORT).show();
+            Toasty.warning(getApplicationContext(), "Please Choose GovtID File", Toast.LENGTH_SHORT).show();
 
-                    can_proceed = false;
+            can_proceed = false;
 
-                }
-                else if(bus_certif_list!=null&&bus_certif_list.size()<1){
+        }
+        else if(bus_certif_list!=null&&bus_certif_list.size()<1){
 
-                    Toasty.warning(getApplicationContext(), "Please Choose Certificate File", Toast.LENGTH_SHORT).show();
+            Toasty.warning(getApplicationContext(), "Please Choose Certificate File", Toast.LENGTH_SHORT).show();
 
-                    can_proceed = false;
+            can_proceed = false;
 
-                }
+        }
 
 
 
 
-                if(can_proceed){
-                    if (new ConnectionDetector(getApplicationContext()).isNetworkAvailable(getApplicationContext())) {
-                        vendorRegisterFormCreateResponseCall();
-                    }
-                }
+        if(can_proceed){
+            if (new ConnectionDetector(getApplicationContext()).isNetworkAvailable(getApplicationContext())) {
+                vendorRegisterFormCreateResponseCall();
+            }
+        }
 
 
 
@@ -1019,7 +1045,7 @@
             if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {
                 CropImage.ActivityResult result = CropImage.getActivityResult(data);
                 if (resultCode == RESULT_OK) {
-                    Uri resultUri = result.getUri();
+                    Uri resultUri = result.getUriContent();
 
                     if (resultUri != null) {
 
@@ -1029,7 +1055,7 @@
 
                         Log.w("filename", " " + filename);
 
-                        String filePath = FileUtil.getPath(VendorRegisterFormActivity.this, resultUri);
+                        String filePath = getFilePathFromURI(VendorRegisterFormActivity.this, resultUri);
 
                         assert filePath != null;
 
@@ -1054,27 +1080,27 @@
 
                             if(isAddClinicPic){
 
-                                filePart = MultipartBody.Part.createFormData("sampleFile", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse("image/*"), file));
+                                filePart = MultipartBody.Part.createFormData("sampleFile", user_id + currentDateandTime + filename, RequestBody.create(MediaType.parse("image/*"), file));
 
                                 uploadClinicImage();
                             }
 
                             else if(isAddCertfProof){
 
-                                certPart = MultipartBody.Part.createFormData("sampleFile", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse("image/*"), file));
+                                certPart = MultipartBody.Part.createFormData("sampleFile", user_id + currentDateandTime + filename, RequestBody.create(MediaType.parse("image/*"), file));
 
                                 uploadCertPdf();
                             }
 
                             else if(isAddGovtIdproof){
 
-                                govIdPart = MultipartBody.Part.createFormData("sampleFile", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse("image/*"), file));
+                                govIdPart = MultipartBody.Part.createFormData("sampleFile", user_id + currentDateandTime + filename, RequestBody.create(MediaType.parse("image/*"), file));
 
                                 uploadGovtIDPdf();
                             }
                             else if(isAddPhotoIDproof){
 
-                                photIDPart = MultipartBody.Part.createFormData("sampleFile", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse("image/*"), file));
+                                photIDPart = MultipartBody.Part.createFormData("sampleFile", user_id + currentDateandTime + filename, RequestBody.create(MediaType.parse("image/*"), file));
 
                                 uploadPhotoIDPdf();
                             }
@@ -1285,10 +1311,10 @@
                                     certPart = MultipartBody.Part.createFormData("sampleFile", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse("pdf/*"), file));
 
                                     uploadCertPdf();
-                            }
+                                }
 
 
-                  }
+                            }
 
                             else {
 
@@ -1612,8 +1638,8 @@
                 onBackPressed();
                 break;
 
-                case R.id.rl_upload_gallery_image:
-                    chooseServiceGalleryImage();
+            case R.id.rl_upload_gallery_image:
+                chooseServiceGalleryImage();
                 break;
 
             case R.id.rl_certificates:
@@ -1641,56 +1667,59 @@
     @Override
     public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
 
-        if (requestCode == MY_PERMISSIONS_REQUEST_LOCATION) {
-            if (grantResults.length > 0
-                    && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
-                if (ContextCompat.checkSelfPermission(getApplicationContext(),
-                        Manifest.permission.ACCESS_FINE_LOCATION)
-                        == PackageManager.PERMISSION_GRANTED) {
+        try {
+
+            if (requestCode == MY_PERMISSIONS_REQUEST_LOCATION) {
+                if (grantResults.length > 0
+                        && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+                    if (ContextCompat.checkSelfPermission(getApplicationContext(),
+                            Manifest.permission.ACCESS_FINE_LOCATION)
+                            == PackageManager.PERMISSION_GRANTED) {
 
 
-                }
-            } else {
-                Toast.makeText(getApplicationContext(), "permission denied", Toast.LENGTH_LONG).show();
-            }
-        }
-        if (requestCode == REQUEST_READ_CLINIC_PIC_PERMISSION) {
+                    }
+                } else {
+                    Toast.makeText(getApplicationContext(), "permission denied", Toast.LENGTH_LONG).show();
+                }
+            }
+
+            if (requestCode == REQUEST_READ_CLINIC_PIC_PERMISSION) {
 
-            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
               /*  Intent intent = new Intent();
                 intent.setType("image/*");
                 intent.setAction(Intent.ACTION_GET_CONTENT);
                 startActivityForResult(Intent.createChooser(intent, "Select Picture"), SELECT_CLINIC_PICTURE);
 */
-                chooseServiceGalleryImage();
+                    chooseServiceGalleryImage();
 
-                choosePhotoIDPdf();
+                    /*     choosePhotoIDPdf();*/
 
-            } else {
-                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)
-                        .setTitleText("Permission Required")
-                        .setContentText("Please Allow Permissions for choosing Images from Gallery ")
-                        .setConfirmText("Ok")
-                        .setConfirmClickListener(sDialog -> {
+                } else {
+                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)
+                            .setTitleText("Permission Required")
+                            .setContentText("Please Allow Permissions for choosing Images from Gallery ")
+                            .setConfirmText("Ok")
+                            .setConfirmClickListener(sDialog -> {
 
-                            sDialog.dismissWithAnimation();
+                                sDialog.dismissWithAnimation();
 
-                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);
-                            }
+                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+                                    requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);
+                                }
 
 
-                        })
-                        .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)
-                        .show();
+                            })
+                            .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)
+                            .show();
 
-            }
+                }
 
-        }
+            }
 
-        else if (requestCode == REQUEST_CLINIC_CAMERA_PERMISSION_CODE) {
+            else if (requestCode == REQUEST_CLINIC_CAMERA_PERMISSION_CODE) {
 
-            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
 
                 /*Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
 
@@ -1698,196 +1727,196 @@
 
                 startActivityForResult(intent, SELECT_CLINIC_CAMERA);*/
 
-                chooseServiceGalleryImage();
+                    chooseServiceGalleryImage();
 
-                choosePhotoIDPdf();
+                    /*   choosePhotoIDPdf();*/
 
-            } else {
-                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)
-                        .setTitleText("Permission Required")
-                        .setContentText("Please Allow Camera for taking picture")
-                        .setConfirmText("Ok")
-                        .setConfirmClickListener(sDialog -> {
+                } else {
+                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)
+                            .setTitleText("Permission Required")
+                            .setContentText("Please Allow Camera for taking picture")
+                            .setConfirmText("Ok")
+                            .setConfirmClickListener(sDialog -> {
 
-                            sDialog.dismissWithAnimation();
+                                sDialog.dismissWithAnimation();
 
-                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);
-                            }
+                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+                                    requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);
+                                }
 
 
-                        })
-                        .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)
-                        .show();
+                            })
+                            .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)
+                            .show();
 
-            }
+                }
 
-        }
+            }
 
-        else if (requestCode == REQUEST_READ_CLINIC_PDF_PERMISSION) {
+            else if (requestCode == REQUEST_READ_CLINIC_PDF_PERMISSION) {
 
-            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
 /*
                 Intent intent = new Intent();
                 intent.setType("application/pdf");
                 intent.setAction(Intent.ACTION_GET_CONTENT);
                 startActivityForResult(Intent.createChooser(intent, "Select PDF"), SELECT_CERT_PDF);*/
 
-                choosePhotoIDPdf();
+                    choosePhotoIDPdf();
 
-            } else {
-                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)
-                        .setTitleText("Permission Required")
-                        .setContentText("Please Allow Permissions for choosing Pdf files ")
-                        .setConfirmText("Ok")
-                        .setConfirmClickListener(sDialog -> {
+                } else {
+                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)
+                            .setTitleText("Permission Required")
+                            .setContentText("Please Allow Permissions for choosing Pdf files ")
+                            .setConfirmText("Ok")
+                            .setConfirmClickListener(sDialog -> {
 
-                            sDialog.dismissWithAnimation();
+                                sDialog.dismissWithAnimation();
 
-                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PDF_PERMISSION);
-                            }
+                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+                                    requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PDF_PERMISSION);
+                                }
 
 
-                        })
-                        .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)
-                        .show();
+                            })
+                            .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)
+                            .show();
 
-            }
+                }
 
-        }
+            }
 
-        else if (requestCode == REQUEST_READ_GOVT_ID_PDF_PERMISSION) {
+            else if (requestCode == REQUEST_READ_GOVT_ID_PDF_PERMISSION) {
 
-            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
 /*
                 Intent intent = new Intent();
                 intent.setType("application/pdf");
                 intent.setAction(Intent.ACTION_GET_CONTENT);
                 startActivityForResult(Intent.createChooser(intent, "Select PDF"), SELECT_GOVTID_PDF);*/
 
-                choosePhotoIDPdf();
+                    choosePhotoIDPdf();
 
-            } else {
-                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)
-                        .setTitleText("Permission Required")
-                        .setContentText("Please Allow Permissions for choosing Pdf Files ")
-                        .setConfirmText("Ok")
-                        .setConfirmClickListener(sDialog -> {
+                } else {
+                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)
+                            .setTitleText("Permission Required")
+                            .setContentText("Please Allow Permissions for choosing Pdf Files ")
+                            .setConfirmText("Ok")
+                            .setConfirmClickListener(sDialog -> {
 
-                            sDialog.dismissWithAnimation();
+                                sDialog.dismissWithAnimation();
 
-                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVT_ID_PDF_PERMISSION);
-                            }
+                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+                                    requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVT_ID_PDF_PERMISSION);
+                                }
 
 
-                        })
-                        .setCancelButton("Cancel", new SweetAlertDialog.OnSweetClickListener() {
-                            @Override
-                            public void onClick(SweetAlertDialog sDialog) {
-                                sDialog.dismissWithAnimation();
+                            })
+                            .setCancelButton("Cancel", new SweetAlertDialog.OnSweetClickListener() {
+                                @Override
+                                public void onClick(SweetAlertDialog sDialog) {
+                                    sDialog.dismissWithAnimation();
 
-                            }
-                        })
-                        .show();
+                                }
+                            })
+                            .show();
 
-            }
+                }
 
-        }
+            }
 
-        else if (requestCode == REQUEST_READ_PHOTO_ID_PDF_PERMISSION) {
+            else if (requestCode == REQUEST_READ_PHOTO_ID_PDF_PERMISSION) {
 
-            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
 /*
                 Intent intent = new Intent();
                 intent.setType("application/pdf");
                 intent.setAction(Intent.ACTION_GET_CONTENT);
                 startActivityForResult(Intent.createChooser(intent, "Select PDF"), SELECT_PHOTOID_PDF);*/
 
-                choosePhotoIDPdf();
+                    choosePhotoIDPdf();
 
-            } else {
-                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)
-                        .setTitleText("Permission Required")
-                        .setContentText("Please Allow Permissions for choosing Pdf files ")
-                        .setConfirmText("Ok")
-                        .setConfirmClickListener(sDialog -> {
+                } else {
+                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)
+                            .setTitleText("Permission Required")
+                            .setContentText("Please Allow Permissions for choosing Pdf files ")
+                            .setConfirmText("Ok")
+                            .setConfirmClickListener(sDialog -> {
 
-                            sDialog.dismissWithAnimation();
+                                sDialog.dismissWithAnimation();
 
-                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTO_ID_PDF_PERMISSION);
-                            }
+                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+                                    requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTO_ID_PDF_PERMISSION);
+                                }
 
 
-                        })
-                        .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)
-                        .show();
+                            })
+                            .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)
+                            .show();
 
-            }
+                }
 
-        }
+            }
 
-        else if (requestCode == MY_PERMISSIONS_REQUEST_LOCATION) {
-            // If request is cancelled, the result arrays are empty.
-            if (grantResults.length > 0
-                    && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+            else if (requestCode == MY_PERMISSIONS_REQUEST_LOCATION) {
+                // If request is cancelled, the result arrays are empty.
+                if (grantResults.length > 0
+                        && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
 
 
-                checkValidation();
+                    checkValidation();
 
 
 
-            }
+                }
 
-            else {
+                else {
 
-                // permission denied
-                showWarning(MY_PERMISSIONS_REQUEST_LOCATION);
+                    // permission denied
+                    showWarning(MY_PERMISSIONS_REQUEST_LOCATION);
 
 
 
-            }
+                }
 
-        }
+            }
 
-        else if (requestCode == REQUEST_READ_CERTIFICATE_PIC_PERMISSION) {
+            else if (requestCode == REQUEST_READ_CERTIFICATE_PIC_PERMISSION) {
 
-            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                 /*Intent intent = new Intent();
                 intent.setType("image/*");
                 intent.setAction(Intent.ACTION_GET_CONTENT);
                 startActivityForResult(Intent.createChooser(intent, "Select Picture"), SELECT_CERTIFICATE_PICTURE);*//*
                 chooseCertPdf();*/
 
-                choosePhotoIDPdf();
+                    choosePhotoIDPdf();
 
-            } else {
-                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)
-                        .setTitleText("Permission Required")
-                        .setContentText("Please Allow Permissions for choosing Images from Gallery ")
-                        .setConfirmText("Ok")
-                        .setConfirmClickListener(sDialog -> {
+                } else {
+                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)
+                            .setTitleText("Permission Required")
+                            .setContentText("Please Allow Permissions for choosing Images from Gallery ")
+                            .setConfirmText("Ok")
+                            .setConfirmClickListener(sDialog -> {
 
-                            sDialog.dismissWithAnimation();
+                                sDialog.dismissWithAnimation();
 
-                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CERTIFICATE_PIC_PERMISSION);
-                            }
+                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+                                    requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CERTIFICATE_PIC_PERMISSION);
+                                }
 
 
-                        })
-                        .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)
-                        .show();
+                            })
+                            .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)
+                            .show();
 
-            }
+                }
 
-        }
+            }
 
-        else if (requestCode == REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE) {
+            else if (requestCode == REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE) {
 
-            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
 
 //                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
 //
@@ -1897,67 +1926,67 @@
 
                 chooseCertPdf();*/
 
-                choosePhotoIDPdf();
+                    choosePhotoIDPdf();
 
-            } else {
-                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)
-                        .setTitleText("Permission Required")
-                        .setContentText("Please Allow Camera for taking picture")
-                        .setConfirmText("Ok")
-                        .setConfirmClickListener(sDialog -> {
+                } else {
+                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)
+                            .setTitleText("Permission Required")
+                            .setContentText("Please Allow Camera for taking picture")
+                            .setConfirmText("Ok")
+                            .setConfirmClickListener(sDialog -> {
 
-                            sDialog.dismissWithAnimation();
+                                sDialog.dismissWithAnimation();
 
-                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE);
-                            }
+                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+                                    requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE);
+                                }
 
 
-                        })
-                        .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)
-                        .show();
+                            })
+                            .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)
+                            .show();
 
-            }
+                }
 
-        }
+            }
 
-        else if (requestCode == REQUEST_READ_GOVTID_PIC_PERMISSION) {
+            else if (requestCode == REQUEST_READ_GOVTID_PIC_PERMISSION) {
 
-            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                 /*Intent intent = new Intent();
                 intent.setType("image/*");
                 intent.setAction(Intent.ACTION_GET_CONTENT);
                 startActivityForResult(Intent.createChooser(intent, "Select Picture"), SELECT_GOVTID_PICTURE);
 */
-                chooseGovIDPdf();
+                    chooseGovIDPdf();
 
-                choosePhotoIDPdf();
+                    choosePhotoIDPdf();
 
-            } else {
-                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)
-                        .setTitleText("Permission Required")
-                        .setContentText("Please Allow Permissions for choosing Images from Gallery ")
-                        .setConfirmText("Ok")
-                        .setConfirmClickListener(sDialog -> {
+                } else {
+                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)
+                            .setTitleText("Permission Required")
+                            .setContentText("Please Allow Permissions for choosing Images from Gallery ")
+                            .setConfirmText("Ok")
+                            .setConfirmClickListener(sDialog -> {
 
-                            sDialog.dismissWithAnimation();
+                                sDialog.dismissWithAnimation();
 
-                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVTID_PIC_PERMISSION);
-                            }
+                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+                                    requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVTID_PIC_PERMISSION);
+                                }
 
 
-                        })
-                        .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)
-                        .show();
+                            })
+                            .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)
+                            .show();
 
-            }
+                }
 
-        }
+            }
 
-        else if (requestCode == REQUEST_GOVTID_CAMERA_PERMISSION_CODE) {
+            else if (requestCode == REQUEST_GOVTID_CAMERA_PERMISSION_CODE) {
 
-            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
 
                 /*Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
 
@@ -1965,69 +1994,69 @@
 
                 startActivityForResult(intent, SELECT_GOVTID_CAMERA);
 */
-                chooseGovIDPdf();
+                    chooseGovIDPdf();
 
-                choosePhotoIDPdf();
+                    choosePhotoIDPdf();
 
-            } else {
-                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)
-                        .setTitleText("Permission Required")
-                        .setContentText("Please Allow Camera for taking picture")
-                        .setConfirmText("Ok")
-                        .setConfirmClickListener(sDialog -> {
+                } else {
+                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)
+                            .setTitleText("Permission Required")
+                            .setContentText("Please Allow Camera for taking picture")
+                            .setConfirmText("Ok")
+                            .setConfirmClickListener(sDialog -> {
 
-                            sDialog.dismissWithAnimation();
+                                sDialog.dismissWithAnimation();
 
-                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_GOVTID_CAMERA_PERMISSION_CODE);
-                            }
+                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+                                    requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_GOVTID_CAMERA_PERMISSION_CODE);
+                                }
 
 
-                        })
-                        .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)
-                        .show();
+                            })
+                            .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)
+                            .show();
 
-            }
+                }
 
-        }
+            }
 
-        else if (requestCode == REQUEST_READ_PHOTOID_PIC_PERMISSION) {
+            else if (requestCode == REQUEST_READ_PHOTOID_PIC_PERMISSION) {
 
-            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                 /*Intent intent = new Intent();
                 intent.setType("image/*");
                 intent.setAction(Intent.ACTION_GET_CONTENT);
                 startActivityForResult(Intent.createChooser(intent, "Select Picture"), SELECT_PHOTOID_PICTURE);*/
 
-                choosePhotoIDPdf();
+                    choosePhotoIDPdf();
 
-                choosePhotoIDPdf();
+                    choosePhotoIDPdf();
 
-            } else {
-                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)
-                        .setTitleText("Permission Required")
-                        .setContentText("Please Allow Permissions for choosing Images from Gallery ")
-                        .setConfirmText("Ok")
-                        .setConfirmClickListener(sDialog -> {
+                } else {
+                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)
+                            .setTitleText("Permission Required")
+                            .setContentText("Please Allow Permissions for choosing Images from Gallery ")
+                            .setConfirmText("Ok")
+                            .setConfirmClickListener(sDialog -> {
 
-                            sDialog.dismissWithAnimation();
+                                sDialog.dismissWithAnimation();
 
-                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTOID_PIC_PERMISSION);
-                            }
+                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+                                    requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTOID_PIC_PERMISSION);
+                                }
 
 
-                        })
-                        .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)
-                        .show();
+                            })
+                            .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)
+                            .show();
 
-            }
+                }
 
-        }
+            }
 
-        else if (requestCode == REQUEST_PHOTOID_CAMERA_PERMISSION_CODE) {
+            else if (requestCode == REQUEST_PHOTOID_CAMERA_PERMISSION_CODE) {
 
-            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
 
                 /*Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
 
@@ -2035,30 +2064,33 @@
 
                 startActivityForResult(intent, SELECT_PHOTOID_CAMERA);*/
 
-                choosePhotoIDPdf();
+                    choosePhotoIDPdf();
 
-            } else {
-                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)
-                        .setTitleText("Permission Required")
-                        .setContentText("Please Allow Camera for taking picture")
-                        .setConfirmText("Ok")
-                        .setConfirmClickListener(sDialog -> {
+                } else {
+                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)
+                            .setTitleText("Permission Required")
+                            .setContentText("Please Allow Camera for taking picture")
+                            .setConfirmText("Ok")
+                            .setConfirmClickListener(sDialog -> {
 
-                            sDialog.dismissWithAnimation();
+                                sDialog.dismissWithAnimation();
 
-                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_PHOTOID_CAMERA_PERMISSION_CODE);
-                            }
+                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+                                    requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_PHOTOID_CAMERA_PERMISSION_CODE);
+                                }
 
 
-                        })
-                        .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)
-                        .show();
+                            })
+                            .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)
+                            .show();
 
-            }
+                }
 
-        }
+            }
 
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
 
     }
 
@@ -2104,28 +2136,50 @@
                 .show();
     }
 
-    public String getFileName(Uri uri) {
-        String result = null;
-        if (Objects.requireNonNull(uri.getScheme()).equals("content")) {
-            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {
-                if (cursor != null && cursor.moveToFirst()) {
-                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));
-                }
+    public static String getFilePathFromURI(Context context, Uri contentUri) {
+        //copy file and send new file path
+        String fileName = getFileName(contentUri);
+        if (!TextUtils.isEmpty(fileName)) {
+
+            String path = Environment.getExternalStoragePublicDirectory(DIRECTORY_DOCUMENTS).getPath() + "/" + "MyFirstApp/";
+            // Create the parent path
+            File dir = new File(path);
+            if (!dir.exists()) {
+                dir.mkdirs();
             }
+
+            String fullName = path + "mylog";
+            File copyFile = new File (fullName);
+
+            /* File copyFile = new File(Environment.DIRECTORY_DOWNLOADS + File.separator + fileName);*/
+            copy(context, contentUri, copyFile);
+            return copyFile.getAbsolutePath();
         }
-        if (result == null) {
-            result = uri.getPath();
-            int cut = 0;
-            if (result != null) {
-                cut = result.lastIndexOf('/');
-            }
-            if (cut != -1) {
-                if (result != null) {
-                    result = result.substring(cut + 1);
-                }
-            }
+        return null;
+    }
+
+    public static String getFileName(Uri uri) {
+        if (uri == null) return null;
+        String fileName = null;
+        String path = uri.getPath();
+        int cut = path.lastIndexOf('/');
+        if (cut != -1) {
+            fileName = path.substring(cut + 1);
+        }
+        return fileName;
+    }
+
+    public static void copy(Context context, Uri srcUri, File dstFile) {
+        try {
+            InputStream inputStream = context.getContentResolver().openInputStream(srcUri);
+            if (inputStream == null) return;
+            OutputStream outputStream = new FileOutputStream(dstFile);
+            IOUtils.copyStream(inputStream, outputStream);
+            inputStream.close();
+            outputStream.close();
+        } catch (IOException e) {
+            e.printStackTrace();
         }
-        return result;
     }
 
 
@@ -2201,6 +2255,22 @@
          * delete_status : true
          */
 
+        for(int i=0;i<photoIdPicBeans.size();i++){
+
+            if(photoIdPicBeans.get(i).getPhoto_id_pic()!=null&&!photoIdPicBeans.get(i).getPhoto_id_pic().isEmpty()){
+
+                photoIdPic = photoIdPicBeans.get(i).getPhoto_id_pic();
+            }
+        }
+
+        for(int i=0;i<photoIdPicBeans.size();i++){
+
+            if(photoIdPicBeans.get(i).getPhoto_id_pic()!=null&&!photoIdPicBeans.get(i).getPhoto_id_pic().isEmpty()){
+
+                photoIdPic = photoIdPicBeans.get(i).getPhoto_id_pic();
+            }
+        }
+
         SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy hh:mm aa", Locale.getDefault());
         String currentDateandTime = sdf.format(new Date());
         VendorRegisterFormCreateRequest vendorRegisterFormCreateRequest = new VendorRegisterFormCreateRequest();
@@ -2473,7 +2543,7 @@
 
 
                 // Thoroughfare seems to be the street name without numbers
-               String street = address.getThoroughfare();
+                String street = address.getThoroughfare();
 
 
             }
Index: .idea/deploymentTargetDropDown.xml
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
deleted file mode 100644
--- a/.idea/deploymentTargetDropDown.xml	(revision f1734ca40ba206b2d8b7b0e5c5470841991c7822)
+++ /dev/null	(revision f1734ca40ba206b2d8b7b0e5c5470841991c7822)
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="deploymentTargetDropDown">
-    <runningDeviceTargetSelectedWithDropDown>
-      <Target>
-        <type value="RUNNING_DEVICE_TARGET" />
-        <deviceKey>
-          <Key>
-            <type value="SERIAL_NUMBER" />
-            <value value="J6AAGF051071784" />
-          </Key>
-        </deviceKey>
-      </Target>
-    </runningDeviceTargetSelectedWithDropDown>
-    <timeTargetWasSelectedWithDropDown value="2021-09-24T14:33:17.643712100Z" />
-  </component>
-</project>
\ No newline at end of file
Index: app/src/main/java/com/petfolio/infinituss/doctor/DoctorBusinessInfoActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.petfolio.infinituss.doctor;\r\rimport android.Manifest;\rimport android.annotation.SuppressLint;\rimport android.app.Activity;\rimport android.app.DatePickerDialog;\rimport android.app.Dialog;\rimport android.content.Context;\rimport android.content.Intent;\rimport android.content.IntentSender;\rimport android.content.pm.PackageManager;\rimport android.database.Cursor;\rimport android.graphics.Bitmap;\rimport android.graphics.Canvas;\rimport android.graphics.Color;\rimport android.graphics.Matrix;\rimport android.graphics.drawable.ColorDrawable;\rimport android.location.Address;\rimport android.location.Geocoder;\rimport android.location.Location;\rimport android.location.LocationManager;\rimport android.net.Uri;\rimport android.os.Build;\rimport android.os.Bundle;\rimport android.os.Environment;\rimport android.os.Handler;\rimport android.provider.MediaStore;\rimport android.provider.OpenableColumns;\rimport android.util.Log;\rimport android.view.View;\rimport android.view.WindowManager;\rimport android.widget.AdapterView;\rimport android.widget.ArrayAdapter;\rimport android.widget.Button;\rimport android.widget.EditText;\rimport android.widget.ImageView;\rimport android.widget.LinearLayout;\rimport android.widget.Spinner;\rimport android.widget.TextView;\rimport android.widget.Toast;\r\rimport androidx.annotation.NonNull;\rimport androidx.annotation.Nullable;\rimport androidx.appcompat.app.AlertDialog;\rimport androidx.appcompat.app.AppCompatActivity;\rimport androidx.cardview.widget.CardView;\rimport androidx.core.app.ActivityCompat;\rimport androidx.core.content.ContextCompat;\rimport androidx.recyclerview.widget.DefaultItemAnimator;\rimport androidx.recyclerview.widget.GridLayoutManager;\rimport androidx.recyclerview.widget.LinearLayoutManager;\rimport androidx.recyclerview.widget.RecyclerView;\r\rimport com.bumptech.glide.Glide;\rimport com.bumptech.glide.load.engine.DiskCacheStrategy;\rimport com.bumptech.glide.request.RequestOptions;\rimport com.github.gcacace.signaturepad.views.SignaturePad;\rimport com.google.android.gms.common.ConnectionResult;\rimport com.google.android.gms.common.api.GoogleApiClient;\rimport com.google.android.gms.common.api.PendingResult;\rimport com.google.android.gms.common.api.Status;\rimport com.google.android.gms.location.LocationListener;\rimport com.google.android.gms.location.LocationRequest;\rimport com.google.android.gms.location.LocationServices;\rimport com.google.android.gms.location.LocationSettingsRequest;\rimport com.google.android.gms.location.LocationSettingsResult;\rimport com.google.android.gms.location.LocationSettingsStatusCodes;\rimport com.google.android.gms.maps.GoogleMap;\rimport com.google.android.gms.maps.OnMapReadyCallback;\rimport com.google.android.gms.maps.SupportMapFragment;\rimport com.google.gson.Gson;\rimport com.petfolio.infinituss.R;\rimport com.petfolio.infinituss.activity.LoginActivity;\rimport com.petfolio.infinituss.activity.location.SetLocationDoctorNewActivity;\rimport com.petfolio.infinituss.adapter.AddCertPdfAdapter;\rimport com.petfolio.infinituss.adapter.AddEducAdapter;\rimport com.petfolio.infinituss.adapter.AddExpAdapter;\rimport com.petfolio.infinituss.adapter.AddGovtIdPdfAdapter;\rimport com.petfolio.infinituss.adapter.AddImageListAdapter;\rimport com.petfolio.infinituss.adapter.AddPhotoIDPdfAdapter;\rimport com.petfolio.infinituss.adapter.PetsHandledListAdapter;\rimport com.petfolio.infinituss.adapter.SpecTypesListAdapter;\rimport com.petfolio.infinituss.api.APIClient;\rimport com.petfolio.infinituss.api.RestApiInterface;\rimport com.petfolio.infinituss.appUtils.FileUtil;\rimport com.petfolio.infinituss.interfaces.PetHandledTypeCheckedListener;\rimport com.petfolio.infinituss.interfaces.SpecTypeChckedListener;\rimport com.petfolio.infinituss.doctor.DoctorBusinessInfoActivity;\rimport com.petfolio.infinituss.doctor.DoctorBusinessInfoActivity;\rimport com.petfolio.infinituss.requestpojo.DocBusInfoUploadRequest;\rimport com.petfolio.infinituss.responsepojo.AddPetTypeListModel;\rimport com.petfolio.infinituss.responsepojo.AddSpecTypeListModel;\rimport com.petfolio.infinituss.responsepojo.DocBusInfoUploadResponse;\rimport com.petfolio.infinituss.responsepojo.DropDownListResponse;\rimport com.petfolio.infinituss.responsepojo.FileUploadResponse;\rimport com.petfolio.infinituss.service.GPSTracker;\rimport com.petfolio.infinituss.sessionmanager.SessionManager;\rimport com.petfolio.infinituss.utils.ConnectionDetector;\rimport com.petfolio.infinituss.utils.RestUtils;\rimport com.petfolio.infinituss.utils.ScalingUtilities;\rimport com.theartofdev.edmodo.cropper.CropImage;\rimport com.wang.avi.AVLoadingIndicatorView;\r\rimport java.io.ByteArrayOutputStream;\rimport java.io.File;\rimport java.io.FileNotFoundException;\rimport java.io.FileOutputStream;\rimport java.io.IOException;\rimport java.io.OutputStream;\rimport java.text.SimpleDateFormat;\rimport java.util.ArrayList;\rimport java.util.Arrays;\rimport java.util.Calendar;\rimport java.util.Date;\rimport java.util.HashMap;\rimport java.util.List;\rimport java.util.Locale;\rimport java.util.Objects;\r\rimport butterknife.BindView;\rimport butterknife.ButterKnife;\rimport cn.pedant.SweetAlert.SweetAlertDialog;\rimport es.dmoral.toasty.Toasty;\rimport okhttp3.MediaType;\rimport okhttp3.MultipartBody;\rimport okhttp3.RequestBody;\rimport retrofit2.Call;\rimport retrofit2.Callback;\rimport retrofit2.Response;\r\rpublic class DoctorBusinessInfoActivity extends AppCompatActivity implements View.OnClickListener, SpecTypeChckedListener, PetHandledTypeCheckedListener ,\r        OnMapReadyCallback, GoogleApiClient.ConnectionCallbacks,\r        GoogleApiClient.OnConnectionFailedListener, LocationListener {\r\r\r    private String TAG = \"DoctorBusinessInfo\";\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edtx_clinic_name)\r    EditText edittext_clinic_name;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edtx_educ_nme)\r    EditText edittext_education_name;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.txt_edu_yr)\r    TextView txt_edu_yr;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edtx_comp_nme)\r    EditText edittext_company_name;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edtx_from)\r    EditText edittext_from;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edtx_to)\r    EditText edittext_to;\r\r\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.txt_clinic_addr)\r    TextView txt_clinic_addr;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.txt_location_change)\r    TextView txt_location_change;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edtx_clinic_pic_choose)\r    EditText edtx_clinic_pic_choose;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edtx_clinic_certif_choose)\r    EditText edtx_cert_pic_choose;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edtx_clinic_govtid_choose)\r    EditText edtx_govt_pic_choose;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edtx_clinic_photoid_choose)\r    EditText edtx_photo_pic_choose;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.buttonAddedu)\r    Button buttonAddedu;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.buttonAddexpr)\r    Button buttonAddexpr;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.buttonsubmit)\r    Button buttonsubmit;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcyrl_added_edu)\r    RecyclerView recylerView_added_education;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_added_expr)\r    RecyclerView recylerView_added_experience;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_speclist)\r    RecyclerView recylerView_specializationlist;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_pettypelist)\r    RecyclerView recylerView_pettypelist;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_choosen_clinic_img)\r    RecyclerView recylerView_choosen_clinic_images;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_choosen_certificate_img)\r    RecyclerView recylerView_choosen_certificate_images;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_choosen_govtid_images)\r    RecyclerView recylerView_choosen_govtid_images;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_choosen_photoid_img)\r    RecyclerView recylerView_choosen_photo_id_images;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.cdvw_certificate)\r    CardView material_cardview_certificate;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.img_bck)\r    ImageView img_bck;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.avi_indicator)\r    AVLoadingIndicatorView avi_indicator;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.spr_communicationtype)\r    Spinner spr_communicationtype;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edtx_service_charge_amount)\r    EditText edtx_service_charge_amount;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edtx_clinic_number)\r    EditText edtx_clinic_number;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edtx_doctor_id)\r    EditText edtx_doctor_id;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edtx_about_doctor)\r    EditText edtx_about_doctor;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.lldigitalsignature)\r    LinearLayout lldigitalsignature;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.llheaderdigitalsignature)\r    LinearLayout llheaderdigitalsignature;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.ivdigitalsignature)\r    ImageView ivdigitalsignature;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.signaturePad)\r    SignaturePad mSignaturePad;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.clear_button)\r    Button mClearButton;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.save_button)\r    Button mSaveButton;\r\r\r\r\r\r\r    public String digitalSignatureServerUrlImagePath;\r\r\r    String StoredPathDigitalSignature =\"\";\r\r\r    HashMap<Integer,String> hashMap_Communicationvalue = new HashMap<>();\r    private int communicationvalue;\r\r    String clinic_name,education_name,education_yr,cmpynm,from,to,clinic_addr,clinic_about_dr,clinic_dr_id,clinic_number;\r    int consultancy_fees;\r\r    List<DocBusInfoUploadRequest.EducationDetailsBean> educationDetailsBeans = new ArrayList<>();\r\r    List<DocBusInfoUploadRequest.ExperienceDetailsBean> experienceDetailsBeans = new ArrayList<>();\r\r    List<DocBusInfoUploadRequest.SpecializationBean> specializationBeans = new ArrayList<>();\r\r    List<DocBusInfoUploadRequest.PetHandledBean> petHandledBeans = new ArrayList<>();\r\r    List<FileUploadResponse> clinicpicUploadResponse = new ArrayList<>();\r\r    ArrayList<FileUploadResponse> certificatePicResponse = new ArrayList<>();\r\r    ArrayList<FileUploadResponse>  govtIdPicResponse = new ArrayList<>();\r\r    ArrayList<FileUploadResponse> photoIdPicResponse = new ArrayList<>();\r\r    private List<DropDownListResponse.DataBean.PetHandleBean> pethandleList;\r\r    private List<DropDownListResponse.DataBean.SpecialzationBean> petSpecilaziationList;\r\r    private final List<DocBusInfoUploadRequest.ClinicPicBean> clinicPicBeans = new ArrayList<>();\r\r    private final List<DocBusInfoUploadRequest.CertificatePicBean> certificatePicBeans = new ArrayList<>();\r\r    private final List<DocBusInfoUploadRequest.GovtIdPicBean> govtIdPicBeans = new ArrayList<>();\r\r    private final List<DocBusInfoUploadRequest.PhotoIdPicBean> photoIdPicBeans = new ArrayList<>();\r\r    ArrayList<AddSpecTypeListModel> addSpecTypeListModels = new ArrayList<>();\r\r    ArrayList<AddPetTypeListModel> addPetTypeListModels = new ArrayList<>();\r\r    AddEducAdapter addEducAdapter;\r\r    AddExpAdapter addExpAdapter;\r\r    SpecTypesListAdapter specTypesListAdapter;\r\r    AddImageListAdapter addImageListAdapter;\r\r    AddCertPdfAdapter addCertPdfAdapter;\r\r    PetsHandledListAdapter petsHandledListAdapter;\r\r    AddGovtIdPdfAdapter addGovtIdPdfAdapter;\r\r    AddPhotoIDPdfAdapter addPhotoIDPdfAdapter;\r\r\r\r\r    MultipartBody.Part filePart,certPart,govIdPart,photIDPart,siganaturePart;\r\r    private static final int REQUEST_CLINIC_CAMERA_PERMISSION_CODE = 785 ;\r\r    private static final int REQUEST_READ_CLINIC_PDF_PERMISSION = 787 ;\r\r    private static final int REQUEST_READ_GOVT_ID_PDF_PERMISSION = 788;\r\r    private static final int REQUEST_READ_PHOTO_ID_PDF_PERMISSION = 789;\r\r    private static final int REQUEST_READ_CLINIC_PIC_PERMISSION = 786;\r\r    private static final int REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE = 790;\r\r    private static final int REQUEST_READ_CERTIFICATE_PIC_PERMISSION = 791;\r\r    private static final int REQUEST_GOVTID_CAMERA_PERMISSION_CODE = 792;\r\r    private static final int REQUEST_READ_GOVTID_PIC_PERMISSION = 793;\r\r    private static final int REQUEST_PHOTOID_CAMERA_PERMISSION_CODE = 794;\r\r    private static final int REQUEST_READ_PHOTOID_PIC_PERMISSION = 795;\r\r\r\r\r    private static final int SELECT_CLINIC_CAMERA = 1000 ;\r\r    private static final int SELECT_CLINIC_PICTURE = 1001 ;\r\r    private static final int SELECT_CERT_PDF = 1002;\r\r    private static final int SELECT_GOVTID_PDF = 1003;\r\r    private static final int SELECT_PHOTOID_PDF = 1004;\r\r    private static final int SELECT_CERTIFICATE_CAMERA = 1005;\r\r    private static final int SELECT_CERTIFICATE_PICTURE = 1006;\r\r    private static final int SELECT_GOVTID_CAMERA = 1007;\r\r    private static final int SELECT_GOVTID_PICTURE = 1008;\r\r    private static final int SELECT_PHOTOID_CAMERA = 1009;\r\r    private static final int SELECT_PHOTOID_PICTURE = 1010;\r\r\r\r    String start_date,dr_title, dr_name,user_id,currentDateandTime;\r\r    String status=\"Not verified\",FinalDateTime;\r\r    boolean profile_status = true;\r    private String getfromdate;\r\r    private static final int REQUEST_CHECK_SETTINGS_GPS = 0x1;\r\r\r\r    private GoogleApiClient googleApiClient;\r    Location mLastLocation;\r    public static final int MY_PERMISSIONS_REQUEST_LOCATION = 99;\r    private SupportMapFragment mapFragment;\r    private double latitude;\r    private double longitude;\r\r    private List<DropDownListResponse.DataBean.CommunicationTypeBean> communicationtypList;\r    private String strcommunicationtype;\r    private String strMyImagePath;\r    private Dialog alertDialog;\r    AlertDialog.Builder alertDialogBuilder;\r    private String latlng;\r    private String CityName;\r    private String AddressLine;\r    private boolean isSetAddress = false;\r\r    /*Crop Functonality */\r\r    private boolean isAddClinicPic = false;\r    private boolean isAddCertfProof = false;\r    private boolean isAddGovtIdproof = false;\r    private boolean isAddPhotoIDproof = false;\r\r    private Dialog dialog;\r\r    @SuppressLint(\"LogNotTimber\")\r    @Override\r    protected void onCreate(Bundle savedInstanceState) {\r        super.onCreate(savedInstanceState);\r        setContentView(R.layout.activity_doctor_business_info);\r        ButterKnife.bind(this);\r        SessionManager session = new SessionManager(getApplicationContext());\r        HashMap<String, String> user = session.getProfileDetails();\r        dr_name = user.get(SessionManager.KEY_FIRST_NAME);\r        String lastname = user.get(SessionManager.KEY_LAST_NAME);\r        dr_name = dr_name+\" \"+lastname;\r        user_id = user.get(SessionManager.KEY_ID);\r        dr_title = \"Dr\";\r\r\r        Bundle extras = getIntent().getExtras();\r        if (extras != null) {\r            latlng = String.valueOf(getIntent().getSerializableExtra(\"latlng\"));\r            Log.w(TAG,\"latlng-->\"+latlng);\r            if(latlng != null && !latlng.equalsIgnoreCase(\"null\")){\r                String newString = latlng.replace(\"lat/lng:\", \"\");\r                Log.w(TAG,\"latlng==\"+newString);\r\r                String latlngs = newString.trim().replaceAll(\"\\\\(\", \"\").replaceAll(\"\\\\)\",\"\").trim();\r                Log.w(TAG,\"latlngs==\"+latlngs);\r                String[] separated = latlngs.split(\",\");\r                String lat = separated[0];\r                String lon = separated[1];\r\r                latitude = Double.parseDouble(lat);\r                longitude = Double.parseDouble(lon);\r            }\r            CityName = extras.getString(\"cityname\");\r            AddressLine = extras.getString(\"address\");\r            String postalCode = extras.getString(\"PostalCode\");\r            Log.w(TAG,\"latitude : \"+latitude+\" \"+\"longitude : \"+longitude+\" CityName : \"+CityName+\" AddressLine : \"+AddressLine);\r            if(AddressLine != null) {\r                txt_clinic_addr.setText(AddressLine);\r                isSetAddress = true;\r            }\r\r        }\r\r        if (mapFragment == null) {\r            mapFragment = SupportMapFragment.newInstance();\r            mapFragment.getMapAsync(this);\r        }\r        googleApiConnected();\r        LocationRequest locationRequest = LocationRequest.create();\r        locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);\r        locationRequest.setInterval(1000); // 10 seconds\r        locationRequest.setFastestInterval(1000); // 5 seconds\r\r\r\r\r\r        avi_indicator.setVisibility(View.GONE);\r\r        buttonAddedu.setOnClickListener(this);\r\r        buttonAddexpr.setOnClickListener(this);\r\r        buttonsubmit.setOnClickListener(this);\r\r        edittext_from.setOnClickListener(this);\r\r        edittext_to.setOnClickListener(this);\r\r        txt_edu_yr.setOnClickListener(this);\r\r        edtx_clinic_pic_choose.setOnClickListener(this);\r\r        edtx_cert_pic_choose.setOnClickListener(this);\r\r        edtx_govt_pic_choose.setOnClickListener(this);\r\r        edtx_photo_pic_choose.setOnClickListener(this);\r        img_bck.setOnClickListener(this);\r        txt_location_change.setOnClickListener(this);\r\r\r        if (new ConnectionDetector(DoctorBusinessInfoActivity.this).isNetworkAvailable(DoctorBusinessInfoActivity.this)) {\r\r            dropDownListResponseCall();\r\r        }\r\r        /* ************ Adding Education ************** */\r\r        recylerView_added_education.setHasFixedSize(true);\r\r        recylerView_added_education.setNestedScrollingEnabled(false);\r\r        LinearLayoutManager layoutManager = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.VERTICAL, false);\r\r        recylerView_added_education.setLayoutManager(layoutManager);\r\r        addEducAdapter = new AddEducAdapter(getApplicationContext(), educationDetailsBeans);\r\r        recylerView_added_education.setAdapter(addEducAdapter);\r\r\r        /* ************ Adding Experience ************** */\r\r        recylerView_added_experience.setHasFixedSize(true);\r\r        recylerView_added_experience.setNestedScrollingEnabled(false);\r\r        LinearLayoutManager layoutManager1 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.VERTICAL, false);\r\r        recylerView_added_experience.setLayoutManager(layoutManager1);\r\r        addExpAdapter = new AddExpAdapter(getApplicationContext(), experienceDetailsBeans);\r\r        recylerView_added_experience.setAdapter(addExpAdapter);\r\r\r        /* ************ Adding Images ************** */\r\r        recylerView_choosen_clinic_images.setHasFixedSize(true);\r\r        recylerView_choosen_clinic_images.setNestedScrollingEnabled(false);\r\r        LinearLayoutManager layoutManager2 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);\r\r        recylerView_choosen_clinic_images.setLayoutManager(layoutManager2);\r\r\r        /* ************ Adding Certificate ************** */\r\r        recylerView_choosen_certificate_images.setHasFixedSize(true);\r\r        recylerView_choosen_certificate_images.setNestedScrollingEnabled(false);\r\r        LinearLayoutManager layoutManager3 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);\r\r        recylerView_choosen_certificate_images.setLayoutManager(layoutManager3);\r\r\r        /* ************ Adding GovtID ************** */\r\r        recylerView_choosen_govtid_images.setHasFixedSize(true);\r\r        recylerView_choosen_govtid_images.setNestedScrollingEnabled(false);\r\r        LinearLayoutManager layoutManager4 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);\r\r        recylerView_choosen_govtid_images.setLayoutManager(layoutManager4);\r\r\r\r        /* ************ Adding PhotoID ************** */\r\r        recylerView_choosen_photo_id_images.setHasFixedSize(true);\r\r        recylerView_choosen_photo_id_images.setNestedScrollingEnabled(false);\r\r        LinearLayoutManager layoutManager5 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);\r\r        recylerView_choosen_photo_id_images.setLayoutManager(layoutManager5);\r\r\r        /* *************** Get Current Date and Time ************************ */\r\r        SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r         currentDateandTime = sdf.format(new Date());\r\r\r        spr_communicationtype.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r            @Override\r            public void onItemSelected(AdapterView<?> parent, View view, int arg2, long arg3) {\r                ((TextView) parent.getChildAt(0)).setTextColor(getResources().getColor(R.color.green));\r                 strcommunicationtype = spr_communicationtype.getSelectedItem().toString();\r                 Log.w(TAG,\"communicationtype : \"+strcommunicationtype+\" communicationvalue :\"+communicationvalue);\r\r\r            }\r\r            @Override\r            public void onNothingSelected(AdapterView<?> arg0) {\r                // TODO Auto-generated method stub\r\r            }\r        });\r\r        mSignaturePad.setOnSignedListener(new SignaturePad.OnSignedListener() {\r            @Override\r            public void onStartSigning() {\r                //Toast.makeText(DoctorBusinessInfoActivity.this, \"OnStartSigning\", Toast.LENGTH_SHORT).show();\r            }\r\r            @Override\r            public void onSigned() {\r                mSaveButton.setEnabled(true);\r                mClearButton.setEnabled(true);\r            }\r\r            @Override\r            public void onClear() {\r                mSaveButton.setEnabled(false);\r                mClearButton.setEnabled(false);\r            }\r        });\r        mClearButton.setOnClickListener(new View.OnClickListener() {\r            @Override\r            public void onClick(View view) {\r                mSignaturePad.clear();\r            }\r        });\r        mSaveButton.setOnClickListener(new View.OnClickListener() {\r            @Override\r            public void onClick(View view) {\r                Bitmap signatureBitmap = mSignaturePad.getSignatureBitmap();\r                Log.w(TAG,\"signatureBitmap\"+signatureBitmap);\r               // Bitmap getTransparentSignatureBitmap = mSignaturePad.getTransparentSignatureBitmap();\r               // Log.w(TAG,\"getTransparentSignatureBitmap\"+getTransparentSignatureBitmap);\r\r\r\r               // Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get(\"data\");\r\r                File file = new File(getFilesDir(), \"DoctorSignature\" + \".jpg\");\r\r                OutputStream os;\r                try {\r                    os = new FileOutputStream(file);\r                    if (signatureBitmap != null) {\r                        signatureBitmap.compress(Bitmap.CompressFormat.JPEG, 100, os);\r                    }\r                    os.flush();\r                    os.close();\r                } catch (Exception e) {\r                    Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r                }\r\r                RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\r                siganaturePart = MultipartBody.Part.createFormData(\"sampleFile\",  user_id+currentDateandTime+file.getName(), requestFile);\r\r                uploadDigitalSignatureImageRequest();\r\r\r\r/*\r                if (addJpgSignatureToGallery(signatureBitmap)) {\r                    //Toast.makeText(Doctor_Profile_Activity.this, \"Signature saved into the Gallery\", Toast.LENGTH_SHORT).show();\r                } else {\r                   // Toast.makeText(Doctor_Profile_Activity.this, \"Unable to store the signature\", Toast.LENGTH_SHORT).show();\r                }*/\r\r            }\r        });\r        llheaderdigitalsignature.setVisibility(View.GONE);\r        lldigitalsignature.setOnClickListener(new View.OnClickListener() {\r            @Override\r            public void onClick(View v) {\r                llheaderdigitalsignature.setVisibility(View.VISIBLE);\r\r            }\r        });\r\r\r    }\r    @SuppressLint(\"LogNotTimber\")\r    public void dropDownListResponseCall(){\r\r        avi_indicator.setVisibility(View.VISIBLE);\r        avi_indicator.smoothToShow();\r        //Creating an object of our api interface\r        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);\r        Call<DropDownListResponse> call = apiInterface.dropDownListResponseCall(RestUtils.getContentType());\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\r        call.enqueue(new Callback<DropDownListResponse>() {\r            @SuppressLint(\"LogNotTimber\")\r            @Override\r            public void onResponse(@NonNull Call<DropDownListResponse> call, @NonNull Response<DropDownListResponse> response) {\r                avi_indicator.smoothToHide();\r\r\r                if (response.body() != null) {\r                    if(200 == response.body().getCode()){\r                        Log.w(TAG,\"DropDownListResponse\" + new Gson().toJson(response.body()));\r\r                        if(response.body().getData().getPet_handle() != null) {\r                            pethandleList = response.body().getData().getPet_handle();\r                        }\r                        if(response.body().getData().getSpecialzation() != null) {\r                            petSpecilaziationList = response.body().getData().getSpecialzation();\r                        }\r                        if(response.body().getData().getCommunication_type() != null) {\r                            communicationtypList = response.body().getData().getCommunication_type();\r                        }\r\r                        if(communicationtypList != null && communicationtypList.size()>0){\r                            setCommunicationtype(communicationtypList);\r                        }\r\r                        if(pethandleList != null && pethandleList.size()>0){\r                            setPetHandle(pethandleList);\r                        }\r\r                        Log.w(TAG,\"petSpecilaziationList : \"+new Gson().toJson(petSpecilaziationList));\r                        if(petSpecilaziationList != null && petSpecilaziationList.size()>0){\r                            setSpecList(petSpecilaziationList);\r\r                        }\r\r                    }\r\r                }\r\r            }\r\r            @Override\r            public void onFailure(@NonNull Call<DropDownListResponse> call, @NonNull  Throwable t) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"DropDownListResponse flr\"+t.getMessage());\r            }\r        });\r\r    }\r    @SuppressLint(\"LogNotTimber\")\r    private void setCommunicationtype(List<DropDownListResponse.DataBean.CommunicationTypeBean> communicationtypList) {\r        ArrayList<String> pettypeArrayList = new ArrayList<>();\r        pettypeArrayList.add(\"Select Communication Type\");\r        for (int i = 0; i < communicationtypList.size(); i++) {\r\r            String petType = communicationtypList.get(i).getCom_type();\r            hashMap_Communicationvalue.put(communicationtypList.get(i).getValue(), communicationtypList.get(i).getCom_type());\r\r            Log.w(TAG,\"Communication Type-->\"+petType);\r            pettypeArrayList.add(petType);\r\r            ArrayAdapter<String> spinnerArrayAdapter = new ArrayAdapter<>(DoctorBusinessInfoActivity.this, R.layout.spinner_item, pettypeArrayList);\r            spinnerArrayAdapter.setDropDownViewResource(R.layout.spinner_item); // The drop down view\r            spr_communicationtype.setAdapter(spinnerArrayAdapter);\r\r\r        }\r    }\r    private void setPetHandle(List<DropDownListResponse.DataBean.PetHandleBean> petHandle) {\r\r        recylerView_pettypelist.setLayoutManager(new GridLayoutManager(this, 2));\r\r        recylerView_pettypelist.setItemAnimator(new DefaultItemAnimator());\r\r        petsHandledListAdapter = new PetsHandledListAdapter(getApplicationContext(), petHandle,this);\r\r        recylerView_pettypelist.setAdapter(petsHandledListAdapter);\r\r\r    }\r    private void setSpecList(List<DropDownListResponse.DataBean.SpecialzationBean> SpecilaziationList) {\r        recylerView_specializationlist.setLayoutManager(new GridLayoutManager(this, 2));\r        recylerView_specializationlist.setItemAnimator(new DefaultItemAnimator());\r        specTypesListAdapter = new SpecTypesListAdapter(DoctorBusinessInfoActivity.this, SpecilaziationList,this);\r        recylerView_specializationlist.setAdapter(specTypesListAdapter);\r\r\r    }\r    @SuppressLint(\"LogNotTimber\")\r    private void getEndDate(){\r        String[] getfrom = getfromdate.split(\"-\");\r        Log.w(\"split_date\", Arrays.toString(getfrom));\r        int year,month,day;\r        year= Integer.parseInt(getfrom[0]);\r        month = Integer.parseInt(getfrom[1]);\r        int month1 = month -1 ;\r        day = Integer.parseInt(getfrom[2]);\r        Calendar c = Calendar.getInstance();\r        c.set(year,month1,day+1);\r        DatePickerDialog datePickerDialog = new DatePickerDialog(this,\r                (view, year1, month2, dayOfMonth) -> {\r\r                    //String date = year1 + \"-\" + (month2 + 1) + \"-\" + dayOfMonth;\r                    String date = year1+\"\";\r\r                    setEndDate(date);\r\r                },\r        year,\r        month1,\r        day);\r        datePickerDialog.getDatePicker().setMinDate(c.getTimeInMillis());\r        datePickerDialog.getDatePicker().setMaxDate(new Date().getTime());\r        datePickerDialog.show();\r\r\r    }\r    private void setEndDate(String date) {\r\r        edittext_to.setText(date.trim());\r\r    }\r    private void getStartDate() {\r\r        Calendar c = Calendar.getInstance();\r        int mYear = c.get(Calendar.YEAR);\r        int mMonth = c.get(Calendar.MONTH);\r        int mDay = c.get(Calendar.DAY_OF_MONTH);\r\r\r        DatePickerDialog datePickerDialog = new DatePickerDialog(this,\r                (view, year, monthOfYear, dayOfMonth) -> {\r\r                    getfromdate = year + \"-\" + (monthOfYear + 1) + \"-\" + dayOfMonth;\r\r                  start_date = year+\"\";\r\r                  setStartDate(start_date);\r\r                }, mYear, mMonth, mDay);\r\r        datePickerDialog.getDatePicker().setMaxDate(System.currentTimeMillis());\r\r        datePickerDialog.show();\r    }\r    private void setStartDate(String date) {\r\r        edittext_from.setText(date.trim());\r\r    }\r    private void getEduYear() {\r\r\r        // Get Current Date\r        final Calendar c = Calendar.getInstance();\r        int mYear = c.get(Calendar.YEAR);\r        int mMonth = c.get(Calendar.MONTH);\r        int mDay = c.get(Calendar.DAY_OF_MONTH);\r\r\r        DatePickerDialog datePickerDialog = new DatePickerDialog(this,\r                (view, year, monthOfYear, dayOfMonth) -> {\r\r                    String  date = String.valueOf(year);\r\r                    setEduYr(date);\r\r                }, mYear, mMonth, mDay);\r\r        datePickerDialog.getDatePicker().setMaxDate(System.currentTimeMillis());\r\r        datePickerDialog.show();\r\r\r\r    }\r    private void setEduYr(String date) {\r\r        txt_edu_yr.setText(date);\r    }\r    private void addExpr() {\r\r        cmpynm = edittext_company_name.getText().toString().trim();\r\r        from = edittext_from.getText().toString().trim();\r\r        to = edittext_to.getText().toString().trim();\r\r        int cmpynmlength = cmpynm.trim().length();\r\r        if(cmpynm.isEmpty()){\r\r           // edittext_company_name.setError(\"Please fill the Company name\");\r            Toasty.warning(getApplicationContext(), \"Please fill the Company name\", Toast.LENGTH_SHORT).show();\r\r\r        }\r\r        else if(from.isEmpty()){\r\r            //txt_edu_yr.setError(\"Please fill the Start Date\");\r\r            Toasty.warning(getApplicationContext(), \"Please fill the experience from year\", Toast.LENGTH_SHORT).show();\r\r\r        }\r\r        else if(to.isEmpty()){\r\r            //txt_edu_yr.setError(\"Please fill the End Date\");\r\r            Toasty.warning(getApplicationContext(), \"Please fill the experience to year\", Toast.LENGTH_SHORT).show();\r\r\r        }\r\r        else if(cmpynmlength>25){\r            //edittext_company_name.setError(\"The maximum length for an Company name is 25 characters \");\r            Toasty.warning(getApplicationContext(), \"The maximum length for an Company name is 25 characters\", Toast.LENGTH_SHORT).show();\r\r\r        }\r\r\r        else{\r            int start,end,yearsofexp = 0;\r            start = Integer.parseInt(from);\r            end = Integer.parseInt(to);\r            yearsofexp = end-start;\r            if(yearsofexp == 0){\r                yearsofexp = 1;\r            }\r\r            insertExpr(cmpynm,from,to,yearsofexp);\r            edittext_company_name.setText(\"\");\r            edittext_from.setText(\"\");\r            edittext_to.setText(\"\");\r\r        }\r\r\r\r    }\r    private void insertExpr(String cmpynm, String from, String to,int yearsofexp) {\r\r        if(experienceDetailsBeans.size()>=3){\r\r            Toasty.warning(getApplicationContext(),\"Sorry you cannot add more than 3\",Toast.LENGTH_SHORT).show();\r\r        }\r\r        else {\r            Toasty.success(getApplicationContext(),\"Experience added successfully\",Toast.LENGTH_SHORT).show();\r\r\r            experienceDetailsBeans.add(new DocBusInfoUploadRequest.ExperienceDetailsBean(cmpynm,from,to,yearsofexp));\r\r            addExpAdapter.notifyDataSetChanged();\r        }\r\r    }\r    private void addEduc() {\r\r        education_name = edittext_education_name.getText().toString().trim();\r\r        education_yr = txt_edu_yr.getText().toString().trim();\r\r        int edunmlength = education_name.trim().length();\r\r        int eduyrlength = education_yr.trim().length();\r\r        if(education_name.isEmpty()){\r           /* edittext_education_name.setError(\"Please fill the Education name\");\r            edittext_education_name.requestFocus();*/\r            Toasty.warning(getApplicationContext(),\"Please fill the Education name\",Toast.LENGTH_SHORT).show();\r\r\r        }\r        else if(education_yr.isEmpty()){\r           /* txt_edu_yr.setError(\"Please fill the Education year\");\r            txt_edu_yr.setFocusableInTouchMode(true);\r            txt_edu_yr.requestFocus();*/\r\r            Toasty.warning(getApplicationContext(),\"Please fill the Education year\",Toast.LENGTH_SHORT).show();\r\r\r        }\r\r        else if(edunmlength>25){\r            Toasty.warning(getApplicationContext(),\"The maximum length for an Education name is 25 characters\",Toast.LENGTH_SHORT).show();\r\r            /*edittext_education_name.setError(\"The maximum length for an Education name is 25 characters \");\r            edittext_education_name.requestFocus();*/\r\r        }\r\r        else if(eduyrlength>25){\r            Toasty.warning(getApplicationContext(),\"The maximum length for an Education year is 25 characters\",Toast.LENGTH_SHORT).show();\r\r          /*  txt_edu_yr.setError(\"The maximum length for an Education year is 25 characters \");\r            txt_edu_yr.requestFocus();*/\r\r        }\r\r       else{\r            insertEdu(education_name,education_yr);\r            edittext_education_name.setText(\"\");\r            txt_edu_yr.setText(\"\");\r\r        }\r\r\r\r    }\r    private void insertEdu(String education_name, String education_yr) {\r\r        if(educationDetailsBeans.size()>=3){\r\r            Toasty.warning(getApplicationContext(),\"Sorry you cannot add more than 3\",Toast.LENGTH_SHORT).show();\r\r\r        }\r\r        else {\r            Toasty.success(getApplicationContext(),\"Eductation added successfully\",Toast.LENGTH_SHORT).show();\r\r\r            educationDetailsBeans.add(new DocBusInfoUploadRequest.EducationDetailsBean(education_name,education_yr));\r\r            addEducAdapter.notifyDataSetChanged();\r        }\r    }\r    @SuppressLint(\"LogNotTimber\")\r    @Override\r    public void onItemSpecCheck(int position, String specValue, List<DropDownListResponse.DataBean.SpecialzationBean> spectypedataBeanList) {\r\r//        Toast.makeText(DoctorBusinessInfoActivity.this, position + specValue + \"checked!\", Toast.LENGTH_SHORT).show();\r\r            addSpecTypeListModels.add(new AddSpecTypeListModel(position,specValue));\r\r            DocBusInfoUploadRequest.SpecializationBean specializationBean = new DocBusInfoUploadRequest.SpecializationBean(specValue);\r            specializationBeans.add(specializationBean);\r\r            spectypedataBeanList.get(position).setSelected(true);\r\r            specTypesListAdapter.notifyDataSetChanged();\r\r            Log.w(TAG +\"added_spec_list\",new Gson().toJson(specializationBeans));\r\r\r\r    }\r    @SuppressLint(\"LogNotTimber\")\r    @Override\r    public void onItemSpecUnCheck(int position, String specValue) {\r        if(specValue != null){\r            if(specializationBeans != null){\r                for (int i = 0; i < specializationBeans.size(); i++)\r                    if (specializationBeans.get(i).getSpecialization().equalsIgnoreCase(specValue)) {\r                        specializationBeans.remove(i);\r                        Log.w(TAG, \"after removing list if\" + new Gson().toJson(specializationBeans));\r\r                    }\r\r            }\r\r\r\r        }\r    }\r    @Override\r    public void onItemPetCheck(int position, String pethandleValue, List<DropDownListResponse.DataBean.PetHandleBean> petHandleBeanLists) {\r\r            addPetTypeListModels.add(new AddPetTypeListModel(position,pethandleValue));\r\r            DocBusInfoUploadRequest.PetHandledBean petHandledBean = new DocBusInfoUploadRequest.PetHandledBean(pethandleValue);\r            petHandledBeans.add(petHandledBean);\r\r            petHandleBeanLists.get(position).setSelected(true);\r\r            petsHandledListAdapter.notifyDataSetChanged();\r\r\r\r\r    }\r    @SuppressLint(\"LogNotTimber\")\r    @Override\r    public void onItemPetUnCheck(int position, String pethandleValue) {\r        if(pethandleValue != null) {\r            if (petHandledBeans != null) {\r                for (int i = 0; i < petHandledBeans.size(); i++)\r                    if (petHandledBeans.get(i).getPet_handled().equalsIgnoreCase(pethandleValue)) {\r                        petHandledBeans.remove(i);\r                        Log.w(TAG, \"after removing list if\" + new Gson().toJson(petHandledBeans));\r\r                    }\r\r            }\r        }\r\r    }\r\r\r    private void chooseClinicImage() {\r\r        if(clinicPicBeans!=null&&clinicPicBeans.size()>=1){\r\r            Toasty.warning(getApplicationContext(), \"Sorry you can't Add more than 1\", Toast.LENGTH_SHORT).show();\r\r        }\r\r        else {\r/*            final CharSequence[] items = {\"Take Photo\", \"Choose from Library\", \"Cancel\"};\r            //AlertDialog.Builder alert=new AlertDialog.Builder(this);\r            AlertDialog.Builder builder = new AlertDialog.Builder(DoctorBusinessInfoActivity.this);\r            builder.setTitle(\"Choose option\");\r            builder.setItems(items, (dialog, item) -> {\r                if (items[item].equals(\"Take Photo\"))\r                {\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(DoctorBusinessInfoActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r                    }\r                    else\r                    {\r\r\r                        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\r                        startActivityForResult(intent, SELECT_CLINIC_CAMERA);\r                    }\r\r                }\r\r                else if (items[item].equals(\"Choose from Library\"))\r                {\r\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r                    }\r\r                    else{\r\r                        Intent intent = new Intent();\r                        intent.setType(\"image/*\");\r                        intent.setAction(Intent.ACTION_GET_CONTENT);\r                        startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_CLINIC_PICTURE);\r\r\r                    }\r                }\r\r                else if (items[item].equals(\"Cancel\")) {\r                    dialog.dismiss();\r                }\r            });\r            builder.show();*/\r\r\r\r            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(DoctorBusinessInfoActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r            {\r                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r            }\r\r            else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(DoctorBusinessInfoActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r            {\r                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r            }\r\r            else\r            {\r\r                isAddClinicPic = true;\r\r                isAddCertfProof = false;\r\r                isAddGovtIdproof = false;\r\r                isAddPhotoIDproof = false;\r\r                CropImage.activity().start(DoctorBusinessInfoActivity.this);\r\r                /*CropImage.activity().start(AddYourPetImageOlduserActivity.this);*/\r            }\r\r        }\r\r    }\r    @SuppressLint(\"LogNotTimber\")\r    private void uploadClinicImage() {\r\r        avi_indicator.show();\r\r        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\r        //RestApiInterface ApiService = RetrofitClient.getApiService();\r\r        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(filePart);\r\r//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());\r\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\r        call.enqueue(new Callback<FileUploadResponse>() {\r            @SuppressLint(\"LogNotTimber\")\r            @Override\r            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"Profpic\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                if (response.body() != null) {\r                    if (200 == response.body().getCode()) {\r\r                        isAddClinicPic = false;\r                       // FileUploadResponse fileUploadResponse = new FileUploadResponse(response.body().getStatus(),response.body().getMessage(),response.body().getData(),response.body().getCode());\r\r                        DocBusInfoUploadRequest.ClinicPicBean clinicPicBean = new DocBusInfoUploadRequest.ClinicPicBean(response.body().getData());\r\r                        clinicPicBeans.add(clinicPicBean);\r\r                        addImageListAdapter = new AddImageListAdapter(getApplicationContext(), clinicPicBeans);\r\r                        recylerView_choosen_clinic_images.setAdapter(addImageListAdapter);\r\r                    }\r\r                }\r\r\r            }\r\r            @Override\r            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r                // avi_indicator.smoothToHide();\r                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r            }\r        });\r\r\r    }\r    private void chooseCertPdf() {\r\r        if(certificatePicResponse!=null&&certificatePicResponse.size()>=1){\r\r            Toasty.warning(getApplicationContext(), \"Sorry you can't Add more than 1\", Toast.LENGTH_SHORT).show();\r\r        }\r\r        else {\r\r            final CharSequence[] items = {\"Select Image\", \"Select File\",\"Cancel\"};\r            //AlertDialog.Builder alert=new AlertDialog.Builder(this);\r            AlertDialog.Builder builder = new AlertDialog.Builder(DoctorBusinessInfoActivity.this);\r            builder.setTitle(\"Choose option\");\r            builder.setItems(items, (dialog, item) -> {\r                if (items[item].equals(\"Select Image\"))\r                {\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(DoctorBusinessInfoActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE);\r                    }\r\r                    else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CERTIFICATE_PIC_PERMISSION);\r                    }\r\r                    else{\r\r                        isAddCertfProof = true;\r\r                        isAddClinicPic = false;\r\r                        isAddGovtIdproof = false;\r\r                        isAddPhotoIDproof = false;\r\r                        CropImage.activity().start(DoctorBusinessInfoActivity.this);\r\r                    }\r                }\r\r                else if (items[item].equals(\"Select File\")){\r\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M   && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PDF_PERMISSION);\r                    }\r\r                    else{\r\r                        Intent intent = new Intent();\r                        intent.setType(\"application/pdf\");\r                        intent.setAction(Intent.ACTION_GET_CONTENT);\r                        startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_CERT_PDF);\r\r\r                    }\r\r\r                }\r\r                else if (items[item].equals(\"Cancel\")) {\r                    dialog.dismiss();\r                }\r            });\r            builder.show();\r\r        }\r\r    }\r    private void uploadCertPdf() {\r\r        avi_indicator.show();\r\r        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\r        //RestApiInterface ApiService = RetrofitClient.getApiService();\r\r        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(certPart);\r\r//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());\r\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\r        call.enqueue(new Callback<FileUploadResponse>() {\r            @Override\r            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"PdfFileLink\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                if (response.body() != null) {\r\r                    if (200 == response.body().getCode()) {\r\r                        isAddCertfProof = false;\r\r                        DocBusInfoUploadRequest.CertificatePicBean certificatePicBean = new DocBusInfoUploadRequest.CertificatePicBean(response.body().getData());\r\r                        certificatePicBeans.add(certificatePicBean);\r\r                        addCertPdfAdapter = new AddCertPdfAdapter(getApplicationContext(), certificatePicBeans);\r\r                        recylerView_choosen_certificate_images.setAdapter(addCertPdfAdapter);\r\r\r                    }\r\r                    }\r\r\r            }\r\r            @Override\r            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r                // avi_indicator.smoothToHide();\r                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r            }\r        });\r\r\r    }\r\r    private void uploadDigitalSignatureImageRequest() {\r        avi_indicator.show();\r        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(siganaturePart);\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r        call.enqueue(new Callback<FileUploadResponse>() {\r            @SuppressLint(\"LogNotTimber\")\r            @Override\r            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"Profpic\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                llheaderdigitalsignature.setVisibility(View.GONE);\r                mSignaturePad.clear();\r                Log.w(TAG,\"DigitalSignaturepic\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                // Log.w(TAG,\"Profile\"+ \"status \" + status);\r                if (response.body() != null && response.body().getCode() == 200) {\r                    if (response.body() != null) {\r                        digitalSignatureServerUrlImagePath = response.body().getData();\r                        Log.w(TAG, \"digitalSignatureServerUrlImagePath \" + digitalSignatureServerUrlImagePath);\r                        Calendar c = Calendar.getInstance();\r\r\r                        if (digitalSignatureServerUrlImagePath != null && !digitalSignatureServerUrlImagePath.isEmpty()) {\r\r                            Log.w(TAG,\"digitalSignatureServerUrlImagePath--->\"+digitalSignatureServerUrlImagePath);\r\r                            Glide\r                                    .with(getApplicationContext())\r                                    .load(digitalSignatureServerUrlImagePath)\r                                    .apply(new RequestOptions().override(600, 200))\r                                    .diskCacheStrategy(DiskCacheStrategy.ALL)\r                                    .into(ivdigitalsignature);\r\r\r\r                        }\r                        else{\r                            Glide.with(getApplicationContext())\r                                    .load(R.drawable.digital_signature)\r                                    .into(ivdigitalsignature);\r\r                        }\r\r\r\r                    } else {\r                        Log.w(TAG, \"digitalSignatureServerUrlImagePath \" + \"response body null part wotking \");\r                    }\r\r                }\r\r\r\r            }\r\r            @Override\r            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r                // avi_indicator.smoothToHide();\r                Log.w(TAG,\"DigitalSignaturepic\"+ \"On failure working\"+ t.getMessage());\r                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r            }\r        });\r\r\r    }\r\r    private void chooseGovIDPdf() {\r\r        if(govtIdPicResponse!=null&&govtIdPicResponse.size()>=1){\r\r            Toasty.warning(getApplicationContext(), \"Sorry you can't Add more than 1\", Toast.LENGTH_SHORT).show();\r\r        }\r\r        else {\r\r            final CharSequence[] items = {\"Select Image\", \"Select File\",\"Cancel\"};\r            //AlertDialog.Builder alert=new AlertDialog.Builder(this);\r            AlertDialog.Builder builder = new AlertDialog.Builder(DoctorBusinessInfoActivity.this);\r            builder.setTitle(\"Choose option\");\r            builder.setItems(items, (dialog, item) -> {\r                if (items[item].equals(\"Select Image\"))\r                {\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(DoctorBusinessInfoActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_GOVTID_CAMERA_PERMISSION_CODE);\r                    }\r                    else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVTID_PIC_PERMISSION);\r                    }\r\r                    else {\r\r                        isAddGovtIdproof = true;\r\r                        isAddClinicPic = false;\r\r                        isAddCertfProof = false;\r\r                        isAddPhotoIDproof = false;\r\r\r                        CropImage.activity().start(DoctorBusinessInfoActivity.this);\r\r                    }\r\r\r                }\r\r                else if (items[item].equals(\"Select File\")){\r\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M   && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVT_ID_PDF_PERMISSION);\r                    }\r\r                    else{\r\r                        Intent intent = new Intent();\r                        intent.setType(\"application/pdf\");\r                        intent.setAction(Intent.ACTION_GET_CONTENT);\r                        startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_GOVTID_PDF);\r\r\r                    }\r\r\r                }\r\r                else if (items[item].equals(\"Cancel\")) {\r                    dialog.dismiss();\r                }\r            });\r            builder.show();\r\r        }\r\r\r    }\r    @SuppressLint(\"LogNotTimber\")\r    private void uploadGovtIDPdf() {\r\r        avi_indicator.show();\r\r        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\r        //RestApiInterface ApiService = RetrofitClient.getApiService();\r\r        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(govIdPart);\r\r//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());\r\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\r        call.enqueue(new Callback<FileUploadResponse>() {\r            @SuppressLint(\"LogNotTimber\")\r            @Override\r            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"PdfFileLink\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                if (response.body() != null) {\r\r                    if (200 == response.body().getCode()) {\r\r                        isAddGovtIdproof = false;\r\r                        DocBusInfoUploadRequest.GovtIdPicBean govtIdPicBean = new DocBusInfoUploadRequest.GovtIdPicBean (response.body().getData());\r\r                        govtIdPicBeans.add(govtIdPicBean);\r\r                        addGovtIdPdfAdapter = new AddGovtIdPdfAdapter(getApplicationContext(), govtIdPicBeans);\r\r                        recylerView_choosen_govtid_images.setAdapter(addGovtIdPdfAdapter);\r\r                    }\r\r                }\r\r\r            }\r\r            @Override\r            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r                // avi_indicator.smoothToHide();\r                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r            }\r        });\r\r\r    }\r\r    private void choosePhotoIDPdf() {\r\r        if(photoIdPicResponse!=null&&photoIdPicResponse.size()>=1){\r\r            Toasty.warning(getApplicationContext(), \"Sorry you can't Add more than 1\", Toast.LENGTH_SHORT).show();\r\r        }\r\r        else {\r\r            final CharSequence[] items = {\"Select Image\", \"Select File\",\"Cancel\"};\r            //AlertDialog.Builder alert=new AlertDialog.Builder(this);\r            AlertDialog.Builder builder = new AlertDialog.Builder(DoctorBusinessInfoActivity.this);\r            builder.setTitle(\"Choose option\");\r            builder.setItems(items, (dialog, item) -> {\r                if (items[item].equals(\"Select Image\"))\r                {\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(DoctorBusinessInfoActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_PHOTOID_CAMERA_PERMISSION_CODE);\r                    }\r                    else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTOID_PIC_PERMISSION);\r                    }\r                    {\r                        isAddPhotoIDproof=true;\r\r                        isAddClinicPic = false;\r\r                        isAddCertfProof = false;\r\r                        isAddGovtIdproof = false;\r\r\r\r\r                        CropImage.activity().start(DoctorBusinessInfoActivity.this);\r\r                    }\r\r                }\r\r                else if (items[item].equals(\"Select File\")){\r\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M   && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTO_ID_PDF_PERMISSION);\r                    }\r\r                    else{\r\r                        Intent intent = new Intent();\r                        intent.setType(\"application/pdf\");\r                        intent.setAction(Intent.ACTION_GET_CONTENT);\r                        startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_PHOTOID_PDF);\r\r\r                    }\r\r\r                }\r\r                else if (items[item].equals(\"Cancel\")) {\r                    dialog.dismiss();\r                }\r            });\r            builder.show();\r\r        }\r\r\r\r    }\r    private void uploadPhotoIDPdf() {\r\r        avi_indicator.show();\r\r        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\r        //RestApiInterface ApiService = RetrofitClient.getApiService();\r\r        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(photIDPart);\r\r//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());\r\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\r        call.enqueue(new Callback<FileUploadResponse>() {\r            @Override\r            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"PdfFileLink\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                if (response.body() != null) {\r\r                    if (200 == response.body().getCode()) {\r\r                        isAddPhotoIDproof = false;\r\r                        DocBusInfoUploadRequest.PhotoIdPicBean photoIdPicBean = new DocBusInfoUploadRequest.PhotoIdPicBean(response.body().getData());\r\r                        photoIdPicBeans.add(photoIdPicBean);\r\r                        addPhotoIDPdfAdapter = new AddPhotoIDPdfAdapter(getApplicationContext(), photoIdPicBeans);\r\r                        recylerView_choosen_photo_id_images.setAdapter(addPhotoIDPdfAdapter);\r\r                    }\r\r                }\r\r\r\r\r            }\r\r            @Override\r            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r                // avi_indicator.smoothToHide();\r                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r            }\r        });\r\r\r    }\r\r    private void checkValidation() {\r\r        if (ContextCompat.checkSelfPermission(this,\r                Manifest.permission.ACCESS_FINE_LOCATION)\r                != PackageManager.PERMISSION_GRANTED) {\r\r            ActivityCompat.requestPermissions(this,\r                    new String[]{Manifest.permission.ACCESS_FINE_LOCATION},\r                    MY_PERMISSIONS_REQUEST_LOCATION);\r        }\r\r        else {\r\r                clinic_name = edittext_clinic_name.getText().toString().trim();\r\r                clinic_addr = txt_clinic_addr.getText().toString().trim();\r\r            clinic_dr_id = edtx_doctor_id.getText().toString().trim();\r\r            clinic_about_dr = edtx_about_doctor.getText().toString().trim();\r\r            clinic_number = edtx_clinic_number.getText().toString().trim();\r\r                int clnnmlength = clinic_name.trim().length();\r\r                int clncaddrlength = clinic_addr.trim().length();\r\r            int clncnumlength = clinic_number.trim().length();\r\r            int clncdrIDlength = clinic_dr_id.trim().length();\r\r            int clncabtdrlength = clinic_about_dr.trim().length();\r\r                boolean can_proceed = true;\r\r                if(clinic_name.isEmpty()){\r\r                    edittext_clinic_name.setError(\"Please fill the clinic name\");\r                    edittext_clinic_name.requestFocus();\r\r                   // Toasty.warning(getApplicationContext(), \"Please Enter the clinic name\", Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r                }\r\r                else if(clnnmlength>25){\r\r                    edittext_clinic_name.setError(\"The maximum length for an Clinic name is 25 characters \");\r                    edittext_clinic_name.requestFocus();\r                    can_proceed = false;\r                }\r\r\r            else if(clinic_dr_id.isEmpty()){\r\r                edtx_doctor_id.setError(\"Please fill the doctor id\");\r                edtx_doctor_id.requestFocus();\r\r                // Toasty.warning(getApplicationContext(), \"Please Enter the clinic name\", Toast.LENGTH_SHORT).show();\r\r                can_proceed = false;\r\r            }\r\r            else if(clncdrIDlength>25){\r\r                edtx_doctor_id.setError(\"The maximum length for an Clinic ID is 25 characters \");\r                edtx_doctor_id.requestFocus();\r                can_proceed = false;\r            }\r\r\r            else if(clinic_number.isEmpty()){\r\r                edtx_clinic_number.setError(\"Please fill the clinic number\");\r                edtx_clinic_number.requestFocus();\r\r                // Toasty.warning(getApplicationContext(), \"Please Enter the clinic name\", Toast.LENGTH_SHORT).show();\r\r                can_proceed = false;\r\r            }\r\r            else if(clncnumlength>25){\r\r                edtx_clinic_number.setError(\"The maximum length for an Clinic Number is 25 characters \");\r                edtx_clinic_number.requestFocus();\r                can_proceed = false;\r            }\r\r\r            else if(clinic_about_dr.isEmpty()){\r\r                edtx_about_doctor.setError(\"Please fill the about doctor\");\r                edtx_about_doctor.requestFocus();\r\r                // Toasty.warning(getApplicationContext(), \"Please Enter the clinic name\", Toast.LENGTH_SHORT).show();\r\r                can_proceed = false;\r\r            }\r\r            else if(clncabtdrlength>252){\r\r                edtx_about_doctor.setError(\"The maximum length for an About Doctor is 252 characters \");\r                edtx_about_doctor.requestFocus();\r                can_proceed = false;\r            }\r\r                else if(!validdCommunicationType()){\r\r                }\r\r                else if(educationDetailsBeans!=null&&educationDetailsBeans.size()<1){\r\r                    Toasty.warning(getApplicationContext(),\"Please Add minimum 1 Education\",Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r                }\r\r                else if(experienceDetailsBeans!=null&&experienceDetailsBeans.size()<1){\r                    Toasty.warning(getApplicationContext(),\"Please Add minimum 1 Experience\",Toast.LENGTH_SHORT).show();\r                    can_proceed = false;\r                }\r\r                else if(specializationBeans!=null&&specializationBeans.size()<1){\r                    Toasty.warning(getApplicationContext(),\"Please Choose minimum 1 Specialization\",Toast.LENGTH_SHORT).show();\r                    can_proceed = false;\r                } else if(petHandledBeans!=null&&petHandledBeans.size()<1){\r                    Toasty.warning(getApplicationContext(),\"Please Choose minimum 1 pet handle\",Toast.LENGTH_SHORT).show();\r                    can_proceed = false;\r\r                } else if(txt_clinic_addr.getText().toString() != null && txt_clinic_addr.getText().toString().isEmpty()){\r                    txt_clinic_addr.setError(\"Please fill the clinic address\");\r                    txt_clinic_addr.requestFocus();\r                    // Toasty.warning(getApplicationContext(), \"Please Enter the clinic address\", Toast.LENGTH_SHORT).show();\r                    can_proceed = false;\r\r                }\r\r                else if(clncaddrlength>252){\r                    edittext_education_name.setError(\"The maximum length for an Clinic Address is 252 characters \");\r\r                }\r\r                else if(clinicPicBeans!=null&&clinicPicBeans.size()<1){\r                    Toasty.warning(getApplicationContext(), \"Please Choose minimum 1 Clinic Image\", Toast.LENGTH_SHORT).show();\r                    can_proceed = false;\r                }\r\r                else if(certificatePicBeans!=null&&certificatePicBeans.size()<1){\r                    Toasty.warning(getApplicationContext(), \"Please Choose Certificate File\", Toast.LENGTH_SHORT).show();\r                    can_proceed = false;\r\r                }\r\r                else if(govtIdPicBeans!=null&&govtIdPicBeans.size()<1){\r                    Toasty.warning(getApplicationContext(), \"Please Choose GovtID File\", Toast.LENGTH_SHORT).show();\r                    can_proceed = false;\r\r                }\r\r                else if(photoIdPicBeans!=null&&photoIdPicBeans.size()<1){\r                    Toasty.warning(getApplicationContext(), \"Please Choose PhotoID File\", Toast.LENGTH_SHORT).show();\r                    can_proceed = false;\r\r                }else if(edtx_service_charge_amount.getText().toString().isEmpty()){\r                    edtx_service_charge_amount.setError(\"Please fill the service charge amount\");\r                    edtx_service_charge_amount.requestFocus();\r                    can_proceed = false;\r                }else if(!edtx_service_charge_amount.getText().toString().isEmpty()){\r                    String servicecost = edtx_service_charge_amount.getText().toString();\r                    if(servicecost.equalsIgnoreCase(\"0\")) {\r                        edtx_service_charge_amount.setError(\"Please fill the valid service charge amount\");\r                        edtx_service_charge_amount.requestFocus();\r                        can_proceed = false;\r                    }\r                }\r\r                if(can_proceed){\r                    if(validdCommunicationType()){\r                        consultancy_fees = Integer.parseInt(edtx_service_charge_amount.getText().toString().trim());\r                        if (digitalSignatureServerUrlImagePath != null && !digitalSignatureServerUrlImagePath.isEmpty()) {\r                            if(new ConnectionDetector(getApplicationContext()).isNetworkAvailable(getApplicationContext())) {\r                                    upldDrInfoResponseCall();\r                            }\r                        }else{\r                            showErrorLoading(\"Please draw your signature\");\r                        }\r\r                    }\r\r                }\r\r\r        }\r\r\r    }\r    @SuppressLint(\"LogNotTimber\")\r    private void upldDrInfoResponseCall() {\r            avi_indicator.setVisibility(View.VISIBLE);\r            avi_indicator.smoothToShow();\r\r            SimpleDateFormat sdf = new SimpleDateFormat(\"dd/MM/yyyy hh:mm:ss\", Locale.getDefault());\r\r            FinalDateTime = sdf.format(new Date());\r\r            DocBusInfoUploadRequest docBusInfoUploadRequest = new DocBusInfoUploadRequest(user_id,dr_title,dr_name,clinic_name,clinic_addr\r                    ,latitude,longitude,educationDetailsBeans,experienceDetailsBeans,specializationBeans,\r                    petHandledBeans,clinicPicBeans,certificatePicBeans,govtIdPicBeans,photoIdPicBeans,profile_status,status,FinalDateTime,\"Android\",strcommunicationtype,consultancy_fees,digitalSignatureServerUrlImagePath,CityName,clinic_about_dr,clinic_number,clinic_dr_id);\r\r            RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);\r\r            Log.w(TAG,\"docBusInfoUploadRequest \"+ new Gson().toJson(docBusInfoUploadRequest));\r\r            Call<DocBusInfoUploadResponse> call = apiInterface.docsBusInfoUpldResponse(RestUtils.getContentType(), docBusInfoUploadRequest);\r\r            Log.w(TAG,\"DocBusInfoUploadRequest url  :%s\"+\" \"+ call.request().url().toString());\r\r            call.enqueue(new Callback<DocBusInfoUploadResponse>() {\r                @Override\r                public void onResponse(@NonNull Call<DocBusInfoUploadResponse> call, @NonNull Response<DocBusInfoUploadResponse> response) {\r                    avi_indicator.smoothToHide();\r                    Log.w(TAG,\"DocBusInfoUploadRequest\" + new Gson().toJson(response.body()));\r                    if (response.body() != null) {\r                        if(response.body().getCode() == 200){\r                            /*new SweetAlertDialog(DoctorBusinessInfoActivity.this, SweetAlertDialog.SUCCESS_TYPE)\r                                    .setTitleText(response.body().getStatus())\r                                    .setContentText(response.body().getMessage())\r                                    .setConfirmText(\"Ok\")\r                                    .setConfirmClickListener(new SweetAlertDialog.OnSweetClickListener() {\r                                        @Override\r                                        public void onClick(SweetAlertDialog sweetAlertDialog) {\r                                           sweetAlertDialog.dismiss();\r                                           startActivity(new Intent(DoctorBusinessInfoActivity.this,DoctorMyCalendarNewUserActivity.class));\r                                        }\r                                    })\r                                    .show();*/\r\r                            showRegisterSuccessalert(response.body().getMessage());\r                        }\r\r\r\r\r\r\r                    }\r\r\r                }\r\r                @Override\r                public void onFailure(@NonNull Call<DocBusInfoUploadResponse> call,@NonNull Throwable t) {\r                    avi_indicator.smoothToHide();\r                    Log.w(TAG,\"DocBusInfoUploadRequest flr\"+ t.getMessage());\r                    Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r                }\r            });\r    }\r    @Override\r    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r        super.onActivityResult(requestCode, resultCode, data);\r\r        try {\r\r                    switch (requestCode) {\r                    case REQUEST_CHECK_SETTINGS_GPS:\r                        switch (resultCode) {\r                            case Activity.RESULT_OK:\r                                getMyLocation();\r                                break;\r                            case Activity.RESULT_CANCELED:\r                                getMyLocation();\r                                break;\r                        }\r                        break;\r                }\r                    if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {\r                        CropImage.ActivityResult result = CropImage.getActivityResult(data);\r                        if (resultCode == RESULT_OK) {\r                            Uri resultUri = result.getUri();\r\r                            if (resultUri != null) {\r\r                                Log.w(\"selectedImageUri\", \" \" + resultUri);\r\r                                String filename = getFileName(resultUri);\r\r                                Log.w(\"filename\", \" \" + filename);\r\r                                String filePath = FileUtil.getPath(DoctorBusinessInfoActivity.this, resultUri);\r\r                                assert filePath != null;\r\r                                File file = new File(filePath); // initialize file here\r\r                                long length = file.length() / 1024; // Size in KB\r\r                                Log.w(\"filesize\", \" \" + length);\r\r                                if (length > 2000) {\r\r                                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                                            .setTitleText(\"File Size\")\r                                            .setContentText(\"Please choose file size less than 2 MB \")\r                                            .setConfirmText(\"Ok\")\r                                            .show();\r                                } else {\r\r\r                                    SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r                                    String currentDateandTime = sdf.format(new Date());\r\r                                    if(isAddClinicPic){\r\r                                        filePart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                                        uploadClinicImage();\r                                    }\r\r                                    else if(isAddCertfProof){\r\r                                        certPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                                        uploadCertPdf();\r                                    }\r\r                                    else if(isAddGovtIdproof){\r\r                                        govIdPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                                        uploadGovtIDPdf();\r                                    }\r                                    else if(isAddPhotoIDproof){\r\r                                        photIDPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                                        uploadPhotoIDPdf();\r                                    }\r                                }\r\r\r                            } else {\r\r                                Toasty.warning(DoctorBusinessInfoActivity.this, \"Image Error!!Please upload Some other image\", Toasty.LENGTH_LONG).show();\r                            }\r\r\r                        }\r                    }\r                    //\tToast.makeText(getActivity(),\"kk\",Toast.LENGTH_SHORT).show();\r                    else if(requestCode== SELECT_CLINIC_PICTURE || requestCode == SELECT_CLINIC_CAMERA) {\r\r                        if(requestCode == SELECT_CLINIC_CAMERA)\r                        {\r                            Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get(\"data\");\r\r                            File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\r                            OutputStream os;\r                            try {\r                                os = new FileOutputStream(file);\r                                if (photo != null) {\r                                    photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r                                }\r                                os.flush();\r                                os.close();\r                            } catch (Exception e) {\r                                Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r                            }\r\r                            RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\r                            filePart = MultipartBody.Part.createFormData(\"sampleFile\",  user_id+currentDateandTime+file.getName(), requestFile);\r\r                            uploadClinicImage();\r\r                        }\r\r                        else{\r\r                            try {\r                                if (resultCode == Activity.RESULT_OK) {\r\r                                    Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\r                                    Uri selectedImageUri = data.getData();\r\r                                    Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\r                                    String filename = null;\r                                    if (selectedImageUri != null) {\r                                        filename = getFileName(selectedImageUri);\r                                    }\r\r                                    Log.w(\"filename\", \" \" + filename);\r\r                                    String filePath = FileUtil.getPath(DoctorBusinessInfoActivity.this,selectedImageUri);\r\r                                    assert filePath != null;\r\r                                    File file = new File(filePath); // initialize file here\r\r                                    long length = file.length() / 1024; // Size in KB\r\r                                    Log.w(\"filesize\", \" \" + length);\r\r\r\r                                    filePart = MultipartBody.Part.createFormData(\"sampleFile\", user_id+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                                    uploadClinicImage();\r\r\r                                }\r                            } catch (Exception e) {\r\r                                Log.w(\"Exception\", \" \" + e);\r                            }\r\r                        }\r\r                    }\r\r                    else if(requestCode == SELECT_CERTIFICATE_CAMERA)\r                    {\r                        Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get(\"data\");\r\r                        File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\r                        OutputStream os;\r                        try {\r                            os = new FileOutputStream(file);\r                            if (photo != null) {\r                                photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r                            }\r                            os.flush();\r                            os.close();\r                        } catch (Exception e) {\r                            Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r                        }\r\r                        RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\r                        certPart = MultipartBody.Part.createFormData(\"sampleFile\",  user_id+currentDateandTime+file.getName(), requestFile);\r\r                        uploadCertPdf();\r\r                    }\r\r                    else if(requestCode == SELECT_CERTIFICATE_PICTURE){\r\r                        try {\r                            if (resultCode == Activity.RESULT_OK) {\r\r                                Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\r                                Uri selectedImageUri = data.getData();\r\r                                Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\r                                String filename = null;\r                                if (selectedImageUri != null) {\r                                    filename = getFileName(selectedImageUri);\r                                }\r\r                                Log.w(\"filename\", \" \" + filename);\r\r                                String filePath = FileUtil.getPath(DoctorBusinessInfoActivity.this,selectedImageUri);\r\r                                assert filePath != null;\r\r                                File file = new File(filePath); // initialize file here\r\r                                long length = file.length() / 1024; // Size in KB\r\r                                Log.w(\"filesize\", \" \" + length);\r\r                                certPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                                uploadCertPdf();\r\r\r                            }\r                        } catch (Exception e) {\r\r                            Log.w(\"Exception\", \" \" + e);\r                        }\r\r                    }\r\r                    else if(requestCode== SELECT_CERT_PDF){\r\r                        try {\r                            if (resultCode == Activity.RESULT_OK)\r                            {\r\r\r                                if(data!=null){\r\r\r                                    Log.w(\"URI\", \" \" + data);\r\r                                    Uri selectedFileUri = data.getData();\r\r                                    if(selectedFileUri!=null){\r\r                                        Log.w(\"selectedFileUri\", \" \" + selectedFileUri);\r\r                                        String filename = getFileName(selectedFileUri);\r\r                                        Log.w(\"filename\", \" \" + filename);\r\r                                        String filePath = FileUtil.getPath(DoctorBusinessInfoActivity.this,selectedFileUri);\r\r                                        assert filePath != null;\r\r                                        File file = new File(filePath); // initialize file here\r\r                                        long length = file.length() / 1024; // Size in KB\r\r                                        Log.w(\"filesize\", \" \" + length);\r\r                                        if(length>2000){\r\r                                            new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                                                    .setTitleText(\"File Size\")\r                                                    .setContentText(\"Please choose file size less than 2 MB \")\r                                                    .setConfirmText(\"Ok\")\r                                                    .show();\r                                        }\r\r                                        else{\r\r                                            certPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"pdf/*\"), file));\r\r                                            uploadCertPdf();\r                                        }\r                                    }\r\r                                    else {\r\r                                        Toasty.warning(DoctorBusinessInfoActivity.this, \"File Error!!Please upload Some other File\", Toasty.LENGTH_LONG).show();\r\r                                    }\r                                }\r\r                                else {\r\r                                    Toasty.warning(DoctorBusinessInfoActivity.this, \"File Error!!Please upload Some other File\", Toasty.LENGTH_LONG).show();\r                                }\r\r                            }\r                        } catch (Exception e) {\r\r                            Log.w(\"Exception\", \" \" + e);\r                        }\r                    }\r\r                    else if(requestCode == SELECT_GOVTID_CAMERA)\r                    {\r                        Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get(\"data\");\r\r                        File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\r                        OutputStream os;\r                        try {\r                            os = new FileOutputStream(file);\r                            if (photo != null) {\r                                photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r                            }\r                            os.flush();\r                            os.close();\r                        } catch (Exception e) {\r                            Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r                        }\r\r                        RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\r                        govIdPart = MultipartBody.Part.createFormData(\"sampleFile\",  user_id+currentDateandTime+file.getName(), requestFile);\r\r                        uploadGovtIDPdf();\r\r                    }\r\r                    else if(requestCode == SELECT_GOVTID_PICTURE){\r\r                        try {\r                            if (resultCode == Activity.RESULT_OK) {\r\r                                Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\r                                Uri selectedImageUri = data.getData();\r\r                                Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\r                                String filename = null;\r                                if (selectedImageUri != null) {\r                                    filename = getFileName(selectedImageUri);\r                                }\r\r                                Log.w(\"filename\", \" \" + filename);\r\r                                String filePath = FileUtil.getPath(DoctorBusinessInfoActivity.this,selectedImageUri);\r\r                                assert filePath != null;\r\r                                File file = new File(filePath); // initialize file here\r\r                                long length = file.length() / 1024; // Size in KB\r\r                                Log.w(\"filesize\", \" \" + length);\r\r                                govIdPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                                uploadGovtIDPdf();\r\r\r                            }\r                        } catch (Exception e) {\r\r                            Log.w(\"Exception\", \" \" + e);\r                        }\r\r                    }\r\r                    else if(requestCode== SELECT_GOVTID_PDF){\r\r                        try {\r                            if (resultCode == Activity.RESULT_OK)\r                            {\r\r\r                                if(data!=null){\r\r\r                                    Log.w(\"URI\", \" \" + data);\r\r                                    Uri selectedFileUri = data.getData();\r\r                                    if(selectedFileUri!=null){\r\r                                        Log.w(\"selectedFileUri\", \" \" + selectedFileUri);\r\r                                        String filename = getFileName(selectedFileUri);\r\r                                        Log.w(\"filename\", \" \" + filename);\r\r                                        String filePath = FileUtil.getPath(DoctorBusinessInfoActivity.this,selectedFileUri);\r\r                                        assert filePath != null;\r\r                                        File file = new File(filePath); // initialize file here\r\r                                        long length = file.length() / 1024; // Size in KB\r\r                                        Log.w(\"filesize\", \" \" + length);\r\r                                        if(length>2000){\r\r                                            new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                                                    .setTitleText(\"File Size\")\r                                                    .setContentText(\"Please choose file size less than 2 MB \")\r                                                    .setConfirmText(\"Ok\")\r                                                    .show();\r                                        }\r\r                                        else{\r\r                                            govIdPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"pdf/*\"), file));\r\r                                            uploadGovtIDPdf();\r\r                                        }\r                                    }\r\r                                    else {\r\r                                        Toasty.warning(DoctorBusinessInfoActivity.this, \"File Error!!Please upload Some other File\", Toasty.LENGTH_LONG).show();\r\r                                    }\r                                }\r\r                                else {\r\r                                    Toasty.warning(DoctorBusinessInfoActivity.this, \"File Error!!Please upload Some other File\", Toasty.LENGTH_LONG).show();\r                                }\r\r                            }\r                        } catch (Exception e) {\r\r                            Log.w(\"Exception\", \" \" + e);\r                        }\r                    }\r\r                    else if(requestCode == SELECT_PHOTOID_CAMERA)\r                    {\r                        Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get(\"data\");\r\r                        File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\r                        OutputStream os;\r                        try {\r                            os = new FileOutputStream(file);\r                            if (photo != null) {\r                                photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r                            }\r                            os.flush();\r                            os.close();\r                        } catch (Exception e) {\r                            Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r                        }\r\r                        RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\r                        photIDPart = MultipartBody.Part.createFormData(\"sampleFile\",  user_id+currentDateandTime+file.getName(), requestFile);\r\r                        uploadPhotoIDPdf();\r\r                    }\r\r                    else if(requestCode == SELECT_PHOTOID_PICTURE){\r\r                        try {\r                            if (resultCode == Activity.RESULT_OK) {\r\r                                Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\r                                Uri selectedImageUri = data.getData();\r\r                                Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\r                                String filename = null;\r                                if (selectedImageUri != null) {\r                                    filename = getFileName(selectedImageUri);\r                                }\r\r                                Log.w(\"filename\", \" \" + filename);\r\r                                String filePath = FileUtil.getPath(DoctorBusinessInfoActivity.this,selectedImageUri);\r\r                                assert filePath != null;\r\r                                File file = new File(filePath); // initialize file here\r\r                                long length = file.length() / 1024; // Size in KB\r\r                                Log.w(\"filesize\", \" \" + length);\r\r                                photIDPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                                uploadPhotoIDPdf();\r\r\r                            }\r                        } catch (Exception e) {\r\r                            Log.w(\"Exception\", \" \" + e);\r                        }\r\r                    }\r\r\r                    else if(requestCode== SELECT_PHOTOID_PDF){\r                        try {\r                            if (resultCode == Activity.RESULT_OK)\r                            {\r\r                                if(data!=null){\r\r\r                                    Log.w(\"URI\", \" \" + data);\r\r                                    Uri selectedFileUri = data.getData();\r\r                                    if(selectedFileUri!=null){\r\r                                        Log.w(\"selectedFileUri\", \" \" + selectedFileUri);\r\r                                        String filename = getFileName(selectedFileUri);\r\r                                        Log.w(\"filename\", \" \" + filename);\r\r                                        String filePath = FileUtil.getPath(DoctorBusinessInfoActivity.this,selectedFileUri);\r\r                                        assert filePath != null;\r\r                                        File file = new File(filePath); // initialize file here\r\r                                        long length = file.length() / 1024; // Size in KB\r\r                                        Log.w(\"filesize\", \" \" + length);\r\r                                        if(length>2000){\r\r                                            new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                                                    .setTitleText(\"File Size\")\r                                                    .setContentText(\"Please choose file size less than 2 MB \")\r                                                    .setConfirmText(\"Ok\")\r                                                    .show();\r                                        }\r\r                                        else{\r\r                                            photIDPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"pdf/*\"), file));\r\r                                            uploadPhotoIDPdf();\r\r                                        }\r                                    }\r\r                                    else {\r\r                                        Toasty.warning(DoctorBusinessInfoActivity.this, \"File Error!!Please upload Some other File\", Toasty.LENGTH_LONG).show();\r\r                                    }\r                                }\r\r                                else {\r\r                                    Toasty.warning(DoctorBusinessInfoActivity.this, \"File Error!!Please upload Some other File\", Toasty.LENGTH_LONG).show();\r                                }\r\r                            }\r                        } catch (Exception e) {\r\r                            Log.w(\"Exception\", \" \" + e);\r                        }\r                    }\r\r\r                }\r\r\r                catch (Exception e){\r                    Log.w(TAG,\"onActivityResult exception\"+e.toString());\r                }\r\r\r\r\r    }\r    @Override\r    public void onBackPressed() {\r        super.onBackPressed();\r        startActivity(new Intent(DoctorBusinessInfoActivity.this, LoginActivity.class));\r        finish();\r    }\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @Override\r    public void onClick(View v) {\r\r        switch (v.getId()){\r\r            case R.id.buttonsubmit:\r                checkValidation();\r                break;\r\r            case R.id.img_bck:\r                onBackPressed();\r                break;\r\r            case R.id.buttonAddedu:\r                addEduc();\r                break;\r\r            case R.id.buttonAddexpr:\r                addExpr();\r                break;\r\r            case R.id.edtx_from:\r                getStartDate();\r                break;\r\r            case R.id.edtx_to:\r                if(edittext_from.getText().toString().equals(\"\")){\r\r                    Toasty.warning(getApplicationContext(), \"Please Choose Start Date\", Toast.LENGTH_SHORT).show();\r\r                }\r                else{\r\r                    getEndDate();\r                }\r\r                break;\r\r            case R.id.edtx_clinic_pic_choose:\r                chooseClinicImage();\r                break;\r\r            case R.id.edtx_clinic_certif_choose:\r                chooseCertPdf();\r                break;\r\r            case R.id.edtx_clinic_govtid_choose:\r                chooseGovIDPdf();\r                break;\r\r            case R.id.edtx_clinic_photoid_choose:\r                choosePhotoIDPdf();\r                break;\r\r            case R.id.txt_edu_yr:\r                getEduYear();\r                break;\r\r            case R.id.txt_location_change:\r                gotoSetlocation();\r                break;\r\r\r        }\r\r    }\r    private void gotoSetlocation() {\r        Intent intent = new Intent(getApplicationContext(), SetLocationDoctorNewActivity.class);\r        intent.putExtra(\"fromactivity\",TAG);\r        startActivity(intent);\r    }\r\r\r    @Override\r    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\r        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r        if (requestCode == MY_PERMISSIONS_REQUEST_LOCATION) {\r            if (grantResults.length > 0\r                    && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r                if (ContextCompat.checkSelfPermission(getApplicationContext(),\r                        Manifest.permission.ACCESS_FINE_LOCATION)\r                        == PackageManager.PERMISSION_GRANTED) {\r\r\r                }\r            } else {\r                Toast.makeText(getApplicationContext(), \"permission denied\", Toast.LENGTH_LONG).show();\r            }\r        }\r\r        if (requestCode == REQUEST_READ_CLINIC_PIC_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r//                Intent intent = new Intent();\r//                intent.setType(\"image/*\");\r//                intent.setAction(Intent.ACTION_GET_CONTENT);\r//                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_CLINIC_PICTURE);\r                chooseClinicImage();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_CLINIC_CAMERA_PERMISSION_CODE) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r//                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r//\r//                //    intent.putExtra(MediaStore.EXTRA_SCREEN_ORIENTATION, ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\r//\r//                startActivityForResult(intent, SELECT_CLINIC_CAMERA);\r\r                chooseClinicImage();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Camera for taking picture\")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_READ_CLINIC_PDF_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r                Intent intent = new Intent();\r                intent.setType(\"application/pdf\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_CERT_PDF);\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Pdf files \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PDF_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_READ_GOVT_ID_PDF_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r                Intent intent = new Intent();\r                intent.setType(\"application/pdf\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_GOVTID_PDF);\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Pdf Files \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVT_ID_PDF_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", new SweetAlertDialog.OnSweetClickListener() {\r                            @Override\r                            public void onClick(SweetAlertDialog sDialog) {\r                                sDialog.dismissWithAnimation();\r\r                            }\r                        })\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_READ_PHOTO_ID_PDF_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r                Intent intent = new Intent();\r                intent.setType(\"application/pdf\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_PHOTOID_PDF);\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Pdf files \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTO_ID_PDF_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == MY_PERMISSIONS_REQUEST_LOCATION) {\r            // If request is cancelled, the result arrays are empty.\r            if (grantResults.length > 0\r                    && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r\r                checkValidation();\r\r\r            } else {\r\r                // permission denied\r                showWarning(MY_PERMISSIONS_REQUEST_LOCATION);\r\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_READ_CERTIFICATE_PIC_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r             /*   Intent intent = new Intent();\r                intent.setType(\"image/*\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_CERTIFICATE_PICTURE);*/\r\r                chooseCertPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CERTIFICATE_PIC_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r//                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r//\r//                //    intent.putExtra(MediaStore.EXTRA_SCREEN_ORIENTATION, ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\r//\r//                startActivityForResult(intent, SELECT_CERTIFICATE_CAMERA);\r\r                chooseCertPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Camera for taking picture\")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_READ_GOVTID_PIC_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r                /*Intent intent = new Intent();\r                intent.setType(\"image/*\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_GOVTID_PICTURE);\r*/\r                chooseGovIDPdf();\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVTID_PIC_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_GOVTID_CAMERA_PERMISSION_CODE) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r              /*  Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\r                //    intent.putExtra(MediaStore.EXTRA_SCREEN_ORIENTATION, ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\r\r                startActivityForResult(intent, SELECT_GOVTID_CAMERA);*/\r\r                chooseGovIDPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Camera for taking picture\")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_GOVTID_CAMERA_PERMISSION_CODE);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_READ_PHOTOID_PIC_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r            /*    Intent intent = new Intent();\r                intent.setType(\"image/*\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_PHOTOID_PICTURE);\r*/\r                choosePhotoIDPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTOID_PIC_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_PHOTOID_CAMERA_PERMISSION_CODE) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r/*                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\r                //    intent.putExtra(MediaStore.EXTRA_SCREEN_ORIENTATION, ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\r\r                startActivityForResult(intent, SELECT_PHOTOID_CAMERA);*/\r\r                choosePhotoIDPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Camera for taking picture\")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_PHOTOID_CAMERA_PERMISSION_CODE);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                        .show();\r\r            }\r\r        }\r\r    }\r\r\r    private void showWarning(int REQUEST_PERMISSION_CODE) {\r\r        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                .setTitleText(\"Sorry!!\")\r                .setContentText(\"You Can't proceed further unless you allow permission\")\r                .setConfirmText(\"Ok\")\r                .setConfirmClickListener(sDialog -> {\r\r                    sDialog.dismissWithAnimation();\r\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_PERMISSION_CODE);\r                    }\r\r\r                })\r                .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                .show();\r    }\r\r    public static Bitmap rotateImage(Bitmap src, float degree) {\r        // create new matrix\r        Matrix matrix = new Matrix();\r        // setup rotation degree\r        matrix.postRotate(degree);\r        Bitmap bmp = Bitmap.createBitmap(src, 0, 0, src.getWidth(), src.getHeight(), matrix, true);\r        return bmp;\r    }\r\r    public Uri getImageUri(Context inContext, Bitmap inImage) {\r        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\r        inImage.compress(Bitmap.CompressFormat.JPEG, 100, bytes);\r        String path = MediaStore.Images.Media.insertImage(inContext.getContentResolver(), inImage, \"Title\", null);\r        return Uri.parse(path);\r    }\r\r    public String getFileName(Uri uri) {\r        String result = null;\r        if (uri.getScheme().equals(\"content\")) {\r            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {\r                if (cursor != null && cursor.moveToFirst()) {\r                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));\r                }\r            }\r        }\r        if (result == null) {\r            result = uri.getPath();\r            int cut = result.lastIndexOf('/');\r            if (cut != -1) {\r                result = result.substring(cut + 1);\r            }\r        }\r        return result;\r    }\r\r\r    private void googleApiConnected() {\r\r        googleApiClient = new GoogleApiClient.Builder(Objects.requireNonNull(getApplicationContext())).\r                addConnectionCallbacks(this).\r                addOnConnectionFailedListener(this).\r                addApi(LocationServices.API).build();\r        googleApiClient.connect();\r\r    }\r    private void checkLocation() {\r        try {\r            LocationManager lm = (LocationManager) getApplicationContext().getSystemService(Context.LOCATION_SERVICE);\r            boolean gps_enabled = false;\r            boolean network_enabled = false;\r\r            try {\r                gps_enabled = lm.isProviderEnabled(LocationManager.GPS_PROVIDER);\r            } catch (Exception ignored) {\r            }\r\r            try {\r                network_enabled = lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER);\r            } catch (Exception ignored) {\r            }\r\r            if (!gps_enabled && !network_enabled) {\r\r                if (!lm.isProviderEnabled(LocationManager.GPS_PROVIDER)) {\r                    getMyLocation();\r                }\r\r            } else {\r                getLatandLong();\r            }\r        } catch (Exception e) {\r            e.printStackTrace();\r        }\r\r    }\r    @Override\r    public void onLocationChanged(Location location) {\r        mLastLocation = location;\r        if(!isSetAddress){\r            latitude = mLastLocation.getLatitude();\r            longitude = mLastLocation.getLongitude();\r\r            Log.w(TAG,\"onLocationChanged : \"+\" latitude : \"+latitude+ \" longitude : \"+longitude);\r        }\r        if(latitude != 0 && longitude != 0){\r            getAddress(latitude,longitude);\r        }\r\r\r\r\r\r\r\r    }\r    @Override\r    public void onConnected(@Nullable Bundle bundle) {\r        permissionChecking();\r    }\r    @Override\r    public void onConnectionSuspended(int i) {\r\r    }\r    @Override\r    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {\r\r    }\r    @SuppressLint(\"LongLogTag\")\r    @Override\r    public void onMapReady(GoogleMap googleMap) {\r\r\r    }\r    private void permissionChecking() {\r        if (getApplicationContext() != null) {\r            if (Build.VERSION.SDK_INT >= 23 && (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) &&\r                    (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED)) {\r\r                ActivityCompat.requestPermissions(Objects.requireNonNull(this), new String[]{Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION}, 5);\r\r            } else {\r\r                checkLocation();\r            }\r        }\r    }\r    public void getMyLocation() {\r\r        if (googleApiClient != null) {\r\r            if (googleApiClient.isConnected()) {\r                if(getApplicationContext() != null){\r                    if (ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r                        // TODO: Consider calling\r                        //    ActivityCompat#requestPermissions\r                        // here to request the missing permissions, and then overriding\r                        //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\r                        //                                          int[] grantResults)\r                        // to handle the case where the user grants the permission. See the documentation\r                        // for ActivityCompat#requestPermissions for more details.\r\r                        return;\r                    }\r\r                }\r\r                mLastLocation = LocationServices.FusedLocationApi.getLastLocation(googleApiClient);\r                LocationRequest locationRequest = new LocationRequest();\r                locationRequest.setInterval(2000);\r                locationRequest.setFastestInterval(2000);\r                locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);\r                LocationSettingsRequest.Builder builder = new LocationSettingsRequest.Builder().addLocationRequest(locationRequest);\r                builder.setAlwaysShow(true);\r                LocationServices.FusedLocationApi.requestLocationUpdates(googleApiClient, locationRequest, this);\r                PendingResult<LocationSettingsResult> result = LocationServices.SettingsApi.checkLocationSettings(googleApiClient, builder.build());\r                result.setResultCallback(result1 -> {\r                    Status status = result1.getStatus();\r                    switch (status.getStatusCode()) {\r                        case LocationSettingsStatusCodes.SUCCESS:\r                            // All location settings are satisfied.\r                            // You can initialize location requests here.\r                            mLastLocation = LocationServices.FusedLocationApi.getLastLocation(googleApiClient);\r\r\r\r\r\r\r                            Handler handler = new Handler();\r                            int delay = 1000; //milliseconds\r\r                            handler.postDelayed(new Runnable() {\r                                @SuppressLint(\"LongLogTag\")\r                                public void run() {\r                                    //do something\r                                    Log.w(TAG, \"getMyLocation-->\");\r\r\r\r                                }\r                            }, delay);\r\r\r                            break;\r                        case LocationSettingsStatusCodes.RESOLUTION_REQUIRED:\r                            try {\r                                status.startResolutionForResult(this, REQUEST_CHECK_SETTINGS_GPS);\r                            } catch (IntentSender.SendIntentException e) {\r                                // Ignore the error.\r                            }\r                            break;\r                        case LocationSettingsStatusCodes.SETTINGS_CHANGE_UNAVAILABLE:\r                            break;\r                    }\r                });\r            }\r\r\r        }\r    }\r    private void getLatandLong() {\r        try {\r            if (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 1);\r\r            } else {\r                GPSTracker gps = new GPSTracker(getApplicationContext());\r                // Check if GPS enabled\r                if (gps.canGetLocation()) {\r                    if(!isSetAddress) {\r                        latitude = gps.getLatitude();\r                        longitude = gps.getLongitude();\r                        Log.w(TAG, \"getLatandLong--->\" + \"latitude\" + \" \" + latitude + \"longitude\" + \" \" + longitude);\r                    }\r\r                    if(latitude != 0 && longitude != 0){\r                        getAddress(latitude,longitude);\r                    }\r\r                }\r            }\r\r\r\r\r        } catch (Exception e) {\r            e.printStackTrace();\r        }\r    }\r    public boolean validdCommunicationType() {\r        if(strcommunicationtype.equalsIgnoreCase(\"Select Communication Type\")){\r            final AlertDialog alertDialog = new AlertDialog.Builder(DoctorBusinessInfoActivity.this).create();\r            alertDialog.setMessage(getString(R.string.err_msg_type_of_communicationtype));\r            alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, \"Ok\",\r                    (dialog, which) -> alertDialog.cancel());\r            alertDialog.show();\r\r            return false;\r        }\r\r        return true;\r    }\r\r\r    public boolean addJpgSignatureToGallery(Bitmap signature) {\r        boolean result = false;\r        try {\r            @SuppressLint(\"DefaultLocale\") File photo = new File(getAlbumStorageDir(\"SignaturePad\"), String.format(\"Signature_%d.jpg\", System.currentTimeMillis()));\r          //  saveBitmapToJPG(signature, photo);\r            scanMediaFile(photo);\r            StoredPathDigitalSignature = String.valueOf(photo);\r\r            uploadDigitalSignatureImageRequest();\r            result = true;\r        } catch (Exception e) {\r            e.printStackTrace();\r        }\r        return result;\r    }\r    public File getAlbumStorageDir(String albumName) {\r        // Get the directory for the user's public pictures directory.\r       // File file = getExternalFilesDir(Environment.DIRECTORY_PICTURES);\r\r       File file = new File(Environment.getExternalStoragePublicDirectory(\r                Environment.DIRECTORY_PICTURES), albumName);\r\r       /* File path = Environment.getExternalStoragePublicDirectory(\r                Environment.DIRECTORY_PICTURES);\r        File file = new File(path, \"\");*/\r        if (!file.mkdirs()) {\r        }\r        return file;\r    }\r    public void saveBitmapToJPG(Bitmap bitmap, File photo) throws IOException {\r        Bitmap newBitmap = Bitmap.createBitmap(bitmap.getWidth(), bitmap.getHeight(), Bitmap.Config.ARGB_8888);\r        Canvas canvas = new Canvas(newBitmap);\r        canvas.drawColor(Color.WHITE);\r        canvas.drawBitmap(bitmap, 0, 0, null);\r        OutputStream stream = new FileOutputStream(photo);\r        newBitmap.compress(Bitmap.CompressFormat.JPEG, 80, stream);\r\r        stream.close();\r    }\r    private void scanMediaFile(File photo) {\r        Intent mediaScanIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);\r        Uri contentUri = Uri.fromFile(photo);\r        mediaScanIntent.setData(contentUri);\r        DoctorBusinessInfoActivity.this.sendBroadcast(mediaScanIntent);\r    }\r    @SuppressLint(\"LogNotTimber\")\r    private void uploadDigitalSignatureImageRequest1() {\r        avi_indicator.show();\r        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(getdigitalSignaturePicMultipart());\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r        call.enqueue(new Callback<FileUploadResponse>() {\r            @Override\r            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"Profpic\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                llheaderdigitalsignature.setVisibility(View.GONE);\r                mSignaturePad.clear();\r                Log.w(TAG,\"DigitalSignaturepic\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                // Log.w(TAG,\"Profile\"+ \"status \" + status);\r                if (response.body() != null && response.body().getCode() == 200) {\r                    if (response.body() != null) {\r                        digitalSignatureServerUrlImagePath = response.body().getData();\r                        Log.w(TAG, \"digitalSignatureServerUrlImagePath \" + digitalSignatureServerUrlImagePath);\r                        Calendar c = Calendar.getInstance();\r\r\r                        if (digitalSignatureServerUrlImagePath != null && !digitalSignatureServerUrlImagePath.isEmpty()) {\r\r                            Log.w(TAG,\"digitalSignatureServerUrlImagePath--->\"+digitalSignatureServerUrlImagePath);\r\r                            Glide\r                                    .with(getApplicationContext())\r                                    .load(digitalSignatureServerUrlImagePath)\r                                    .apply(new RequestOptions().override(600, 200))\r                                    .diskCacheStrategy(DiskCacheStrategy.ALL)\r                                    .into(ivdigitalsignature);\r\r\r\r                        }\r                        else{\r                            Glide.with(getApplicationContext())\r                                    .load(R.drawable.digital_signature)\r                                    .into(ivdigitalsignature);\r\r                        }\r\r\r\r                    } else {\r                        Log.w(TAG, \"digitalSignatureServerUrlImagePath \" + \"response body null part wotking \");\r                    }\r\r                }\r\r\r\r\r            }\r\r            @Override\r            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r                avi_indicator.smoothToHide();\r                mSignaturePad.clear();\r                llheaderdigitalsignature.setVisibility(View.GONE);\r                Log.w(TAG,\"digitalSignatureServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r            }\r        });\r\r\r    }\r    private MultipartBody.Part getdigitalSignaturePicMultipart() {\r        StoredPathDigitalSignature = decodeFile(StoredPathDigitalSignature, 500, 500);\r        RequestBody requestFile = RequestBody.create(MediaType.parse(\"text/plain\"), \"\");\r        if (StoredPathDigitalSignature != null && !StoredPathDigitalSignature.isEmpty()) {\r            File file = new File(StoredPathDigitalSignature);\r            requestFile = RequestBody.create(MediaType.parse(\"image/*\"), file);\r        }\r        MultipartBody.Part filePart = MultipartBody.Part.createFormData(\"sampleFile\",StoredPathDigitalSignature, requestFile);\r\r        return filePart;\r    }\r    private String decodeFile(String path, int DESIREDWIDTH, int DESIREDHEIGHT) {\r\r        Bitmap scaledBitmap = null;\r\r        try {\r            // Part 1: Decode image\r            Bitmap unscaledBitmap = ScalingUtilities.decodeFile(path, DESIREDWIDTH, DESIREDHEIGHT, ScalingUtilities.ScalingLogic.FIT);\r\r            if (!(unscaledBitmap.getWidth() <= DESIREDWIDTH && unscaledBitmap.getHeight() <= DESIREDHEIGHT)) {\r                // Part 2: Scale image\r                scaledBitmap = ScalingUtilities.createScaledBitmap(unscaledBitmap, DESIREDWIDTH, DESIREDHEIGHT, ScalingUtilities.ScalingLogic.FIT);\r            } else {\r                unscaledBitmap.recycle();\r                return path;\r            }\r\r            // Store to tmp file\r\r            String extr = Environment.getExternalStorageDirectory().toString();\r            File mFolder = new File(extr + \"/Petfolio\");\r            if (!mFolder.exists()) {\r                mFolder.mkdir();\r            }\r\r\r            Long tsLong = System.currentTimeMillis()/1000;\r            String ts = tsLong.toString();\r\r            String s = ts+\",\"+\"tmp.png\";\r\r\r            File f = new File(mFolder.getAbsolutePath(), s);\r\r            strMyImagePath = f.getAbsolutePath();\r\r            FileOutputStream fos = null;\r            try {\r                fos = new FileOutputStream(f);\r                scaledBitmap.compress(Bitmap.CompressFormat.JPEG, 75, fos);\r                fos.flush();\r                fos.close();\r            } catch (FileNotFoundException e) {\r\r                e.printStackTrace();\r            } catch (Exception e) {\r\r                e.printStackTrace();\r            }\r\r            scaledBitmap.recycle();\r        } catch (Throwable e) {\r        }\r\r        if (strMyImagePath == null) {\r\r            return path;\r        }\r        return strMyImagePath;\r\r    }\r    public void showErrorLoading(String errormesage){\r        alertDialogBuilder = new AlertDialog.Builder(this);\r        alertDialogBuilder.setMessage(errormesage);\r        alertDialogBuilder.setPositiveButton(\"ok\",\r                (arg0, arg1) -> hideLoading());\r        AlertDialog alertDialog = alertDialogBuilder.create();\r        alertDialog.show();\r    }\r    public void hideLoading(){\r        try {\r            alertDialog.dismiss();\r        }catch (Exception ignored){\r\r        }\r    }\r\r    @SuppressLint({\"LongLogTag\", \"LogNotTimber\"})\r    private void getAddress(double latitude, double longitude) {\r        StringBuilder result = new StringBuilder();\r        try {\r            Geocoder geocoder = new Geocoder(this, Locale.getDefault());\r            List<Address> listAddresses = geocoder.getFromLocation(latitude, longitude, 1);\r            if (null != listAddresses && listAddresses.size() > 0) {\r                Address address = listAddresses.get(0);\r                result.append(address.getLocality()).append(\"\\n\");\r                result.append(address.getCountryName());\r\r                String state = listAddresses.get(0).getAdminArea();\r                String country = listAddresses.get(0).getCountryName();\r                String subLocality = listAddresses.get(0).getSubLocality();\r                String postalcode = listAddresses.get(0).getPostalCode();\r                AddressLine = listAddresses.get(0).getAddressLine(0);\r                CityName = listAddresses.get(0).getLocality();\r                if(CityName != null){\r                    AddressLine = CityName+\" \"+listAddresses.get(0).getAddressLine(0);\r\r                }\r\r                if(AddressLine != null) {\r                    txt_clinic_addr.setText(AddressLine);\r                    isSetAddress = true;\r                }\r\r\r                // Thoroughfare seems to be the street name without numbers\r                String street = address.getThoroughfare();\r\r            }\r        } catch (IOException e) {\r        }\r\r        result.toString();\r    }\r\r    private void showRegisterSuccessalert(String message) {\r        try {\r\r            dialog = new Dialog(DoctorBusinessInfoActivity.this);\r            dialog.setCancelable(false);\r            dialog.setContentView(R.layout.alert_success_register);\r            TextView txt_success_msg = dialog.findViewById(R.id.txt_success_msg);\r            Button btn_back_to_login = dialog.findViewById(R.id.btn_back_to_login);\r            btn_back_to_login.setText(\"Continue\");\r            txt_success_msg.setText(message);\r\r            btn_back_to_login.setOnClickListener(new View.OnClickListener() {\r                @Override\r                public void onClick(View view) {\r                    startActivity(new Intent(DoctorBusinessInfoActivity.this,DoctorMyCalendarNewUserActivity.class));\r                    finish();\r                    dialog.dismiss();\r\r                }\r            });\r            Objects.requireNonNull(dialog.getWindow()).setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r            dialog.show();\r\r        } catch (WindowManager.BadTokenException e) {\r            e.printStackTrace();\r        }\r\r\r\r\r    }\r\r\r\r\r}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/petfolio/infinituss/doctor/DoctorBusinessInfoActivity.java b/app/src/main/java/com/petfolio/infinituss/doctor/DoctorBusinessInfoActivity.java
--- a/app/src/main/java/com/petfolio/infinituss/doctor/DoctorBusinessInfoActivity.java	(revision f1734ca40ba206b2d8b7b0e5c5470841991c7822)
+++ b/app/src/main/java/com/petfolio/infinituss/doctor/DoctorBusinessInfoActivity.java	(date 1632497726757)
@@ -1,5 +1,7 @@
 package com.petfolio.infinituss.doctor;
 
+import static android.os.Environment.DIRECTORY_DOCUMENTS;
+
 import android.Manifest;
 import android.annotation.SuppressLint;
 import android.app.Activity;
@@ -26,6 +28,7 @@
 import android.os.Handler;
 import android.provider.MediaStore;
 import android.provider.OpenableColumns;
+import android.text.TextUtils;
 import android.util.Log;
 import android.view.View;
 import android.view.WindowManager;
@@ -59,6 +62,7 @@
 import com.google.android.gms.common.api.GoogleApiClient;
 import com.google.android.gms.common.api.PendingResult;
 import com.google.android.gms.common.api.Status;
+import com.google.android.gms.common.util.IOUtils;
 import com.google.android.gms.location.LocationListener;
 import com.google.android.gms.location.LocationRequest;
 import com.google.android.gms.location.LocationServices;
@@ -87,6 +91,7 @@
 import com.petfolio.infinituss.interfaces.SpecTypeChckedListener;
 import com.petfolio.infinituss.doctor.DoctorBusinessInfoActivity;
 import com.petfolio.infinituss.doctor.DoctorBusinessInfoActivity;
+import com.petfolio.infinituss.petlover.PetLoverEditProfileImageActivity;
 import com.petfolio.infinituss.requestpojo.DocBusInfoUploadRequest;
 import com.petfolio.infinituss.responsepojo.AddPetTypeListModel;
 import com.petfolio.infinituss.responsepojo.AddSpecTypeListModel;
@@ -98,7 +103,7 @@
 import com.petfolio.infinituss.utils.ConnectionDetector;
 import com.petfolio.infinituss.utils.RestUtils;
 import com.petfolio.infinituss.utils.ScalingUtilities;
-import com.theartofdev.edmodo.cropper.CropImage;
+import com.canhub.cropper.CropImage;
 import com.wang.avi.AVLoadingIndicatorView;
 
 import java.io.ByteArrayOutputStream;
@@ -106,6 +111,7 @@
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.OutputStream;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
@@ -1991,7 +1997,7 @@
                     if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {
                         CropImage.ActivityResult result = CropImage.getActivityResult(data);
                         if (resultCode == RESULT_OK) {
-                            Uri resultUri = result.getUri();
+                            Uri resultUri = result.getUriContent();
 
                             if (resultUri != null) {
 
@@ -2001,7 +2007,9 @@
 
                                 Log.w("filename", " " + filename);
 
-                                String filePath = FileUtil.getPath(DoctorBusinessInfoActivity.this, resultUri);
+                               /* String filePath = FileUtil.getPath(DoctorBusinessInfoActivity.this, resultUri);*/
+
+                                String filePath = getFilePathFromURI(DoctorBusinessInfoActivity.this,resultUri);
 
                                 assert filePath != null;
 
@@ -3072,23 +3080,50 @@
         return Uri.parse(path);
     }
 
-    public String getFileName(Uri uri) {
-        String result = null;
-        if (uri.getScheme().equals("content")) {
-            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {
-                if (cursor != null && cursor.moveToFirst()) {
-                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));
-                }
-            }
-        }
-        if (result == null) {
-            result = uri.getPath();
-            int cut = result.lastIndexOf('/');
-            if (cut != -1) {
-                result = result.substring(cut + 1);
-            }
+    public static String getFilePathFromURI(Context context, Uri contentUri) {
+        //copy file and send new file path
+        String fileName = getFileName(contentUri);
+        if (!TextUtils.isEmpty(fileName)) {
+
+            String path = Environment.getExternalStoragePublicDirectory(DIRECTORY_DOCUMENTS).getPath() + "/" + "MyFirstApp/";
+            // Create the parent path
+            File dir = new File(path);
+            if (!dir.exists()) {
+                dir.mkdirs();
+            }
+
+            String fullName = path + "mylog";
+            File copyFile = new File (fullName);
+
+            /* File copyFile = new File(Environment.DIRECTORY_DOWNLOADS + File.separator + fileName);*/
+            copy(context, contentUri, copyFile);
+            return copyFile.getAbsolutePath();
+        }
+        return null;
+    }
+
+    public static String getFileName(Uri uri) {
+        if (uri == null) return null;
+        String fileName = null;
+        String path = uri.getPath();
+        int cut = path.lastIndexOf('/');
+        if (cut != -1) {
+            fileName = path.substring(cut + 1);
+        }
+        return fileName;
+    }
+
+    public static void copy(Context context, Uri srcUri, File dstFile) {
+        try {
+            InputStream inputStream = context.getContentResolver().openInputStream(srcUri);
+            if (inputStream == null) return;
+            OutputStream outputStream = new FileOutputStream(dstFile);
+            IOUtils.copyStream(inputStream, outputStream);
+            inputStream.close();
+            outputStream.close();
+        } catch (IOException e) {
+            e.printStackTrace();
         }
-        return result;
     }
 
 
Index: app/src/main/java/com/petfolio/infinituss/petlover/RegisterYourPetActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.petfolio.infinituss.petlover;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.Manifest;\r\nimport android.annotation.SuppressLint;\r\nimport android.annotation.TargetApi;\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.database.Cursor;\r\nimport android.graphics.Bitmap;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.provider.MediaStore;\r\nimport android.provider.OpenableColumns;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport com.google.gson.Gson;\r\nimport com.petfolio.infinituss.R;\r\nimport com.petfolio.infinituss.activity.LoginActivity;\r\nimport com.petfolio.infinituss.adapter.AddPetImageListAdapter;\r\nimport com.petfolio.infinituss.api.APIClient;\r\nimport com.petfolio.infinituss.api.RestApiInterface;\r\n\r\nimport com.petfolio.infinituss.appUtils.FileUtil;\r\nimport com.petfolio.infinituss.requestpojo.PetAddImageRequest;\r\nimport com.petfolio.infinituss.responsepojo.FileUploadResponse;\r\nimport com.petfolio.infinituss.responsepojo.PetAddImageResponse;\r\nimport com.petfolio.infinituss.sessionmanager.SessionManager;\r\nimport com.petfolio.infinituss.utils.RestUtils;\r\nimport com.theartofdev.edmodo.cropper.CropImage;\r\nimport com.wang.avi.AVLoadingIndicatorView;\r\n\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.OutputStream;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\nimport butterknife.BindView;\r\nimport butterknife.ButterKnife;\r\nimport cn.pedant.SweetAlert.SweetAlertDialog;\r\nimport es.dmoral.toasty.Toasty;\r\nimport okhttp3.MediaType;\r\nimport okhttp3.MultipartBody;\r\nimport okhttp3.RequestBody;\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.Manifest.permission.CAMERA;\r\nimport static android.Manifest.permission.READ_EXTERNAL_STORAGE;\r\nimport static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;\r\n\r\npublic class RegisterYourPetActivity extends AppCompatActivity implements View.OnClickListener {\r\n    private static final String TAG = \"RegisterYourPetActivity\";\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.img_back)\r\n    ImageView img_back;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.txt_skip)\r\n    TextView txt_skip;\r\n\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.img_pet_imge)\r\n    ImageView img_pet_imge;\r\n\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.avi_indicator)\r\n    AVLoadingIndicatorView avi_indicator;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.txt_uploadpetimage)\r\n    TextView txt_uploadpetimage;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.btn_continue)\r\n    Button btn_continue;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.rc_uploaded_pet_images)\r\n    RecyclerView rc_uploaded_pet_images;\r\n\r\n    private String petid;\r\n\r\n    public final int REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS = 1;\r\n    private static final String CAMERA_PERMISSION = CAMERA ;\r\n    private static final String READ_EXTERNAL_STORAGE_PERMISSION = READ_EXTERNAL_STORAGE;\r\n    private static final String WRITE_EXTERNAL_STORAGE_PERMISSION = WRITE_EXTERNAL_STORAGE;\r\n\r\n\r\n\r\n\r\n\r\n    private String ServerUrlImagePath;\r\n\r\n    private static final int REQUEST_READ_CLINIC_PIC_PERMISSION = 786;\r\n    private static final int REQUEST_CLINIC_CAMERA_PERMISSION_CODE = 785 ;\r\n\r\n\r\n\r\n\r\n    private static final int SELECT_CLINIC_CAMERA = 1000 ;\r\n\r\n    private static final int SELECT_CLINIC_PICTURE = 1001 ;\r\n    private MultipartBody.Part filePart;\r\n    private Object userid;\r\n\r\n    List<PetAddImageRequest.PetImgBean> pet_img = new ArrayList<>();\r\n    AddPetImageListAdapter addPetImageListAdapter;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_register_your_pet);\r\n        Log.w(TAG,\"onCreate \");\r\n        ButterKnife.bind(this);\r\n        avi_indicator.setVisibility(View.GONE);\r\n        btn_continue.setVisibility(View.GONE);\r\n        img_back.setOnClickListener(this);\r\n        txt_skip.setOnClickListener(this);\r\n        btn_continue.setOnClickListener(this);\r\n        txt_uploadpetimage.setOnClickListener(this);\r\n        img_pet_imge.setOnClickListener(this);\r\n\r\n        SessionManager  session = new SessionManager(getApplicationContext());\r\n        HashMap<String, String> user = session.getProfileDetails();\r\n        userid = user.get(SessionManager.KEY_ID);\r\n        Bundle extras = getIntent().getExtras();\r\n        if (extras != null) {\r\n         petid = extras.getString(\"petid\");\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @Override\r\n    public void onClick(View v) {\r\n        switch (v.getId()){\r\n            case R.id.img_back:\r\n                onBackPressed();\r\n                break;\r\n                case R.id.txt_skip:\r\n                    gotoPetloverDashboard();\r\n                break;\r\n                case R.id.txt_uploadpetimage:\r\n                    gotoUploadPetImage();\r\n                break;\r\n                case R.id.img_pet_imge:\r\n                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                            checkMultiplePermissions(REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS, RegisterYourPetActivity.this);\r\n                        }else{\r\n                            choosePetImage();\r\n\r\n                        }\r\n                break;\r\n\r\n                case R.id.btn_continue:\r\n                    PetAddImageResponseCall();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private void gotoUploadPetImage() {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n            checkMultiplePermissions(REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS, RegisterYourPetActivity.this);\r\n        }else{\r\n            choosePetImage();\r\n\r\n        }\r\n    }\r\n\r\n    private void gotoPetloverDashboard() {\r\n        Intent intent = new Intent(RegisterYourPetActivity.this,PetLoverDashboardActivity.class);\r\n        startActivity(intent);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        super.onBackPressed();\r\n        startActivity(new Intent(RegisterYourPetActivity.this, LoginActivity.class));\r\n        finish();\r\n    }\r\n\r\n\r\n\r\n\r\n    private void choosePetImage() {\r\n\r\n/*\r\n\r\n            final CharSequence[] items = {\"Take Photo\", \"Choose from Library\", \"Cancel\"};\r\n            //AlertDialog.Builder alert=new AlertDialog.Builder(this);\r\n            AlertDialog.Builder builder = new AlertDialog.Builder(RegisterYourPetActivity.this);\r\n            builder.setTitle(\"Choose option\");\r\n            builder.setItems(items, (dialog, item) -> {\r\n                if (items[item].equals(\"Take Photo\"))\r\n                {\r\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(RegisterYourPetActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r\n                    {\r\n                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\n                    }\r\n                    else\r\n                    {\r\n\r\n\r\n                        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\n\r\n                        startActivityForResult(intent, SELECT_CLINIC_CAMERA);\r\n                    }\r\n\r\n                }\r\n\r\n                else if (items[item].equals(\"Choose from Library\"))\r\n                {\r\n\r\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(RegisterYourPetActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r\n                    {\r\n                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r\n                    }\r\n\r\n                    else{\r\n\r\n                        Intent intent = new Intent();\r\n                        intent.setType(\"image/*\");\r\n                        intent.setAction(Intent.ACTION_GET_CONTENT);\r\n                        startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_CLINIC_PICTURE);\r\n\r\n\r\n                    }\r\n                }\r\n\r\n                else if (items[item].equals(\"Cancel\")) {\r\n                    dialog.dismiss();\r\n                }\r\n            });\r\n            builder.show();\r\n*/\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(RegisterYourPetActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r\n        {\r\n            requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\n        }\r\n\r\n        else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(RegisterYourPetActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r\n        {\r\n            requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r\n        }\r\n\r\n        else\r\n        {\r\n\r\n\r\n            CropImage.activity().start(RegisterYourPetActivity.this);\r\n\r\n            /*CropImage.activity().start(AddYourPetImageOlduserActivity.this);*/\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n\r\n        try {\r\n            if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {\r\n                CropImage.ActivityResult result = CropImage.getActivityResult(data);\r\n                if (resultCode == RESULT_OK) {\r\n                    Uri resultUri = result.getUri();\r\n\r\n                    if(resultUri!=null){\r\n\r\n                        Log.w(\"selectedImageUri\", \" \" + resultUri);\r\n\r\n                        String filename = getFileName(resultUri);\r\n\r\n                        Log.w(\"filename\", \" \" + filename);\r\n\r\n                        String filePath = FileUtil.getPath(RegisterYourPetActivity.this, resultUri);\r\n\r\n                        assert filePath != null;\r\n\r\n                        File file = new File(filePath); // initialize file here\r\n\r\n                        long length = file.length() / 1024; // Size in KB\r\n\r\n                        Log.w(\"filesize\", \" \" + length);\r\n\r\n                        if (length > 2000) {\r\n\r\n                            new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                                    .setTitleText(\"File Size\")\r\n                                    .setContentText(\"Please choose file size less than 2 MB \")\r\n                                    .setConfirmText(\"Ok\")\r\n                                    .show();\r\n                        } else {\r\n\r\n\r\n                            SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r\n                            String currentDateandTime = sdf.format(new Date());\r\n\r\n                            filePart = MultipartBody.Part.createFormData(\"sampleFile\", userid + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\n\r\n                            uploadPetImage();\r\n\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                    else {\r\n\r\n                        Toasty.warning(RegisterYourPetActivity.this,\"Image Error!!Please upload Some other image\",Toasty.LENGTH_LONG).show();\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n\r\n            if(requestCode== SELECT_CLINIC_PICTURE || requestCode == SELECT_CLINIC_CAMERA)\r\n            {\r\n\r\n                if(requestCode == SELECT_CLINIC_CAMERA)\r\n                {\r\n                    Bitmap photo = (Bitmap) data.getExtras().get(\"data\");\r\n\r\n                    File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\n\r\n                    OutputStream os;\r\n                    try {\r\n                        os = new FileOutputStream(file);\r\n                        photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r\n                        os.flush();\r\n                        os.close();\r\n                    } catch (Exception e) {\r\n                        Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r\n                    }\r\n                    SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r\n                    String currentDateandTime = sdf.format(new Date());\r\n\r\n                    RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\n\r\n                    filePart = MultipartBody.Part.createFormData(\"sampleFile\",  userid+currentDateandTime+file.getName(), requestFile);\r\n\r\n                    uploadPetImage();\r\n\r\n                }\r\n\r\n                else{\r\n\r\n                    try {\r\n                        if (resultCode == Activity.RESULT_OK)\r\n                        {\r\n\r\n                            Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\n\r\n                            Uri selectedImageUri = data.getData();\r\n\r\n                            Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\n\r\n                            String filename = getFileName(selectedImageUri);\r\n\r\n                            Log.w(\"filename\", \" \" + filename);\r\n\r\n                            String filePath = FileUtil.getPath(RegisterYourPetActivity.this,selectedImageUri);\r\n\r\n                            assert filePath != null;\r\n\r\n                            File file = new File(filePath); // initialize file here\r\n\r\n                            long length = file.length() / 1024; // Size in KB\r\n\r\n                            Log.w(\"filesize\", \" \" + length);\r\n\r\n                            SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r\n                            String currentDateandTime = sdf.format(new Date());\r\n\r\n                            filePart = MultipartBody.Part.createFormData(\"sampleFile\", userid+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\n\r\n                            uploadPetImage();\r\n\r\n\r\n                        }\r\n                    } catch (Exception e) {\r\n\r\n                        Log.w(\"Exception\", \" \" + e);\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n        catch (Exception e){\r\n            Log.w(TAG,\"onActivityResult exception\"+e.toString());\r\n        }\r\n\r\n        //\tToast.makeText(getActivity(),\"kk\",Toast.LENGTH_SHORT).show();\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    private void uploadPetImage() {\r\n\r\n        avi_indicator.show();\r\n\r\n        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\n\r\n\r\n        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(filePart);\r\n\r\n\r\n        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\n\r\n        call.enqueue(new Callback<FileUploadResponse>() {\r\n            @Override\r\n            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r\n                avi_indicator.smoothToHide();\r\n                Log.w(TAG,\"Profpic\"+ \"--->\" + new Gson().toJson(response.body()));\r\n\r\n                if (response.body() != null) {\r\n                    if (200 == response.body().getCode()) {\r\n\r\n                        ServerUrlImagePath = response.body().getData();\r\n                        btn_continue.setVisibility(View.VISIBLE);\r\n\r\n                        Log.w(TAG, \"ServerUrlImagePath \" + ServerUrlImagePath);\r\n\r\n                        if( response.body().getData() != null)\r\n                        {\r\n\r\n                            if(pet_img!=null&&pet_img.size()>=3){\r\n\r\n                                Toasty.warning(RegisterYourPetActivity.this,\"Sorry You can't Upload more than 3\", Toasty.LENGTH_LONG).show();\r\n\r\n                            }\r\n\r\n                            else\r\n                            {\r\n                                PetAddImageRequest.PetImgBean petImgBean = new PetAddImageRequest.PetImgBean();\r\n\r\n                                if(ServerUrlImagePath != null&&!ServerUrlImagePath.isEmpty())\r\n                                {\r\n                                    petImgBean.setPet_img(ServerUrlImagePath);\r\n\r\n                                    pet_img.add(petImgBean);\r\n\r\n                                }\r\n                                else\r\n                                {\r\n                                    petImgBean.setPet_img(APIClient.PROFILE_IMAGE_URL);\r\n\r\n                                    pet_img.add(petImgBean);\r\n\r\n                                }\r\n\r\n                                setView();\r\n\r\n                            }\r\n\r\n\r\n\r\n                        }\r\n\r\n                        else\r\n                        {\r\n                            Toasty.warning(RegisterYourPetActivity.this,\"Failed to Upload\", Toasty.LENGTH_LONG).show();\r\n\r\n                        }\r\n\r\n\r\n\r\n                    }\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r\n                // avi_indicator.smoothToHide();\r\n                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r\n                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    private void setView() {\r\n\r\n        rc_uploaded_pet_images.setHasFixedSize(true);\r\n\r\n        rc_uploaded_pet_images.setNestedScrollingEnabled(false);\r\n\r\n        LinearLayoutManager layoutManager = new LinearLayoutManager(RegisterYourPetActivity.this, LinearLayoutManager.HORIZONTAL, false);\r\n\r\n        rc_uploaded_pet_images.setLayoutManager(layoutManager);\r\n\r\n        addPetImageListAdapter = new AddPetImageListAdapter(this, pet_img);\r\n\r\n        rc_uploaded_pet_images.setAdapter(addPetImageListAdapter);\r\n\r\n    }\r\n\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.M)\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode,\r\n                                           @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        if (requestCode == REQUEST_READ_CLINIC_PIC_PERMISSION) {\r\n\r\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                Intent intent = new Intent();\r\n                intent.setType(\"image/*\");\r\n                intent.setAction(Intent.ACTION_GET_CONTENT);\r\n                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_CLINIC_PICTURE);\r\n\r\n            } else {\r\n                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                        .setTitleText(\"Permisson Required\")\r\n                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r\n                        .setConfirmText(\"Ok\")\r\n                        .setConfirmClickListener(sDialog -> {\r\n\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                                requestPermissions(new String[]{READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r\n                            }\r\n\r\n\r\n                        })\r\n                        .setCancelButton(\"Cancel\", sDialog -> {\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            showWarning(REQUEST_READ_CLINIC_PIC_PERMISSION);\r\n                        })\r\n                        .show();\r\n\r\n            }\r\n\r\n        } else if (requestCode == REQUEST_CLINIC_CAMERA_PERMISSION_CODE) {\r\n\r\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n\r\n                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\n\r\n                startActivityForResult(intent, SELECT_CLINIC_CAMERA);\r\n\r\n            } else {\r\n                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                        .setTitleText(\"Permisson Required\")\r\n                        .setContentText(\"Please Allow Camera for taking picture\")\r\n                        .setConfirmText(\"Ok\")\r\n                        .setConfirmClickListener(sDialog -> {\r\n\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                                requestPermissions(new String[]{CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\n                            }\r\n\r\n\r\n                        })\r\n                        .setCancelButton(\"Cancel\", sDialog -> {\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            showWarning(REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\n                        })\r\n                        .show();\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    //check for camera and storage access permissions\r\n    @TargetApi(Build.VERSION_CODES.M)\r\n    private void checkMultiplePermissions(int permissionCode, Context context) {\r\n\r\n        String[] PERMISSIONS = {CAMERA_PERMISSION, READ_EXTERNAL_STORAGE_PERMISSION, WRITE_EXTERNAL_STORAGE_PERMISSION};\r\n        if (!hasPermissions(context, PERMISSIONS)) {\r\n            ActivityCompat.requestPermissions((Activity) context, PERMISSIONS, permissionCode);\r\n        } else {\r\n            choosePetImage();\r\n            // Open your camera here.\r\n        }\r\n    }\r\n    private boolean hasPermissions(Context context, String... permissions) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && context != null && permissions != null) {\r\n            for (String permission : permissions) {\r\n                if (ActivityCompat.checkSelfPermission(context, permission) != PackageManager.PERMISSION_GRANTED) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private void showWarning(int REQUEST_PERMISSION_CODE) {\r\n\r\n        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                .setTitleText(\"Sorry!!\")\r\n                .setContentText(\"You Can't proceed further unless you allow permission\")\r\n                .setConfirmText(\"Ok\")\r\n                .setConfirmClickListener(sDialog -> {\r\n\r\n                    sDialog.dismissWithAnimation();\r\n\r\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)\r\n                    {\r\n                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_PERMISSION_CODE);\r\n                    }\r\n\r\n\r\n                })\r\n                .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r\n                .show();\r\n    }\r\n\r\n    public String getFileName(Uri uri) {\r\n        String result = null;\r\n        if (uri.getScheme().equals(\"content\")) {\r\n            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {\r\n                if (cursor != null && cursor.moveToFirst()) {\r\n                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));\r\n                }\r\n            }\r\n        }\r\n        if (result == null) {\r\n            result = uri.getPath();\r\n            int cut = result.lastIndexOf('/');\r\n            if (cut != -1) {\r\n                result = result.substring(cut + 1);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    private void PetAddImageResponseCall() {\r\n        avi_indicator.setVisibility(View.VISIBLE);\r\n        avi_indicator.smoothToShow();\r\n        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);\r\n        Call<PetAddImageResponse> call = apiInterface.PetAddImageResponseCall(RestUtils.getContentType(), petAddImageRequest());\r\n        Log.w(TAG,\"PetAddImageResponse url  :%s\"+\" \"+ call.request().url().toString());\r\n\r\n        call.enqueue(new Callback<PetAddImageResponse>() {\r\n            @Override\r\n            public void onResponse(@NonNull Call<PetAddImageResponse> call, @NonNull Response<PetAddImageResponse> response) {\r\n\r\n                Log.w(TAG,\"PetAddImageResponse\"+ \"--->\" + new Gson().toJson(response.body()));\r\n\r\n                avi_indicator.smoothToHide();\r\n\r\n                if (response.body() != null) {\r\n                    if(response.body().getCode() == 200){\r\n                        gotoPetloverDashboard();\r\n                    }\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call<PetAddImageResponse> call, @NonNull Throwable t) {\r\n\r\n                avi_indicator.smoothToHide();\r\n                Log.w(TAG,\"PetAddImageResponse flr\"+\"--->\" + t.getMessage());\r\n            }\r\n        });\r\n\r\n    }\r\n    private PetAddImageRequest petAddImageRequest() {\r\n\r\n\r\n\r\n        PetAddImageRequest petAddImageRequest = new PetAddImageRequest();\r\n        petAddImageRequest.set_id(petid);\r\n        petAddImageRequest.setPet_img(pet_img);\r\n        Log.w(TAG,\"petAddImageRequest\"+ \"--->\" + new Gson().toJson(petAddImageRequest));\r\n        return petAddImageRequest;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/petfolio/infinituss/petlover/RegisterYourPetActivity.java b/app/src/main/java/com/petfolio/infinituss/petlover/RegisterYourPetActivity.java
--- a/app/src/main/java/com/petfolio/infinituss/petlover/RegisterYourPetActivity.java	(revision f1734ca40ba206b2d8b7b0e5c5470841991c7822)
+++ b/app/src/main/java/com/petfolio/infinituss/petlover/RegisterYourPetActivity.java	(date 1632498661119)
@@ -21,14 +21,17 @@
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
+import android.os.Environment;
 import android.provider.MediaStore;
 import android.provider.OpenableColumns;
+import android.text.TextUtils;
 import android.util.Log;
 import android.view.View;
 import android.widget.Button;
 import android.widget.ImageView;
 import android.widget.TextView;
 
+import com.google.android.gms.common.util.IOUtils;
 import com.google.gson.Gson;
 import com.petfolio.infinituss.R;
 import com.petfolio.infinituss.activity.LoginActivity;
@@ -42,11 +45,13 @@
 import com.petfolio.infinituss.responsepojo.PetAddImageResponse;
 import com.petfolio.infinituss.sessionmanager.SessionManager;
 import com.petfolio.infinituss.utils.RestUtils;
-import com.theartofdev.edmodo.cropper.CropImage;
+import com.canhub.cropper.CropImage;
 import com.wang.avi.AVLoadingIndicatorView;
 
 import java.io.File;
 import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
 import java.io.OutputStream;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
@@ -69,6 +74,7 @@
 import static android.Manifest.permission.CAMERA;
 import static android.Manifest.permission.READ_EXTERNAL_STORAGE;
 import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;
+import static android.os.Environment.DIRECTORY_DOCUMENTS;
 
 public class RegisterYourPetActivity extends AppCompatActivity implements View.OnClickListener {
     private static final String TAG = "RegisterYourPetActivity";
@@ -291,7 +297,7 @@
             if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {
                 CropImage.ActivityResult result = CropImage.getActivityResult(data);
                 if (resultCode == RESULT_OK) {
-                    Uri resultUri = result.getUri();
+                    Uri resultUri = result.getUriContent();
 
                     if(resultUri!=null){
 
@@ -651,24 +657,52 @@
                 .show();
     }
 
-    public String getFileName(Uri uri) {
-        String result = null;
-        if (uri.getScheme().equals("content")) {
-            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {
-                if (cursor != null && cursor.moveToFirst()) {
-                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));
-                }
-            }
-        }
-        if (result == null) {
-            result = uri.getPath();
-            int cut = result.lastIndexOf('/');
-            if (cut != -1) {
-                result = result.substring(cut + 1);
-            }
+    public static String getFilePathFromURI(Context context, Uri contentUri) {
+        //copy file and send new file path
+        String fileName = getFileName(contentUri);
+        if (!TextUtils.isEmpty(fileName)) {
+
+            String path = Environment.getExternalStoragePublicDirectory(DIRECTORY_DOCUMENTS).getPath() + "/" + "MyFirstApp/";
+            // Create the parent path
+            File dir = new File(path);
+            if (!dir.exists()) {
+                dir.mkdirs();
+            }
+
+            String fullName = path + "mylog";
+            File copyFile = new File (fullName);
+
+            /* File copyFile = new File(Environment.DIRECTORY_DOWNLOADS + File.separator + fileName);*/
+            copy(context, contentUri, copyFile);
+            return copyFile.getAbsolutePath();
+        }
+        return null;
+    }
+
+    public static String getFileName(Uri uri) {
+        if (uri == null) return null;
+        String fileName = null;
+        String path = uri.getPath();
+        int cut = path.lastIndexOf('/');
+        if (cut != -1) {
+            fileName = path.substring(cut + 1);
+        }
+        return fileName;
+    }
+
+    public static void copy(Context context, Uri srcUri, File dstFile) {
+        try {
+            InputStream inputStream = context.getContentResolver().openInputStream(srcUri);
+            if (inputStream == null) return;
+            OutputStream outputStream = new FileOutputStream(dstFile);
+            IOUtils.copyStream(inputStream, outputStream);
+            inputStream.close();
+            outputStream.close();
+        } catch (IOException e) {
+            e.printStackTrace();
         }
-        return result;
     }
+
 
 
     private void PetAddImageResponseCall() {
Index: app/src/main/java/com/petfolio/infinituss/serviceprovider/SPEditProfileImageActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.petfolio.infinituss.serviceprovider;\r\n\r\nimport android.Manifest;\r\nimport android.annotation.SuppressLint;\r\nimport android.annotation.TargetApi;\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.database.Cursor;\r\nimport android.graphics.Bitmap;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.provider.MediaStore;\r\nimport android.provider.OpenableColumns;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.google.gson.Gson;\r\nimport com.petfolio.infinituss.R;\r\nimport com.petfolio.infinituss.api.APIClient;\r\nimport com.petfolio.infinituss.api.RestApiInterface;\r\nimport com.petfolio.infinituss.appUtils.FileUtil;\r\nimport com.petfolio.infinituss.serviceprovider.SPEditProfileImageActivity;\r\nimport com.petfolio.infinituss.serviceprovider.SPEditProfileImageActivity;\r\nimport com.petfolio.infinituss.requestpojo.DoctorUpdateProfileImageRequest;\r\nimport com.petfolio.infinituss.responsepojo.DoctorUpdateProfileImageResponse;\r\nimport com.petfolio.infinituss.responsepojo.FileUploadResponse;\r\nimport com.petfolio.infinituss.sessionmanager.SessionManager;\r\nimport com.petfolio.infinituss.utils.RestUtils;\r\nimport com.theartofdev.edmodo.cropper.CropImage;\r\nimport com.wang.avi.AVLoadingIndicatorView;\r\n\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.OutputStream;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Locale;\r\n\r\nimport butterknife.BindView;\r\nimport butterknife.ButterKnife;\r\nimport cn.pedant.SweetAlert.SweetAlertDialog;\r\nimport es.dmoral.toasty.Toasty;\r\nimport okhttp3.MediaType;\r\nimport okhttp3.MultipartBody;\r\nimport okhttp3.RequestBody;\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.Manifest.permission.CAMERA;\r\nimport static android.Manifest.permission.READ_EXTERNAL_STORAGE;\r\nimport static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;\r\n\r\npublic class SPEditProfileImageActivity extends AppCompatActivity implements View.OnClickListener {\r\n    private  String TAG = \"SPEditProfileImageActivity\";\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.img_back)\r\n    ImageView img_back;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.img_pet_imge)\r\n    ImageView img_pet_imge;\r\n\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.avi_indicator)\r\n    AVLoadingIndicatorView avi_indicator;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.txt_uploadpetimage)\r\n    TextView txt_uploadpetimage;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.btn_continue)\r\n    Button btn_continue;\r\n\r\n\r\n    public final int REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS = 1;\r\n    private static final String CAMERA_PERMISSION = CAMERA ;\r\n    private static final String READ_EXTERNAL_STORAGE_PERMISSION = READ_EXTERNAL_STORAGE;\r\n    private static final String WRITE_EXTERNAL_STORAGE_PERMISSION = WRITE_EXTERNAL_STORAGE;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    private static final int REQUEST_READ_CLINIC_PIC_PERMISSION = 786;\r\n    private static final int REQUEST_CLINIC_CAMERA_PERMISSION_CODE = 785 ;\r\n\r\n\r\n\r\n\r\n    private static final int SELECT_CLINIC_CAMERA = 1000 ;\r\n\r\n    private static final int SELECT_CLINIC_PICTURE = 1001 ;\r\n    private MultipartBody.Part filePart;\r\n    private String userid;\r\n    private String firstname,lastname,useremail;\r\n    private String phonenumber,usertype,userstatus,profileimage;\r\n    private String verifyemailstatus;\r\n    private String refcode;\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_pet_lover_edit_profile_image);\r\n        Log.w(TAG,\"onCreate \");\r\n        ButterKnife.bind(this);\r\n        avi_indicator.setVisibility(View.GONE);\r\n        btn_continue.setVisibility(View.GONE);\r\n        img_back.setOnClickListener(this);\r\n        btn_continue.setOnClickListener(this);\r\n        txt_uploadpetimage.setOnClickListener(this);\r\n        img_pet_imge.setOnClickListener(this);\r\n\r\n\r\n\r\n        SessionManager session = new SessionManager(getApplicationContext());\r\n        HashMap<String, String> user = session.getProfileDetails();\r\n        firstname = user.get(SessionManager.KEY_FIRST_NAME);\r\n        lastname = user.get(SessionManager.KEY_LAST_NAME);\r\n        useremail = user.get(SessionManager.KEY_EMAIL_ID);\r\n        phonenumber = user.get(SessionManager.KEY_MOBILE);\r\n        userid = user.get(SessionManager.KEY_ID);\r\n        usertype = user.get(SessionManager.KEY_TYPE);\r\n        userstatus = user.get(SessionManager.KEY_PROFILE_STATUS);\r\n        profileimage = user.get(SessionManager.KEY_PROFILE_IMAGE);\r\n        verifyemailstatus = user.get(SessionManager.KEY_VERIFY_EMAIL_STATUS);\r\n        refcode = user.get(SessionManager.KEY_REF_CODE);\r\n\r\n\r\n        if(profileimage != null && !profileimage.isEmpty()){\r\n            Glide.with(SPEditProfileImageActivity.this)\r\n                    .load(profileimage)\r\n                    .into(img_pet_imge);\r\n        }else{\r\n            Glide.with(SPEditProfileImageActivity.this)\r\n                    .load(R.drawable.image_thumbnail)\r\n                    .into(img_pet_imge);\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @Override\r\n    public void onClick(View v) {\r\n        switch (v.getId()){\r\n            case R.id.img_back:\r\n                onBackPressed();\r\n                break;\r\n\r\n\r\n            case R.id.txt_uploadpetimage:\r\n                gotoUplodPetLoverImage();\r\n                break;\r\n\r\n            case R.id.img_pet_imge:\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                    checkMultiplePermissions(REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS, SPEditProfileImageActivity.this);\r\n                }else{\r\n                    choosePetLoverImage();\r\n\r\n                }\r\n                break;\r\n\r\n            case R.id.btn_continue:\r\n                petLoverUpdateProfileImageResponseCall();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private void gotoUplodPetLoverImage() {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n            checkMultiplePermissions(REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS, SPEditProfileImageActivity.this);\r\n        }else{\r\n            choosePetLoverImage();\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        super.onBackPressed();\r\n         startActivity(new Intent(SPEditProfileImageActivity.this, SPProfileScreenActivity.class));\r\n        finish();\r\n    }\r\n\r\n\r\n\r\n\r\n    private void choosePetLoverImage() {\r\n\r\n\r\n     /*   final CharSequence[] items = {\"Take Photo\", \"Choose from Library\", \"Cancel\"};\r\n        //AlertDialog.Builder alert=new AlertDialog.Builder(this);\r\n        AlertDialog.Builder builder = new AlertDialog.Builder(SPEditProfileImageActivity.this);\r\n        builder.setTitle(\"Choose option\");\r\n        builder.setItems(items, (dialog, item) -> {\r\n            if (items[item].equals(\"Take Photo\"))\r\n            {\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(SPEditProfileImageActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r\n                {\r\n                    requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\n                }\r\n                else\r\n                {\r\n\r\n\r\n                    Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\n\r\n                    startActivityForResult(intent, SELECT_CLINIC_CAMERA);\r\n                }\r\n\r\n            }\r\n\r\n            else if (items[item].equals(\"Choose from Library\"))\r\n            {\r\n\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(SPEditProfileImageActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r\n                {\r\n                    requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r\n                }\r\n\r\n                else{\r\n\r\n                    Intent intent = new Intent();\r\n                    intent.setType(\"image/*\");\r\n                    intent.setAction(Intent.ACTION_GET_CONTENT);\r\n                    startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_CLINIC_PICTURE);\r\n\r\n\r\n                }\r\n            }\r\n\r\n            else if (items[item].equals(\"Cancel\")) {\r\n                dialog.dismiss();\r\n            }\r\n        });\r\n        builder.show();*/\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(SPEditProfileImageActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r\n        {\r\n            requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\n        }\r\n\r\n        else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(SPEditProfileImageActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r\n        {\r\n            requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r\n        }\r\n\r\n        else\r\n        {\r\n\r\n\r\n            CropImage.activity().start(SPEditProfileImageActivity.this);\r\n\r\n            /*CropImage.activity().start(AddYourPetImageOlduserActivity.this);*/\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    @SuppressLint(\"LogNotTimber\")\r\n    @Override\r\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        try{\r\n\r\n            if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {\r\n                CropImage.ActivityResult result = CropImage.getActivityResult(data);\r\n                if (resultCode == RESULT_OK) {\r\n                    Uri resultUri = result.getUri();\r\n\r\n                    if (resultUri != null) {\r\n\r\n                        Log.w(\"selectedImageUri\", \" \" + resultUri);\r\n\r\n                        String filename = getFileName(resultUri);\r\n\r\n                        Log.w(\"filename\", \" \" + filename);\r\n\r\n                        String filePath = FileUtil.getPath(SPEditProfileImageActivity.this, resultUri);\r\n\r\n                        assert filePath != null;\r\n\r\n                        File file = new File(filePath); // initialize file here\r\n\r\n                        long length = file.length() / 1024; // Size in KB\r\n\r\n                        Log.w(\"filesize\", \" \" + length);\r\n\r\n                        if (length > 2000) {\r\n\r\n                            new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                                    .setTitleText(\"File Size\")\r\n                                    .setContentText(\"Please choose file size less than 2 MB \")\r\n                                    .setConfirmText(\"Ok\")\r\n                                    .show();\r\n                        } else {\r\n\r\n\r\n                            SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r\n                            String currentDateandTime = sdf.format(new Date());\r\n\r\n                            filePart = MultipartBody.Part.createFormData(\"sampleFile\", userid + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\n\r\n                            uploadProfileImage();\r\n\r\n                        }\r\n\r\n\r\n                    } else {\r\n\r\n                        Toasty.warning(SPEditProfileImageActivity.this, \"Image Error!!Please upload Some other image\", Toasty.LENGTH_LONG).show();\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n\r\n            else if(requestCode== SELECT_CLINIC_PICTURE || requestCode == SELECT_CLINIC_CAMERA)\r\n            {\r\n\r\n                if(requestCode == SELECT_CLINIC_CAMERA)\r\n                {\r\n                    if(data.getExtras() != null){\r\n                        Bitmap photo = (Bitmap) data.getExtras().get(\"data\");\r\n                        Log.w(TAG,\"photo width : \"+photo.getWidth()+\" height : \"+photo.getHeight());\r\n\r\n                        File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\n\r\n                        OutputStream os;\r\n                        try {\r\n                            os = new FileOutputStream(file);\r\n                            photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r\n                            os.flush();\r\n                            os.close();\r\n                        } catch (Exception e) {\r\n                            Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r\n                        }\r\n                        SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r\n                        String currentDateandTime = sdf.format(new Date());\r\n\r\n                        RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\n\r\n                        filePart = MultipartBody.Part.createFormData(\"sampleFile\",  userid+currentDateandTime+file.getName(), requestFile);\r\n\r\n                        uploadProfileImage();\r\n                    }\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n                else{\r\n\r\n                    try {\r\n                        if (resultCode == Activity.RESULT_OK)\r\n                        {\r\n\r\n                            Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\n\r\n                            Uri selectedImageUri = data.getData();\r\n\r\n                            Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\n\r\n                            String filename = getFileName(selectedImageUri);\r\n\r\n                            Log.w(\"filename\", \" \" + filename);\r\n\r\n                            String filePath = FileUtil.getPath(SPEditProfileImageActivity.this,selectedImageUri);\r\n\r\n                            assert filePath != null;\r\n\r\n                            File file = new File(filePath); // initialize file here\r\n\r\n                            long length = file.length() / 1024; // Size in KB\r\n\r\n                            Log.w(\"filesize\", \" \" + length);\r\n\r\n                            SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r\n                            String currentDateandTime = sdf.format(new Date());\r\n\r\n                            filePart = MultipartBody.Part.createFormData(\"sampleFile\", userid+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\n\r\n                            uploadProfileImage();\r\n\r\n\r\n                        }\r\n                    } catch (Exception e) {\r\n\r\n                        Log.w(\"Exception\", \" \" + e);\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    @SuppressLint(\"LogNotTimber\")\r\n    private void uploadProfileImage() {\r\n        avi_indicator.show();\r\n        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\n        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(filePart);\r\n        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\n        call.enqueue(new Callback<FileUploadResponse>() {\r\n            @Override\r\n            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r\n                avi_indicator.smoothToHide();\r\n                Log.w(TAG,\"Profpic\"+ \"--->\" + new Gson().toJson(response.body()));\r\n\r\n                if (response.body() != null) {\r\n                    if (200 == response.body().getCode()) {\r\n\r\n                        profileimage = response.body().getData();\r\n                        btn_continue.setVisibility(View.VISIBLE);\r\n\r\n                        Log.w(TAG, \"ServerUrlImagePath \" + profileimage);\r\n\r\n                        if( response.body().getData() != null){\r\n                            Glide.with(SPEditProfileImageActivity.this)\r\n                                    .load(profileimage)\r\n                                    .into(img_pet_imge);\r\n                        }else{\r\n                            Glide.with(SPEditProfileImageActivity.this)\r\n                                    .load(R.drawable.image_thumbnail)\r\n                                    .into(img_pet_imge);\r\n\r\n                        }\r\n\r\n\r\n\r\n                    }\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r\n                // avi_indicator.smoothToHide();\r\n                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r\n                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.M)\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode,\r\n                                           @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n\r\n        if (requestCode == REQUEST_READ_CLINIC_PIC_PERMISSION) {\r\n\r\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n               /* Intent intent = new Intent();\r\n                intent.setType(\"image/*\");\r\n                intent.setAction(Intent.ACTION_GET_CONTENT);\r\n                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_CLINIC_PICTURE);\r\n*/\r\n                choosePetLoverImage();\r\n            } else {\r\n                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                        .setTitleText(\"Permisson Required\")\r\n                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r\n                        .setConfirmText(\"Ok\")\r\n                        .setConfirmClickListener(sDialog -> {\r\n\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                                requestPermissions(new String[]{READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r\n                            }\r\n\r\n\r\n                        })\r\n                        .setCancelButton(\"Cancel\", sDialog -> {\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            showWarning(REQUEST_READ_CLINIC_PIC_PERMISSION);\r\n                        })\r\n                        .show();\r\n\r\n            }\r\n\r\n        }\r\n\r\n        else if (requestCode == REQUEST_CLINIC_CAMERA_PERMISSION_CODE) {\r\n\r\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n\r\n               /* Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\n\r\n                startActivityForResult(intent, SELECT_CLINIC_CAMERA);*/\r\n\r\n                choosePetLoverImage();\r\n\r\n            } else {\r\n                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                        .setTitleText(\"Permisson Required\")\r\n                        .setContentText(\"Please Allow Camera for taking picture\")\r\n                        .setConfirmText(\"Ok\")\r\n                        .setConfirmClickListener(sDialog -> {\r\n\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                                requestPermissions(new String[]{CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\n                            }\r\n\r\n\r\n                        })\r\n                        .setCancelButton(\"Cancel\", sDialog -> {\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            showWarning(REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\n                        })\r\n                        .show();\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    //check for camera and storage access permissions\r\n    @TargetApi(Build.VERSION_CODES.M)\r\n    private void checkMultiplePermissions(int permissionCode, Context context) {\r\n\r\n        String[] PERMISSIONS = {CAMERA_PERMISSION, READ_EXTERNAL_STORAGE_PERMISSION, WRITE_EXTERNAL_STORAGE_PERMISSION};\r\n        if (!hasPermissions(context, PERMISSIONS)) {\r\n            ActivityCompat.requestPermissions((Activity) context, PERMISSIONS, permissionCode);\r\n        } else {\r\n            choosePetLoverImage();\r\n            // Open your camera here.\r\n        }\r\n    }\r\n    private boolean hasPermissions(Context context, String... permissions) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && context != null && permissions != null) {\r\n            for (String permission : permissions) {\r\n                if (ActivityCompat.checkSelfPermission(context, permission) != PackageManager.PERMISSION_GRANTED) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private void showWarning(int REQUEST_PERMISSION_CODE) {\r\n\r\n        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                .setTitleText(\"Sorry!!\")\r\n                .setContentText(\"You Can't proceed further unless you allow permission\")\r\n                .setConfirmText(\"Ok\")\r\n                .setConfirmClickListener(sDialog -> {\r\n\r\n                    sDialog.dismissWithAnimation();\r\n\r\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)\r\n                    {\r\n                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_PERMISSION_CODE);\r\n                    }\r\n\r\n\r\n                })\r\n                .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r\n                .show();\r\n    }\r\n\r\n    public String getFileName(Uri uri) {\r\n        String result = null;\r\n        if (uri.getScheme().equals(\"content\")) {\r\n            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {\r\n                if (cursor != null && cursor.moveToFirst()) {\r\n                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));\r\n                }\r\n            }\r\n        }\r\n        if (result == null) {\r\n            result = uri.getPath();\r\n            int cut = result.lastIndexOf('/');\r\n            if (cut != -1) {\r\n                result = result.substring(cut + 1);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    private void petLoverUpdateProfileImageResponseCall() {\r\n        avi_indicator.setVisibility(View.VISIBLE);\r\n        avi_indicator.smoothToShow();\r\n        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);\r\n        Call<DoctorUpdateProfileImageResponse> call = apiInterface.DoctorUpdateProfileImageResponseCall(RestUtils.getContentType(), doctorUpdateProfileImageRequest());\r\n        Log.w(TAG,\"petLoverUpdateProfileImageResponseCall url  :%s\"+\" \"+ call.request().url().toString());\r\n\r\n        call.enqueue(new Callback<DoctorUpdateProfileImageResponse>() {\r\n            @Override\r\n            public void onResponse(@NonNull Call<DoctorUpdateProfileImageResponse> call, @NonNull Response<DoctorUpdateProfileImageResponse> response) {\r\n\r\n                Log.w(TAG,\"petLoverUpdateProfileImageResponse\"+ \"--->\" + new Gson().toJson(response.body()));\r\n                Log.w(TAG,\"profileimage\"+ \"--->\" + profileimage);\r\n\r\n                avi_indicator.smoothToHide();\r\n\r\n                if (response.body() != null) {\r\n                    if(response.body().getCode() == 200){\r\n                        SessionManager sessionManager = new SessionManager(getApplicationContext());\r\n                        sessionManager.setIsLogin(true);\r\n                        sessionManager.createLoginSession(\r\n                                userid,\r\n                                firstname,\r\n                                lastname,\r\n                                useremail,\r\n                                phonenumber,\r\n                                String.valueOf(usertype),\r\n                                userstatus,\r\n                                profileimage,\r\n                                verifyemailstatus,\r\n                                refcode\r\n\r\n                        );\r\n                        onBackPressed();\r\n                        //gotoDoctorProfileScreenActivity();\r\n                    }\r\n                    else{\r\n                        //showErrorLoading(response.body().getMessage());\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call<DoctorUpdateProfileImageResponse> call, @NonNull Throwable t) {\r\n\r\n                avi_indicator.smoothToHide();\r\n                Log.w(TAG,\"petLoverUpdateProfileImageResponse flr\"+\"--->\" + t.getMessage());\r\n            }\r\n        });\r\n\r\n    }\r\n    private DoctorUpdateProfileImageRequest doctorUpdateProfileImageRequest() {\r\n        DoctorUpdateProfileImageRequest  doctorUpdateProfileImageRequest = new DoctorUpdateProfileImageRequest();\r\n        doctorUpdateProfileImageRequest.setUser_id(userid);\r\n        if(profileimage != null && !profileimage.isEmpty()){\r\n        doctorUpdateProfileImageRequest.setProfile_img(profileimage);\r\n        }else{\r\n            doctorUpdateProfileImageRequest.setProfile_img(APIClient.PROFILE_IMAGE_URL);\r\n\r\n        }\r\n        Log.w(TAG,\"doctorUpdateProfileImageRequest\"+ \"--->\" + new Gson().toJson(doctorUpdateProfileImageRequest));\r\n        return doctorUpdateProfileImageRequest;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/petfolio/infinituss/serviceprovider/SPEditProfileImageActivity.java b/app/src/main/java/com/petfolio/infinituss/serviceprovider/SPEditProfileImageActivity.java
--- a/app/src/main/java/com/petfolio/infinituss/serviceprovider/SPEditProfileImageActivity.java	(revision f1734ca40ba206b2d8b7b0e5c5470841991c7822)
+++ b/app/src/main/java/com/petfolio/infinituss/serviceprovider/SPEditProfileImageActivity.java	(date 1632498661252)
@@ -12,8 +12,10 @@
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
+import android.os.Environment;
 import android.provider.MediaStore;
 import android.provider.OpenableColumns;
+import android.text.TextUtils;
 import android.util.Log;
 import android.view.View;
 import android.widget.Button;
@@ -28,6 +30,7 @@
 import androidx.core.content.ContextCompat;
 
 import com.bumptech.glide.Glide;
+import com.google.android.gms.common.util.IOUtils;
 import com.google.gson.Gson;
 import com.petfolio.infinituss.R;
 import com.petfolio.infinituss.api.APIClient;
@@ -40,11 +43,13 @@
 import com.petfolio.infinituss.responsepojo.FileUploadResponse;
 import com.petfolio.infinituss.sessionmanager.SessionManager;
 import com.petfolio.infinituss.utils.RestUtils;
-import com.theartofdev.edmodo.cropper.CropImage;
+import com.canhub.cropper.CropImage;
 import com.wang.avi.AVLoadingIndicatorView;
 
 import java.io.File;
 import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
 import java.io.OutputStream;
 import java.text.SimpleDateFormat;
 import java.util.Date;
@@ -65,6 +70,7 @@
 import static android.Manifest.permission.CAMERA;
 import static android.Manifest.permission.READ_EXTERNAL_STORAGE;
 import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;
+import static android.os.Environment.DIRECTORY_DOCUMENTS;
 
 public class SPEditProfileImageActivity extends AppCompatActivity implements View.OnClickListener {
     private  String TAG = "SPEditProfileImageActivity";
@@ -296,7 +302,7 @@
             if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {
                 CropImage.ActivityResult result = CropImage.getActivityResult(data);
                 if (resultCode == RESULT_OK) {
-                    Uri resultUri = result.getUri();
+                    Uri resultUri = result.getUriContent();
 
                     if (resultUri != null) {
 
@@ -306,7 +312,7 @@
 
                         Log.w("filename", " " + filename);
 
-                        String filePath = FileUtil.getPath(SPEditProfileImageActivity.this, resultUri);
+                        String filePath = getFilePathFromURI(SPEditProfileImageActivity.this, resultUri);
 
                         assert filePath != null;
 
@@ -612,24 +618,52 @@
                 .show();
     }
 
-    public String getFileName(Uri uri) {
-        String result = null;
-        if (uri.getScheme().equals("content")) {
-            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {
-                if (cursor != null && cursor.moveToFirst()) {
-                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));
-                }
-            }
-        }
-        if (result == null) {
-            result = uri.getPath();
-            int cut = result.lastIndexOf('/');
-            if (cut != -1) {
-                result = result.substring(cut + 1);
-            }
+    public static String getFilePathFromURI(Context context, Uri contentUri) {
+        //copy file and send new file path
+        String fileName = getFileName(contentUri);
+        if (!TextUtils.isEmpty(fileName)) {
+
+            String path = Environment.getExternalStoragePublicDirectory(DIRECTORY_DOCUMENTS).getPath() + "/" + "MyFirstApp/";
+            // Create the parent path
+            File dir = new File(path);
+            if (!dir.exists()) {
+                dir.mkdirs();
+            }
+
+            String fullName = path + "mylog";
+            File copyFile = new File (fullName);
+
+            /* File copyFile = new File(Environment.DIRECTORY_DOWNLOADS + File.separator + fileName);*/
+            copy(context, contentUri, copyFile);
+            return copyFile.getAbsolutePath();
+        }
+        return null;
+    }
+
+    public static String getFileName(Uri uri) {
+        if (uri == null) return null;
+        String fileName = null;
+        String path = uri.getPath();
+        int cut = path.lastIndexOf('/');
+        if (cut != -1) {
+            fileName = path.substring(cut + 1);
+        }
+        return fileName;
+    }
+
+    public static void copy(Context context, Uri srcUri, File dstFile) {
+        try {
+            InputStream inputStream = context.getContentResolver().openInputStream(srcUri);
+            if (inputStream == null) return;
+            OutputStream outputStream = new FileOutputStream(dstFile);
+            IOUtils.copyStream(inputStream, outputStream);
+            inputStream.close();
+            outputStream.close();
+        } catch (IOException e) {
+            e.printStackTrace();
         }
-        return result;
     }
+
 
 
     private void petLoverUpdateProfileImageResponseCall() {
Index: app/src/main/java/com/petfolio/infinituss/vendor/EditVendorProfileImageActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.petfolio.infinituss.vendor;\r\n\r\nimport android.Manifest;\r\nimport android.annotation.SuppressLint;\r\nimport android.annotation.TargetApi;\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.database.Cursor;\r\nimport android.graphics.Bitmap;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.provider.MediaStore;\r\nimport android.provider.OpenableColumns;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.google.gson.Gson;\r\nimport com.petfolio.infinituss.R;\r\nimport com.petfolio.infinituss.api.APIClient;\r\nimport com.petfolio.infinituss.api.RestApiInterface;\r\nimport com.petfolio.infinituss.appUtils.FileUtil;\r\nimport com.petfolio.infinituss.requestpojo.DoctorUpdateProfileImageRequest;\r\nimport com.petfolio.infinituss.responsepojo.DoctorUpdateProfileImageResponse;\r\nimport com.petfolio.infinituss.responsepojo.FileUploadResponse;\r\nimport com.petfolio.infinituss.serviceprovider.SPEditProfileImageActivity;\r\nimport com.petfolio.infinituss.sessionmanager.SessionManager;\r\nimport com.petfolio.infinituss.utils.RestUtils;\r\nimport com.theartofdev.edmodo.cropper.CropImage;\r\nimport com.wang.avi.AVLoadingIndicatorView;\r\n\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.OutputStream;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Locale;\r\nimport java.util.Objects;\r\n\r\nimport butterknife.BindView;\r\nimport butterknife.ButterKnife;\r\nimport cn.pedant.SweetAlert.SweetAlertDialog;\r\nimport es.dmoral.toasty.Toasty;\r\nimport okhttp3.MediaType;\r\nimport okhttp3.MultipartBody;\r\nimport okhttp3.RequestBody;\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.Manifest.permission.CAMERA;\r\nimport static android.Manifest.permission.READ_EXTERNAL_STORAGE;\r\nimport static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;\r\n\r\npublic class EditVendorProfileImageActivity extends AppCompatActivity implements View.OnClickListener {\r\n    private final String TAG = \"EditVendorProfileImageActivity\";\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.img_back)\r\n    ImageView img_back;\r\n\r\n\r\n\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.img_pet_imge)\r\n    ImageView img_pet_imge;\r\n\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.avi_indicator)\r\n    AVLoadingIndicatorView avi_indicator;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.txt_uploadpetimage)\r\n    TextView txt_uploadpetimage;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.btn_continue)\r\n    Button btn_continue;\r\n\r\n\r\n    private static final String CAMERA_PERMISSION = CAMERA ;\r\n    private static final String READ_EXTERNAL_STORAGE_PERMISSION = READ_EXTERNAL_STORAGE;\r\n    private static final String WRITE_EXTERNAL_STORAGE_PERMISSION = WRITE_EXTERNAL_STORAGE;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    private static final int REQUEST_READ_CLINIC_PIC_PERMISSION = 786;\r\n    private static final int REQUEST_CLINIC_CAMERA_PERMISSION_CODE = 785 ;\r\n\r\n\r\n\r\n\r\n    private static final int SELECT_CLINIC_CAMERA = 1000 ;\r\n\r\n    private static final int SELECT_CLINIC_PICTURE = 1001 ;\r\n    private MultipartBody.Part filePart;\r\n    private String userid;\r\n    private String firstname,lastname,useremail;\r\n    private String phonenumber,usertype,userstatus,profileimage;\r\n    private String verifyemailstatus;\r\n    private String refcode;\r\n\r\n\r\n    @SuppressLint({\"LogNotTimber\", \"LongLogTag\"})\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_edit_doctor_profile_image);\r\n        Log.w(TAG,\"onCreate \");\r\n        ButterKnife.bind(this);\r\n        avi_indicator.setVisibility(View.GONE);\r\n        btn_continue.setVisibility(View.GONE);\r\n        img_back.setOnClickListener(this);\r\n        btn_continue.setOnClickListener(this);\r\n        txt_uploadpetimage.setOnClickListener(this);\r\n        img_pet_imge.setOnClickListener(this);\r\n\r\n\r\n\r\n        SessionManager session = new SessionManager(getApplicationContext());\r\n        HashMap<String, String> user = session.getProfileDetails();\r\n        firstname = user.get(SessionManager.KEY_FIRST_NAME);\r\n        lastname = user.get(SessionManager.KEY_LAST_NAME);\r\n        useremail = user.get(SessionManager.KEY_EMAIL_ID);\r\n        phonenumber = user.get(SessionManager.KEY_MOBILE);\r\n        userid = user.get(SessionManager.KEY_ID);\r\n        usertype = user.get(SessionManager.KEY_TYPE);\r\n        userstatus = user.get(SessionManager.KEY_PROFILE_STATUS);\r\n        profileimage = user.get(SessionManager.KEY_PROFILE_IMAGE);\r\n        verifyemailstatus = user.get(SessionManager.KEY_VERIFY_EMAIL_STATUS);\r\n        refcode = user.get(SessionManager.KEY_REF_CODE);\r\n\r\n        if( profileimage != null && !profileimage.isEmpty()){\r\n            Glide.with(EditVendorProfileImageActivity.this)\r\n                    .load(profileimage)\r\n                    .into(img_pet_imge);\r\n        }else{\r\n            Glide.with(EditVendorProfileImageActivity.this)\r\n                    .load(R.drawable.image_thumbnail)\r\n                    .into(img_pet_imge);\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @Override\r\n    public void onClick(View v) {\r\n        switch (v.getId()){\r\n            case R.id.img_back:\r\n                onBackPressed();\r\n                break;\r\n\r\n\r\n                case R.id.txt_uploadpetimage:\r\n                   gotoUplodPetImage();\r\n                break;\r\n\r\n                case R.id.img_pet_imge:\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                    checkMultiplePermissions(EditVendorProfileImageActivity.this);\r\n                }else{\r\n                    choosePetImage();\r\n\r\n                }\r\n                break;\r\n\r\n                case R.id.btn_continue:\r\n                    VendorUpdateProfileImageResponseCall();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private void gotoUplodPetImage() {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n            checkMultiplePermissions(EditVendorProfileImageActivity.this);\r\n        }else{\r\n            choosePetImage();\r\n\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        super.onBackPressed();\r\n        startActivity(new Intent(EditVendorProfileImageActivity.this, VendorProfileScreenActivity.class));\r\n        finish();\r\n    }\r\n\r\n\r\n\r\n\r\n    private void choosePetImage() {\r\n\r\n/*\r\n            final CharSequence[] items = {\"Take Photo\", \"Choose from Library\", \"Cancel\"};\r\n            //AlertDialog.Builder alert=new AlertDialog.Builder(this);\r\n            AlertDialog.Builder builder = new AlertDialog.Builder(EditVendorProfileImageActivity.this);\r\n            builder.setTitle(\"Choose option\");\r\n            builder.setItems(items, (dialog, item) -> {\r\n                if (items[item].equals(\"Take Photo\"))\r\n                {\r\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(EditVendorProfileImageActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r\n                    {\r\n                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\n                    }\r\n                    else\r\n                    {\r\n\r\n\r\n                        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\n\r\n                        startActivityForResult(intent, SELECT_CLINIC_CAMERA);\r\n                    }\r\n\r\n                }\r\n\r\n                else if (items[item].equals(\"Choose from Library\"))\r\n                {\r\n\r\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(EditVendorProfileImageActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r\n                    {\r\n                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r\n                    }\r\n\r\n                    else{\r\n\r\n                        Intent intent = new Intent();\r\n                        intent.setType(\"image/*\");\r\n                        intent.setAction(Intent.ACTION_GET_CONTENT);\r\n                        startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_CLINIC_PICTURE);\r\n\r\n\r\n                    }\r\n                }\r\n\r\n                else if (items[item].equals(\"Cancel\")) {\r\n                    dialog.dismiss();\r\n                }\r\n            });\r\n            builder.show();*/\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(EditVendorProfileImageActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r\n        {\r\n            requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\n        }\r\n\r\n        else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(EditVendorProfileImageActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r\n        {\r\n            requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r\n        }\r\n\r\n        else\r\n        {\r\n\r\n\r\n            CropImage.activity().start(EditVendorProfileImageActivity.this);\r\n\r\n            /*CropImage.activity().start(AddYourPetImageOlduserActivity.this);*/\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    @SuppressLint(\"LogNotTimber\")\r\n    @Override\r\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n\r\n        try {\r\n\r\n            if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {\r\n                CropImage.ActivityResult result = CropImage.getActivityResult(data);\r\n                if (resultCode == RESULT_OK) {\r\n                    Uri resultUri = result.getUri();\r\n\r\n                    if (resultUri != null) {\r\n\r\n                        Log.w(\"selectedImageUri\", \" \" + resultUri);\r\n\r\n                        String filename = getFileName(resultUri);\r\n\r\n                        Log.w(\"filename\", \" \" + filename);\r\n\r\n                        String filePath = FileUtil.getPath(EditVendorProfileImageActivity.this, resultUri);\r\n\r\n                        assert filePath != null;\r\n\r\n                        File file = new File(filePath); // initialize file here\r\n\r\n                        long length = file.length() / 1024; // Size in KB\r\n\r\n                        Log.w(\"filesize\", \" \" + length);\r\n\r\n                        if (length > 2000) {\r\n\r\n                            new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                                    .setTitleText(\"File Size\")\r\n                                    .setContentText(\"Please choose file size less than 2 MB \")\r\n                                    .setConfirmText(\"Ok\")\r\n                                    .show();\r\n                        } else {\r\n\r\n\r\n                            SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r\n                            String currentDateandTime = sdf.format(new Date());\r\n\r\n                            filePart = MultipartBody.Part.createFormData(\"sampleFile\", userid + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\n\r\n                            uploadPetImage();\r\n\r\n                        }\r\n\r\n\r\n                    } else {\r\n\r\n                        Toasty.warning(EditVendorProfileImageActivity.this, \"Image Error!!Please upload Some other image\", Toasty.LENGTH_LONG).show();\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n\r\n\r\n            //\tToast.makeText(getActivity(),\"kk\",Toast.LENGTH_SHORT).show();\r\n            if(requestCode== SELECT_CLINIC_PICTURE || requestCode == SELECT_CLINIC_CAMERA)\r\n            {\r\n\r\n                if(requestCode == SELECT_CLINIC_CAMERA)\r\n                {\r\n                    if(data != null) {\r\n                        Bitmap photo = (Bitmap) data.getExtras().get(\"data\");\r\n\r\n                        File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\n\r\n                        OutputStream os;\r\n                        try {\r\n                            os = new FileOutputStream(file);\r\n                            if (photo != null) {\r\n                                photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r\n                            }\r\n                            os.flush();\r\n                            os.close();\r\n                        } catch (Exception e) {\r\n                            Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r\n                        }\r\n                        SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r\n                        String currentDateandTime = sdf.format(new Date());\r\n\r\n                        RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\n\r\n                        filePart = MultipartBody.Part.createFormData(\"sampleFile\", userid + currentDateandTime + file.getName(), requestFile);\r\n\r\n                        uploadPetImage();\r\n                    }\r\n\r\n                }\r\n\r\n                else{\r\n\r\n                    try {\r\n                        if (resultCode == Activity.RESULT_OK)\r\n                        {\r\n                            if(data != null){\r\n                                Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\n\r\n                                Uri selectedImageUri = data.getData();\r\n\r\n                                Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\n\r\n                                String filename = null;\r\n                                if (selectedImageUri != null) {\r\n                                    filename = getFileName(selectedImageUri);\r\n                                }\r\n\r\n                                Log.w(\"filename\", \" \" + filename);\r\n\r\n                                String filePath = FileUtil.getPath(EditVendorProfileImageActivity.this,selectedImageUri);\r\n\r\n                                assert filePath != null;\r\n\r\n                                File file = new File(filePath); // initialize file here\r\n\r\n                                long length = file.length() / 1024; // Size in KB\r\n\r\n                                Log.w(\"filesize\", \" \" + length);\r\n\r\n                                SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r\n                                String currentDateandTime = sdf.format(new Date());\r\n\r\n                                filePart = MultipartBody.Part.createFormData(\"sampleFile\", userid+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\n\r\n                                uploadPetImage();\r\n                            }\r\n\r\n\r\n\r\n\r\n                        }\r\n                    } catch (Exception e) {\r\n\r\n                        Log.w(\"Exception\", \" \" + e);\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    @SuppressLint({\"LogNotTimber\", \"LongLogTag\"})\r\n    private void uploadPetImage() {\r\n\r\n        avi_indicator.show();\r\n\r\n        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\n\r\n\r\n        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(filePart);\r\n\r\n\r\n        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\n\r\n        call.enqueue(new Callback<FileUploadResponse>() {\r\n            @SuppressLint(\"LongLogTag\")\r\n            @Override\r\n            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r\n                avi_indicator.smoothToHide();\r\n                Log.w(TAG,\"Profpic\"+ \"--->\" + new Gson().toJson(response.body()));\r\n\r\n                if (response.body() != null) {\r\n                    if (200 == response.body().getCode()) {\r\n\r\n                        profileimage = response.body().getData();\r\n                        btn_continue.setVisibility(View.VISIBLE);\r\n\r\n                        Log.w(TAG, \"ServerUrlImagePath \" + profileimage);\r\n\r\n                        if( response.body().getData() != null){\r\n                            Glide.with(EditVendorProfileImageActivity.this)\r\n                                    .load(profileimage)\r\n                                    .into(img_pet_imge);\r\n                        }else{\r\n                            Glide.with(EditVendorProfileImageActivity.this)\r\n                                    .load(R.drawable.image_thumbnail)\r\n                                    .into(img_pet_imge);\r\n\r\n                        }\r\n\r\n\r\n\r\n                    }\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n            @SuppressLint(\"LogNotTimber\")\r\n            @Override\r\n            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r\n                // avi_indicator.smoothToHide();\r\n                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r\n                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    @SuppressLint(\"MissingSuperCall\")\r\n    @RequiresApi(api = Build.VERSION_CODES.M)\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode,\r\n                                           @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        if (requestCode == REQUEST_READ_CLINIC_PIC_PERMISSION) {\r\n\r\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                Intent intent = new Intent();\r\n                intent.setType(\"image/*\");\r\n                intent.setAction(Intent.ACTION_GET_CONTENT);\r\n                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_CLINIC_PICTURE);\r\n\r\n            } else {\r\n                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                        .setTitleText(\"Permisson Required\")\r\n                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r\n                        .setConfirmText(\"Ok\")\r\n                        .setConfirmClickListener(sDialog -> {\r\n\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r\n                            }\r\n\r\n\r\n                        })\r\n                        .setCancelButton(\"Cancel\", sDialog -> {\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            showWarning(REQUEST_READ_CLINIC_PIC_PERMISSION);\r\n                        })\r\n                        .show();\r\n\r\n            }\r\n\r\n        }\r\n\r\n        else if (requestCode == REQUEST_CLINIC_CAMERA_PERMISSION_CODE) {\r\n\r\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n\r\n                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\n\r\n                startActivityForResult(intent, SELECT_CLINIC_CAMERA);\r\n\r\n            } else {\r\n                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                        .setTitleText(\"Permisson Required\")\r\n                        .setContentText(\"Please Allow Camera for taking picture\")\r\n                        .setConfirmText(\"Ok\")\r\n                        .setConfirmClickListener(sDialog -> {\r\n\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\n                            }\r\n\r\n\r\n                        })\r\n                        .setCancelButton(\"Cancel\", sDialog -> {\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            showWarning(REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\n                        })\r\n                        .show();\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    //check for camera and storage access permissions\r\n    @TargetApi(Build.VERSION_CODES.M)\r\n    private void checkMultiplePermissions(Context context) {\r\n\r\n        String[] PERMISSIONS = {CAMERA_PERMISSION, READ_EXTERNAL_STORAGE_PERMISSION, WRITE_EXTERNAL_STORAGE_PERMISSION};\r\n        if (!hasPermissions(context, PERMISSIONS)) {\r\n            ActivityCompat.requestPermissions((Activity) context, PERMISSIONS, 1);\r\n        } else {\r\n            choosePetImage();\r\n            // Open your camera here.\r\n        }\r\n    }\r\n    private boolean hasPermissions(Context context, String... permissions) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && context != null && permissions != null) {\r\n            for (String permission : permissions) {\r\n                if (ActivityCompat.checkSelfPermission(context, permission) != PackageManager.PERMISSION_GRANTED) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private void showWarning(int REQUEST_PERMISSION_CODE) {\r\n\r\n        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                .setTitleText(\"Sorry!!\")\r\n                .setContentText(\"You Can't proceed further unless you allow permission\")\r\n                .setConfirmText(\"Ok\")\r\n                .setConfirmClickListener(sDialog -> {\r\n\r\n                    sDialog.dismissWithAnimation();\r\n\r\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)\r\n                    {\r\n                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_PERMISSION_CODE);\r\n                    }\r\n\r\n\r\n                })\r\n                .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r\n                .show();\r\n    }\r\n\r\n    public String getFileName(Uri uri) {\r\n        String result = null;\r\n        if (Objects.requireNonNull(uri.getScheme()).equals(\"content\")) {\r\n            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {\r\n                if (cursor != null && cursor.moveToFirst()) {\r\n                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));\r\n                }\r\n            }\r\n        }\r\n        if (result == null) {\r\n            result = uri.getPath();\r\n            int cut = 0;\r\n            if (result != null) {\r\n                cut = result.lastIndexOf('/');\r\n            }\r\n            if (cut != -1) {\r\n                if (result != null) {\r\n                    result = result.substring(cut + 1);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    @SuppressLint({\"LogNotTimber\", \"LongLogTag\"})\r\n    private void VendorUpdateProfileImageResponseCall() {\r\n        avi_indicator.setVisibility(View.VISIBLE);\r\n        avi_indicator.smoothToShow();\r\n        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);\r\n        Call<DoctorUpdateProfileImageResponse> call = apiInterface.DoctorUpdateProfileImageResponseCall(RestUtils.getContentType(), doctorUpdateProfileImageRequest());\r\n        Log.w(TAG,\"VendorUpdateProfileImageResponseCall url  :%s\"+\" \"+ call.request().url().toString());\r\n\r\n        call.enqueue(new Callback<DoctorUpdateProfileImageResponse>() {\r\n            @SuppressLint({\"LogNotTimber\", \"LongLogTag\"})\r\n            @Override\r\n            public void onResponse(@NonNull Call<DoctorUpdateProfileImageResponse> call, @NonNull Response<DoctorUpdateProfileImageResponse> response) {\r\n\r\n                Log.w(TAG,\"VendorUpdateProfileImageResponseCall\"+ \"--->\" + new Gson().toJson(response.body()));\r\n\r\n                avi_indicator.smoothToHide();\r\n\r\n                if (response.body() != null) {\r\n                    if(response.body().getCode() == 200){\r\n                        SessionManager sessionManager = new SessionManager(getApplicationContext());\r\n                        sessionManager.setIsLogin(true);\r\n                        sessionManager.createLoginSession(\r\n                                userid,\r\n                                firstname,\r\n                                lastname,\r\n                                useremail,\r\n                                phonenumber,\r\n                                String.valueOf(usertype),\r\n                                userstatus,\r\n                                profileimage,\r\n                                verifyemailstatus,\r\n                                refcode\r\n\r\n                        );\r\n                       onBackPressed();\r\n                    }\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n            @SuppressLint(\"LongLogTag\")\r\n            @Override\r\n            public void onFailure(@NonNull Call<DoctorUpdateProfileImageResponse> call, @NonNull Throwable t) {\r\n\r\n                avi_indicator.smoothToHide();\r\n                Log.w(TAG,\"VendorUpdateProfileImageResponseCall flr\"+\"--->\" + t.getMessage());\r\n            }\r\n        });\r\n\r\n    }\r\n    @SuppressLint({\"LogNotTimber\", \"LongLogTag\"})\r\n    private DoctorUpdateProfileImageRequest doctorUpdateProfileImageRequest() {\r\n        DoctorUpdateProfileImageRequest  doctorUpdateProfileImageRequest = new DoctorUpdateProfileImageRequest();\r\n        doctorUpdateProfileImageRequest.setUser_id(userid);\r\n        if(profileimage != null && !profileimage.isEmpty()) {\r\n            doctorUpdateProfileImageRequest.setProfile_img(profileimage);\r\n        }else{\r\n            doctorUpdateProfileImageRequest.setProfile_img(APIClient.PROFILE_IMAGE_URL);\r\n\r\n        }\r\n        Log.w(TAG,\"VendorUpdateProfileImageRequest\"+ \"--->\" + new Gson().toJson(doctorUpdateProfileImageRequest));\r\n        return doctorUpdateProfileImageRequest;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/petfolio/infinituss/vendor/EditVendorProfileImageActivity.java b/app/src/main/java/com/petfolio/infinituss/vendor/EditVendorProfileImageActivity.java
--- a/app/src/main/java/com/petfolio/infinituss/vendor/EditVendorProfileImageActivity.java	(revision f1734ca40ba206b2d8b7b0e5c5470841991c7822)
+++ b/app/src/main/java/com/petfolio/infinituss/vendor/EditVendorProfileImageActivity.java	(date 1632498661080)
@@ -12,8 +12,10 @@
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
+import android.os.Environment;
 import android.provider.MediaStore;
 import android.provider.OpenableColumns;
+import android.text.TextUtils;
 import android.util.Log;
 import android.view.View;
 import android.widget.Button;
@@ -28,6 +30,7 @@
 import androidx.core.content.ContextCompat;
 
 import com.bumptech.glide.Glide;
+import com.google.android.gms.common.util.IOUtils;
 import com.google.gson.Gson;
 import com.petfolio.infinituss.R;
 import com.petfolio.infinituss.api.APIClient;
@@ -39,11 +42,13 @@
 import com.petfolio.infinituss.serviceprovider.SPEditProfileImageActivity;
 import com.petfolio.infinituss.sessionmanager.SessionManager;
 import com.petfolio.infinituss.utils.RestUtils;
-import com.theartofdev.edmodo.cropper.CropImage;
+import com.canhub.cropper.CropImage;
 import com.wang.avi.AVLoadingIndicatorView;
 
 import java.io.File;
 import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
 import java.io.OutputStream;
 import java.text.SimpleDateFormat;
 import java.util.Date;
@@ -65,6 +70,7 @@
 import static android.Manifest.permission.CAMERA;
 import static android.Manifest.permission.READ_EXTERNAL_STORAGE;
 import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;
+import static android.os.Environment.DIRECTORY_DOCUMENTS;
 
 public class EditVendorProfileImageActivity extends AppCompatActivity implements View.OnClickListener {
     private final String TAG = "EditVendorProfileImageActivity";
@@ -302,7 +308,7 @@
             if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {
                 CropImage.ActivityResult result = CropImage.getActivityResult(data);
                 if (resultCode == RESULT_OK) {
-                    Uri resultUri = result.getUri();
+                    Uri resultUri = result.getUriContent();
 
                     if (resultUri != null) {
 
@@ -312,7 +318,7 @@
 
                         Log.w("filename", " " + filename);
 
-                        String filePath = FileUtil.getPath(EditVendorProfileImageActivity.this, resultUri);
+                        String filePath = getFilePathFromURI(EditVendorProfileImageActivity.this, resultUri);
 
                         assert filePath != null;
 
@@ -629,29 +635,54 @@
                 .show();
     }
 
-    public String getFileName(Uri uri) {
-        String result = null;
-        if (Objects.requireNonNull(uri.getScheme()).equals("content")) {
-            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {
-                if (cursor != null && cursor.moveToFirst()) {
-                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));
-                }
+    public static String getFilePathFromURI(Context context, Uri contentUri) {
+        //copy file and send new file path
+        String fileName = getFileName(contentUri);
+        if (!TextUtils.isEmpty(fileName)) {
+
+            String path = Environment.getExternalStoragePublicDirectory(DIRECTORY_DOCUMENTS).getPath() + "/" + "MyFirstApp/";
+            // Create the parent path
+            File dir = new File(path);
+            if (!dir.exists()) {
+                dir.mkdirs();
             }
+
+            String fullName = path + "mylog";
+            File copyFile = new File (fullName);
+
+            /* File copyFile = new File(Environment.DIRECTORY_DOWNLOADS + File.separator + fileName);*/
+            copy(context, contentUri, copyFile);
+            return copyFile.getAbsolutePath();
         }
-        if (result == null) {
-            result = uri.getPath();
-            int cut = 0;
-            if (result != null) {
-                cut = result.lastIndexOf('/');
-            }
-            if (cut != -1) {
-                if (result != null) {
-                    result = result.substring(cut + 1);
-                }
-            }
+        return null;
+    }
+
+    public static String getFileName(Uri uri) {
+        if (uri == null) return null;
+        String fileName = null;
+        String path = uri.getPath();
+        int cut = path.lastIndexOf('/');
+        if (cut != -1) {
+            fileName = path.substring(cut + 1);
+        }
+        return fileName;
+    }
+
+    public static void copy(Context context, Uri srcUri, File dstFile) {
+        try {
+            InputStream inputStream = context.getContentResolver().openInputStream(srcUri);
+            if (inputStream == null) return;
+            OutputStream outputStream = new FileOutputStream(dstFile);
+            IOUtils.copyStream(inputStream, outputStream);
+            inputStream.close();
+            outputStream.close();
+        } catch (IOException e) {
+            e.printStackTrace();
         }
-        return result;
     }
+
+
+
 
 
     @SuppressLint({"LogNotTimber", "LongLogTag"})
Index: app/src/main/java/com/petfolio/infinituss/vendor/EditVendorRegisterFormActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.petfolio.infinituss.vendor;\r\rimport android.Manifest;\rimport android.annotation.SuppressLint;\rimport android.app.Activity;\rimport android.app.Dialog;\rimport android.content.Context;\rimport android.content.Intent;\rimport android.content.IntentSender;\rimport android.content.pm.PackageManager;\rimport android.database.Cursor;\rimport android.graphics.Bitmap;\rimport android.graphics.Color;\rimport android.graphics.drawable.ColorDrawable;\rimport android.location.Address;\rimport android.location.Geocoder;\rimport android.location.Location;\rimport android.location.LocationManager;\rimport android.net.Uri;\rimport android.os.Build;\rimport android.os.Bundle;\rimport android.os.Handler;\rimport android.provider.MediaStore;\rimport android.provider.OpenableColumns;\rimport android.util.Log;\rimport android.view.View;\rimport android.view.WindowManager;\rimport android.widget.Button;\rimport android.widget.EditText;\rimport android.widget.ImageView;\rimport android.widget.RelativeLayout;\rimport android.widget.TextView;\rimport android.widget.Toast;\r\rimport androidx.annotation.NonNull;\rimport androidx.annotation.Nullable;\rimport androidx.appcompat.app.AlertDialog;\rimport androidx.appcompat.app.AppCompatActivity;\rimport androidx.cardview.widget.CardView;\rimport androidx.core.app.ActivityCompat;\rimport androidx.core.content.ContextCompat;\rimport androidx.recyclerview.widget.LinearLayoutManager;\rimport androidx.recyclerview.widget.RecyclerView;\r\rimport com.google.android.gms.common.ConnectionResult;\rimport com.google.android.gms.common.api.GoogleApiClient;\rimport com.google.android.gms.common.api.PendingResult;\rimport com.google.android.gms.common.api.Status;\rimport com.google.android.gms.location.LocationListener;\rimport com.google.android.gms.location.LocationRequest;\rimport com.google.android.gms.location.LocationServices;\rimport com.google.android.gms.location.LocationSettingsRequest;\rimport com.google.android.gms.location.LocationSettingsResult;\rimport com.google.android.gms.location.LocationSettingsStatusCodes;\rimport com.google.android.gms.maps.GoogleMap;\rimport com.google.android.gms.maps.OnMapReadyCallback;\rimport com.google.android.gms.maps.SupportMapFragment;\rimport com.google.gson.Gson;\rimport com.petfolio.infinituss.R;\rimport com.petfolio.infinituss.adapter.AddGovtIdPdfAdapter;\rimport com.petfolio.infinituss.adapter.AddPhotoIDPdfAdapter;\rimport com.petfolio.infinituss.adapter.EditVendorCertPdfAdapter;\rimport com.petfolio.infinituss.adapter.EditVendorGalleryImageListAdapter;\rimport com.petfolio.infinituss.adapter.EditVendorGovtIdPdfAdapter;\rimport com.petfolio.infinituss.adapter.EditVendorPhotoIDPdfAdapter;\rimport com.petfolio.infinituss.adapter.VendorAddCertPdfAdapter;\rimport com.petfolio.infinituss.adapter.VendorAddServiceImageListAdapter;\rimport com.petfolio.infinituss.api.APIClient;\rimport com.petfolio.infinituss.api.RestApiInterface;\rimport com.petfolio.infinituss.appUtils.FileUtil;\rimport com.petfolio.infinituss.doctor.DoctorProfileScreenActivity;\rimport com.petfolio.infinituss.doctor.EditDoctorBusinessInfoActivity;\rimport com.petfolio.infinituss.requestpojo.DocBusInfoUploadRequest;\rimport com.petfolio.infinituss.requestpojo.VendorGetsOrderIdRequest;\rimport com.petfolio.infinituss.requestpojo.VendorRegisterFormCreateRequest;\rimport com.petfolio.infinituss.responsepojo.FileUploadResponse;\rimport com.petfolio.infinituss.responsepojo.VendorGetsOrderIDResponse;\rimport com.petfolio.infinituss.responsepojo.VendorRegisterFormCreateResponse;\rimport com.petfolio.infinituss.service.GPSTracker;\rimport com.petfolio.infinituss.serviceprovider.ServiceProviderRegisterFormActivity;\rimport com.petfolio.infinituss.sessionmanager.SessionManager;\rimport com.petfolio.infinituss.utils.ConnectionDetector;\rimport com.petfolio.infinituss.utils.RestUtils;\rimport com.theartofdev.edmodo.cropper.CropImage;\rimport com.wang.avi.AVLoadingIndicatorView;\r\rimport java.io.File;\rimport java.io.FileOutputStream;\rimport java.io.IOException;\rimport java.io.OutputStream;\rimport java.text.SimpleDateFormat;\rimport java.util.ArrayList;\rimport java.util.Date;\rimport java.util.HashMap;\rimport java.util.List;\rimport java.util.Locale;\rimport java.util.Objects;\r\rimport butterknife.BindView;\rimport butterknife.ButterKnife;\rimport cn.pedant.SweetAlert.SweetAlertDialog;\rimport es.dmoral.toasty.Toasty;\rimport okhttp3.MediaType;\rimport okhttp3.MultipartBody;\rimport okhttp3.RequestBody;\rimport retrofit2.Call;\rimport retrofit2.Callback;\rimport retrofit2.Response;\r\rpublic class EditVendorRegisterFormActivity extends AppCompatActivity implements View.OnClickListener,\r        OnMapReadyCallback, GoogleApiClient.ConnectionCallbacks,\r        GoogleApiClient.OnConnectionFailedListener, LocationListener {\r\r    private final String TAG = \"EditVendorRegisterFormActivity\";\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edt_business_name)\r    EditText edt_business_name;\r\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edt_business_email)\r    EditText edt_business_email;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edt_business)\r    EditText edt_business;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edt_phone)\r    EditText edt_phone;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edt_business_registration)\r    EditText edt_business_registration;\r\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rl_upload_gallery_image)\r    RelativeLayout rl_upload_gallery_image;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rl_certificates)\r    RelativeLayout rl_certificates;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rl_govtid)\r    RelativeLayout rl_govtid;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rl_photoid)\r    RelativeLayout rl_photoid;\r\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.btn_submit)\r    Button btn_submit;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_choosen_gallery_img)\r    RecyclerView rcylr_choosen_gallery_img;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_choosen_certificate_img)\r    RecyclerView recylerView_choosen_certificate_images;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_choosen_govtid_images)\r    RecyclerView recylerView_choosen_govtid_images;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_choosen_photoid_img)\r    RecyclerView recylerView_choosen_photo_id_images;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.cdvw_certificate)\r    CardView material_cardview_certificate;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.img_back)\r    ImageView img_back;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.avi_indicator)\r    AVLoadingIndicatorView avi_indicator;\r\r    String business_name;\r\r    ArrayList<FileUploadResponse> certificatePicResponse = new ArrayList<>();\r\r    private final List<DocBusInfoUploadRequest.GovtIdPicBean> govtIdPicBeans = new ArrayList<>();\r\r    private final List<DocBusInfoUploadRequest.PhotoIdPicBean> photoIdPicBeans = new ArrayList<>();\r\r\r\r    VendorAddServiceImageListAdapter vendorAddServiceImageListAdapter;\r\r    VendorAddCertPdfAdapter vendorAddCertPdfAdapter;\r\r\r    AddGovtIdPdfAdapter addGovtIdPdfAdapter;\r    AddPhotoIDPdfAdapter addPhotoIDPdfAdapter;\r\r\r    EditVendorGalleryImageListAdapter editVendorGalleryImageListAdapter;\r\r    MultipartBody.Part filePart,certPart,govIdPart,photIDPart;\r\r\r    private static final int REQUEST_CLINIC_CAMERA_PERMISSION_CODE = 785 ;\r\r    private static final int REQUEST_READ_CLINIC_PDF_PERMISSION = 787 ;\r\r    private static final int REQUEST_READ_GOVT_ID_PDF_PERMISSION = 788;\r\r    private static final int REQUEST_READ_PHOTO_ID_PDF_PERMISSION = 789;\r\r    private static final int REQUEST_READ_CLINIC_PIC_PERMISSION = 786;\r\r    private static final int REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE = 790;\r\r    private static final int REQUEST_READ_CERTIFICATE_PIC_PERMISSION = 791;\r\r    private static final int REQUEST_GOVTID_CAMERA_PERMISSION_CODE = 792;\r\r    private static final int REQUEST_READ_GOVTID_PIC_PERMISSION = 793;\r\r    private static final int REQUEST_PHOTOID_CAMERA_PERMISSION_CODE = 794;\r\r    private static final int REQUEST_READ_PHOTOID_PIC_PERMISSION = 795;\r\r\r\r\r    private static final int SELECT_CLINIC_CAMERA = 1000 ;\r\r    private static final int SELECT_CLINIC_PICTURE = 1001 ;\r\r    private static final int SELECT_CERT_PDF = 1002;\r\r    private static final int SELECT_GOVTID_PDF = 1003;\r\r    private static final int SELECT_PHOTOID_PDF = 1004;\r\r    private static final int SELECT_CERTIFICATE_CAMERA = 1005;\r\r    private static final int SELECT_CERTIFICATE_PICTURE = 1006;\r\r    private static final int SELECT_GOVTID_CAMERA = 1007;\r\r    private static final int SELECT_GOVTID_PICTURE = 1008;\r\r    private static final int SELECT_PHOTOID_CAMERA = 1009;\r\r    private static final int SELECT_PHOTOID_PICTURE = 1010;\r\r\r\r    String user_id,currentDateandTime;\r\r\r\r    private String username;\r    private String useremail;\r    private String userphone;\r    private String govtIdPic;\r    private String photoIdPic;\r    Dialog alertDialog;\r\r    private GoogleApiClient googleApiClient;\r    Location mLastLocation;\r    public static final int MY_PERMISSIONS_REQUEST_LOCATION = 99;\r    private SupportMapFragment mapFragment;\r    private double latitude;\r    private double longitude;\r    private static final int REQUEST_CHECK_SETTINGS_GPS = 0x1;\r    private String AddressLine;\r\r    List<VendorRegisterFormCreateRequest.BussinessGalleryBean> bus_service_gall_list = new ArrayList<>();\r    private List<VendorGetsOrderIDResponse.DataBean.BussinessGalleryBean> bus_service_gall_list_edit;\r\r\r    private List<VendorGetsOrderIDResponse.DataBean.CertifiBean> bus_certif_list_edit;\r    List<VendorRegisterFormCreateRequest.CertifiBean> bus_certif_list = new ArrayList<>();\r\r    private EditVendorPhotoIDPdfAdapter editPhotoIDPdfAdapter;\r    private EditVendorGovtIdPdfAdapter editGovtIdPdfAdapter;\r    private EditVendorCertPdfAdapter editCertPdfAdapter;\r    private String _id;\r    private Dialog dialog;\r\r    /*Crop Functonality */\r\r    private boolean isAddClinicPic = false;\r    private boolean isAddCertfProof = false;\r    private boolean isAddGovtIdproof = false;\r    private boolean isAddPhotoIDproof = false;\r\r\r    @SuppressLint(\"LongLogTag\")\r    @Override\r    protected void onCreate(Bundle savedInstanceState) {\r        super.onCreate(savedInstanceState);\r        setContentView(R.layout.activity_edit_vendor_register_form);\r        ButterKnife.bind(this);\r        SessionManager session = new SessionManager(getApplicationContext());\r        HashMap<String, String> user = session.getProfileDetails();\r        username = user.get(SessionManager.KEY_FIRST_NAME);\r        user_id = user.get(SessionManager.KEY_ID);\r        useremail = user.get(SessionManager.KEY_EMAIL_ID);\r        userphone = user.get(SessionManager.KEY_MOBILE);\r\r        Log.w(TAG,\"username : \"+username+\" user_id : \"+user_id);\r\r\r        avi_indicator.setVisibility(View.GONE);\r\r        if (mapFragment == null) {\r            mapFragment = SupportMapFragment.newInstance();\r            mapFragment.getMapAsync(this);\r        }\r        googleApiConnected();\r        LocationRequest locationRequest = LocationRequest.create();\r        locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);\r        locationRequest.setInterval(1000); // 10 seconds\r        locationRequest.setFastestInterval(1000); // 5 seconds\r\r        if (new ConnectionDetector(getApplicationContext()).isNetworkAvailable(getApplicationContext())) {\r            getVendorOrderIDResponseCall();\r        }\r\r\r\r        btn_submit.setOnClickListener(this);\r\r\r        rl_upload_gallery_image.setOnClickListener(this);\r\r        rl_certificates.setOnClickListener(this);\r\r        rl_govtid.setOnClickListener(this);\r\r        rl_photoid.setOnClickListener(this);\r        img_back.setOnClickListener(this);\r\r\r\r\r\r\r\r        /* ************ Adding service gallery Images ************** */\r\r        rcylr_choosen_gallery_img.setHasFixedSize(true);\r\r        rcylr_choosen_gallery_img.setNestedScrollingEnabled(false);\r\r        LinearLayoutManager layoutManager2 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);\r\r        rcylr_choosen_gallery_img.setLayoutManager(layoutManager2);\r\r\r        /* ************ Adding Certificate ************** */\r\r        recylerView_choosen_certificate_images.setHasFixedSize(true);\r\r        recylerView_choosen_certificate_images.setNestedScrollingEnabled(false);\r\r        LinearLayoutManager layoutManager3 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);\r\r        recylerView_choosen_certificate_images.setLayoutManager(layoutManager3);\r\r\r        /* ************ Adding GovtID ************** */\r\r        recylerView_choosen_govtid_images.setHasFixedSize(true);\r\r        recylerView_choosen_govtid_images.setNestedScrollingEnabled(false);\r\r        LinearLayoutManager layoutManager4 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);\r\r        recylerView_choosen_govtid_images.setLayoutManager(layoutManager4);\r\r\r\r        /* ************ Adding PhotoID ************** */\r\r        recylerView_choosen_photo_id_images.setHasFixedSize(true);\r\r        recylerView_choosen_photo_id_images.setNestedScrollingEnabled(false);\r\r        LinearLayoutManager layoutManager5 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);\r\r        recylerView_choosen_photo_id_images.setLayoutManager(layoutManager5);\r\r\r        /* *************** Get Current Date and Time ************************ */\r\r        SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r         currentDateandTime = sdf.format(new Date());\r\r\r\r\r    }\r\r\r\r\r    @SuppressLint(\"LongLogTag\")\r    private void chooseServiceGalleryImage() {\r        Log.w(TAG,\"bus_service_gall_list.size() : \"+bus_service_gall_list.size()+\" conditions : \"+(bus_service_gall_list.size()>=3));\r\r\r        if(bus_service_gall_list!=null&&bus_service_gall_list.size()>=3){\r\r            Toasty.warning(getApplicationContext(), \"Sorry you can't Add more than 3\", Toast.LENGTH_SHORT).show();\r\r        }\r\r        else\r        {\r        /*    final CharSequence[] items = {\"Take Photo\", \"Choose from Library\", \"Cancel\"};\r            //AlertDialog.Builder alert=new AlertDialog.Builder(this);\r            AlertDialog.Builder builder = new AlertDialog.Builder(EditVendorRegisterFormActivity.this);\r            builder.setTitle(\"Choose option\");\r            builder.setItems(items, (dialog, item) -> {\r                if (items[item].equals(\"Take Photo\"))\r                {\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(EditVendorRegisterFormActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r                    }\r                    else\r                    {\r\r\r                        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\r                        startActivityForResult(intent, SELECT_CLINIC_CAMERA);\r                    }\r\r                }\r\r                else if (items[item].equals(\"Choose from Library\"))\r                {\r\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(EditVendorRegisterFormActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r                    }\r\r                    else{\r\r                        Intent intent = new Intent();\r                        intent.setType(\"image/*\");\r                        intent.setAction(Intent.ACTION_GET_CONTENT);\r                        startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_CLINIC_PICTURE);\r\r\r                    }\r                }\r\r                else if (items[item].equals(\"Cancel\")) {\r                    dialog.dismiss();\r                }\r            });\r            builder.show();\r*/\r\r            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(EditVendorRegisterFormActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r            {\r                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r            }\r\r            else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(EditVendorRegisterFormActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r            {\r                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r            }\r\r            else\r            {\r\r                isAddClinicPic = true;\r\r                isAddCertfProof = false;\r\r                isAddGovtIdproof = false;\r\r                isAddPhotoIDproof = false;\r\r                CropImage.activity().start(EditVendorRegisterFormActivity.this);\r\r                /*CropImage.activity().start(AddYourPetImageOlduserActivity.this);*/\r            }\r        }\r\r    }\r\r    @SuppressLint(\"LongLogTag\")\r    private void uploadClinicImage() {\r\r        avi_indicator.show();\r\r        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\r        //RestApiInterface ApiService = RetrofitClient.getApiService();\r\r        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(filePart);\r\r//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());\r\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\r        call.enqueue(new Callback<FileUploadResponse>() {\r            @SuppressLint(\"LongLogTag\")\r            @Override\r            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"Profpic\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                if (response.body() != null) {\r                    if (200 == response.body().getCode()) {\r\r                        isAddClinicPic = false;\r\r                        VendorRegisterFormCreateRequest.BussinessGalleryBean busServiceGallBean = new VendorRegisterFormCreateRequest.BussinessGalleryBean();\r                        busServiceGallBean.setBussiness_gallery(response.body().getData());\r                        bus_service_gall_list.add(busServiceGallBean);\r\r                        VendorGetsOrderIDResponse.DataBean.BussinessGalleryBean busServiceGallBean1 = new VendorGetsOrderIDResponse.DataBean.BussinessGalleryBean();\r                        busServiceGallBean1.setBussiness_gallery(response.body().getData());\r                        bus_service_gall_list_edit.add(busServiceGallBean1);\r\r                        editVendorGalleryImageListAdapter = new EditVendorGalleryImageListAdapter(getApplicationContext(),bus_service_gall_list_edit, bus_service_gall_list);\r                        rcylr_choosen_gallery_img.setAdapter(editVendorGalleryImageListAdapter);\r\r\r\r\r\r                    }\r\r                }\r\r\r            }\r\r            @SuppressLint(\"LongLogTag\")\r            @Override\r            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r                // avi_indicator.smoothToHide();\r                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r            }\r        });\r\r\r    }\r\r    private void chooseCertPdf() {\r\r        if(certificatePicResponse!=null&&certificatePicResponse.size()>=1){\r\r            Toasty.warning(getApplicationContext(), \"Sorry you can't Add more than 1\", Toast.LENGTH_SHORT).show();\r\r        }\r\r        else {\r\r            final CharSequence[] items = {\"Select Image\", \"Select File\",\"Cancel\"};\r            //AlertDialog.Builder alert=new AlertDialog.Builder(this);\r            AlertDialog.Builder builder = new AlertDialog.Builder(EditVendorRegisterFormActivity.this);\r            builder.setTitle(\"Choose option\");\r            builder.setItems(items, (dialog, item) -> {\r                if (items[item].equals(\"Select Image\"))\r                {\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(EditVendorRegisterFormActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE);\r                    }\r                    else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CERTIFICATE_PIC_PERMISSION);\r                    }\r                    else {\r\r                        isAddCertfProof = true;\r\r                        isAddClinicPic = false;\r\r                        isAddGovtIdproof = false;\r\r                        isAddPhotoIDproof = false;\r\r                        CropImage.activity().start(EditVendorRegisterFormActivity.this);\r\r                    }\r\r                }\r\r                else if (items[item].equals(\"Select File\")){\r\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M   && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PDF_PERMISSION);\r                    }\r\r                    else{\r\r                        Intent intent = new Intent();\r                        intent.setType(\"application/pdf\");\r                        intent.setAction(Intent.ACTION_GET_CONTENT);\r                        startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_CERT_PDF);\r\r\r                    }\r\r\r                }\r\r                else if (items[item].equals(\"Cancel\")) {\r                    dialog.dismiss();\r                }\r            });\r            builder.show();\r\r        }\r\r    }\r\r\r    @SuppressLint(\"LongLogTag\")\r    private void uploadCertPdf() {\r\r        avi_indicator.show();\r\r        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\r        //RestApiInterface ApiService = RetrofitClient.getApiService();\r\r        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(certPart);\r\r//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());\r\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\r        call.enqueue(new Callback<FileUploadResponse>() {\r            @SuppressLint(\"LongLogTag\")\r            @Override\r            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"PdfFileLink\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                if (response.body() != null) {\r\r                    if (200 == response.body().getCode()) {\r\r                        isAddCertfProof =false;\r\r                        VendorRegisterFormCreateRequest.CertifiBean busCertifBean = new VendorRegisterFormCreateRequest.CertifiBean();\r                        busCertifBean.setCertifi(response.body().getData());\r                        bus_certif_list.add(busCertifBean);\r                        vendorAddCertPdfAdapter = new VendorAddCertPdfAdapter(getApplicationContext(), bus_certif_list);\r                        recylerView_choosen_certificate_images.setAdapter(vendorAddCertPdfAdapter);\r\r\r                    }\r\r                }\r\r\r            }\r\r            @SuppressLint(\"LongLogTag\")\r            @Override\r            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r                // avi_indicator.smoothToHide();\r                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r            }\r        });\r\r\r    }\r\r    private void chooseGovIDPdf() {\r\r        if(govtIdPicBeans!=null&&govtIdPicBeans.size()>=1){\r\r            Toasty.warning(getApplicationContext(), \"Sorry you can't Add more than 1\", Toast.LENGTH_SHORT).show();\r\r        }\r\r        else {\r\r            final CharSequence[] items = {\"Select Image\", \"Select File\",\"Cancel\"};\r            //AlertDialog.Builder alert=new AlertDialog.Builder(this);\r            AlertDialog.Builder builder = new AlertDialog.Builder(EditVendorRegisterFormActivity.this);\r            builder.setTitle(\"Choose option\");\r            builder.setItems(items, (dialog, item) -> {\r                if (items[item].equals(\"Select Image\"))\r                {\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(EditVendorRegisterFormActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_GOVTID_CAMERA_PERMISSION_CODE);\r                    }\r                    else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(EditVendorRegisterFormActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVTID_PIC_PERMISSION);\r                    }\r\r                    else {\r\r                        isAddGovtIdproof = true;\r\r                        isAddClinicPic = false;\r\r                        isAddCertfProof = false;\r\r                        isAddPhotoIDproof = false;\r\r\r                        CropImage.activity().start(EditVendorRegisterFormActivity.this);\r\r                    }\r\r\r                }\r\r                else if (items[item].equals(\"Select File\")){\r\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M   && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVT_ID_PDF_PERMISSION);\r                    }\r\r                    else{\r\r                        Intent intent = new Intent();\r                        intent.setType(\"application/pdf\");\r                        intent.setAction(Intent.ACTION_GET_CONTENT);\r                        startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_GOVTID_PDF);\r\r\r                    }\r\r\r                }\r\r                else if (items[item].equals(\"Cancel\")) {\r                    dialog.dismiss();\r                }\r            });\r            builder.show();\r\r        }\r\r    }\r\r\r    @SuppressLint(\"LongLogTag\")\r    private void uploadGovtIDPdf() {\r\r        avi_indicator.show();\r\r        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\r        //RestApiInterface ApiService = RetrofitClient.getApiService();\r\r        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(govIdPart);\r\r//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());\r\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\r        call.enqueue(new Callback<FileUploadResponse>() {\r            @SuppressLint(\"LogNotTimber\")\r            @Override\r            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"PdfFileLink\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                if (response.body() != null) {\r\r                    if (200 == response.body().getCode()) {\r\r                        isAddGovtIdproof = false;\r\r                        DocBusInfoUploadRequest.GovtIdPicBean govtIdPicBean = new DocBusInfoUploadRequest.GovtIdPicBean (response.body().getData());\r\r                        govtIdPicBeans.add(govtIdPicBean);\r\r                        addGovtIdPdfAdapter = new AddGovtIdPdfAdapter(getApplicationContext(), govtIdPicBeans);\r\r                        recylerView_choosen_govtid_images.setAdapter(addGovtIdPdfAdapter);\r\r                    }\r\r                }\r\r\r            }\r\r            @Override\r            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r                // avi_indicator.smoothToHide();\r                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r            }\r        });\r\r\r    }\r\r    private void choosePhotoIDPdf() {\r\r        if(photoIdPicBeans!=null&&photoIdPicBeans.size()>=1){\r\r            Toasty.warning(getApplicationContext(), \"Sorry you can't Add more than 1\", Toast.LENGTH_SHORT).show();\r\r        }\r\r        else {\r\r            final CharSequence[] items = {\"Select Image\", \"Select File\",\"Cancel\"};\r            //AlertDialog.Builder alert=new AlertDialog.Builder(this);\r            AlertDialog.Builder builder = new AlertDialog.Builder(EditVendorRegisterFormActivity.this);\r            builder.setTitle(\"Choose option\");\r            builder.setItems(items, (dialog, item) -> {\r                if (items[item].equals(\"Select Image\"))\r                {\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(EditVendorRegisterFormActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_PHOTOID_CAMERA_PERMISSION_CODE);\r                    }\r                    else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTOID_PIC_PERMISSION);\r                    }\r                    {\r                        isAddPhotoIDproof=true;\r\r                        isAddClinicPic = false;\r\r                        isAddCertfProof = false;\r\r                        isAddGovtIdproof = false;\r\r                        CropImage.activity().start(EditVendorRegisterFormActivity.this);\r\r                    }\r\r                }\r\r                else if (items[item].equals(\"Select File\")){\r\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M   && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTO_ID_PDF_PERMISSION);\r                    }\r\r                    else{\r\r                        Intent intent = new Intent();\r                        intent.setType(\"application/pdf\");\r                        intent.setAction(Intent.ACTION_GET_CONTENT);\r                        startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_PHOTOID_PDF);\r\r\r                    }\r\r\r                }\r\r                else if (items[item].equals(\"Cancel\")) {\r                    dialog.dismiss();\r                }\r            });\r            builder.show();\r\r        }\r\r\r    }\r\r    @SuppressLint(\"LongLogTag\")\r    private void uploadPhotoIDPdf() {\r\r        avi_indicator.show();\r\r        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\r        //RestApiInterface ApiService = RetrofitClient.getApiService();\r\r        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(photIDPart);\r\r//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());\r\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\r        call.enqueue(new Callback<FileUploadResponse>() {\r            @Override\r            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"PdfFileLink\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                if (response.body() != null) {\r\r                    if (200 == response.body().getCode()) {\r\r                        isAddPhotoIDproof = false;\r\r                        DocBusInfoUploadRequest.PhotoIdPicBean photoIdPicBean = new DocBusInfoUploadRequest.PhotoIdPicBean(response.body().getData());\r\r                        photoIdPicBeans.add(photoIdPicBean);\r\r                        addPhotoIDPdfAdapter = new AddPhotoIDPdfAdapter(getApplicationContext(), photoIdPicBeans);\r\r                        recylerView_choosen_photo_id_images.setAdapter(addPhotoIDPdfAdapter);\r\r                    }\r\r                }\r\r\r\r\r            }\r\r            @Override\r            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r                // avi_indicator.smoothToHide();\r                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r            }\r        });\r\r\r    }\r\r    private void checkValidation() {\r            business_name = edt_business_name.getText().toString().trim();\r            boolean can_proceed = true;\r\r                if(business_name.isEmpty()){\r                    edt_business_name.setError(\"Please fill the business name\");\r                    edt_business_name.requestFocus();\r                    can_proceed = false;\r\r                }else if(edt_business_email.getText().toString().isEmpty()){\r                    edt_business_email.setError(\"Please fill the business email\");\r                    edt_business_email.requestFocus();\r                    can_proceed = false;\r\r                }else if(edt_business.getText().toString().isEmpty()){\r                    edt_business.setError(\"Please fill the business\");\r                    edt_business.requestFocus();\r                    can_proceed = false;\r\r                }else if(edt_phone.getText().toString().isEmpty()){\r                    edt_phone.setError(\"Please fill the phone number\");\r                    edt_phone.requestFocus();\r                    can_proceed = false;\r\r                }else if(edt_business_registration.getText().toString().isEmpty()){\r                    edt_business_registration.setError(\"Please fill the business registration details\");\r                    edt_business_registration.requestFocus();\r                    can_proceed = false;\r\r                }\r                else if(bus_service_gall_list!=null&&bus_service_gall_list.size()<1){\r\r                    Toasty.warning(getApplicationContext(), \"Please Choose minimum 1 Uplaod gallery image\", Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r                }\r                else if(photoIdPicBeans!=null&&photoIdPicBeans.size()<1){\r\r                    Toasty.warning(getApplicationContext(), \"Please Choose PhotoID File\", Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r                }\r                else if(govtIdPicBeans!=null&&govtIdPicBeans.size()<1){\r\r                    Toasty.warning(getApplicationContext(), \"Please Choose GovtID File\", Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r                }\r                else if(bus_certif_list!=null&&bus_certif_list.size()<1) {\r\r                    Toasty.warning(getApplicationContext(), \"Please Choose Certificate File\", Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r                }\r\r                if(can_proceed){\r                    if (new ConnectionDetector(getApplicationContext()).isNetworkAvailable(getApplicationContext())) {\r                        vendorRegisterFormUpdateResponseCall();\r                    }\r                }\r\r\r\r\r\r    }\r\r\r\r\r    @Override\r    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r        super.onActivityResult(requestCode, resultCode, data);\r\r        try{\r\r            switch (requestCode) {\r                case REQUEST_CHECK_SETTINGS_GPS:\r                    switch (resultCode) {\r                        case Activity.RESULT_OK:\r                            getMyLocation();\r                            break;\r                        case Activity.RESULT_CANCELED:\r                            getMyLocation();\r                            break;\r                    }\r                    break;\r            }\r\r\r            if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {\r                CropImage.ActivityResult result = CropImage.getActivityResult(data);\r                if (resultCode == RESULT_OK) {\r                    Uri resultUri = result.getUri();\r\r                    if (resultUri != null) {\r\r                        Log.w(\"selectedImageUri\", \" \" + resultUri);\r\r                        String filename = getFileName(resultUri);\r\r                        Log.w(\"filename\", \" \" + filename);\r\r                        String filePath = FileUtil.getPath(EditVendorRegisterFormActivity.this, resultUri);\r\r                        assert filePath != null;\r\r                        File file = new File(filePath); // initialize file here\r\r                        long length = file.length() / 1024; // Size in KB\r\r                        Log.w(\"filesize\", \" \" + length);\r\r                        if (length > 2000) {\r\r                            new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                                    .setTitleText(\"File Size\")\r                                    .setContentText(\"Please choose file size less than 2 MB \")\r                                    .setConfirmText(\"Ok\")\r                                    .show();\r                        } else {\r\r\r                            SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r                            String currentDateandTime = sdf.format(new Date());\r\r                            if(isAddClinicPic){\r\r                                filePart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                                uploadClinicImage();\r                            }\r\r                            else if(isAddCertfProof){\r\r                                certPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                                uploadCertPdf();\r                            }\r\r                            else if(isAddGovtIdproof){\r\r                                govIdPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                                uploadGovtIDPdf();\r                            }\r                            else if(isAddPhotoIDproof){\r\r                                photIDPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                                uploadPhotoIDPdf();\r                            }\r                        }\r\r\r                    } else {\r\r                        Toasty.warning(EditVendorRegisterFormActivity.this, \"Image Error!!Please upload Some other image\", Toasty.LENGTH_LONG).show();\r                    }\r\r\r                }\r            }\r\r            //\tToast.makeText(getActivity(),\"kk\",Toast.LENGTH_SHORT).show();\r            else if(requestCode== SELECT_CLINIC_PICTURE || requestCode == SELECT_CLINIC_CAMERA)\r            {\r\r                if(requestCode == SELECT_CLINIC_CAMERA)\r                {\r                    Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get(\"data\");\r\r                    File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\r                    OutputStream os;\r                    try {\r                        os = new FileOutputStream(file);\r                        if (photo != null) {\r                            photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r                        }\r                        os.flush();\r                        os.close();\r                    } catch (Exception e) {\r                        Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r                    }\r\r                    RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\r                    filePart = MultipartBody.Part.createFormData(\"sampleFile\",  user_id+currentDateandTime+file.getName(), requestFile);\r\r                    uploadClinicImage();\r\r                }\r\r                else{\r\r                    try {\r                        if (resultCode == Activity.RESULT_OK)\r                        {\r\r                            Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\r                            Uri selectedImageUri = data.getData();\r\r                            Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\r                            String filename = null;\r                            if (selectedImageUri != null) {\r                                filename = getFileName(selectedImageUri);\r                            }\r\r                            Log.w(\"filename\", \" \" + filename);\r\r                            String filePath = FileUtil.getPath(EditVendorRegisterFormActivity.this,selectedImageUri);\r\r                            assert filePath != null;\r\r                            File file = new File(filePath); // initialize file here\r\r                            long length = file.length() / 1024; // Size in KB\r\r                            Log.w(\"filesize\", \" \" + length);\r\r//                        if(length>200){\r//\r//                            new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r//                                    .setTitleText(\"File Size\")\r//                                    .setContentText(\"Please choose file size less than 200 kb \")\r//                                    .setConfirmText(\"Ok\")\r//                                    .show();\r//                        }\r//\r//                        else{\r\r                            filePart = MultipartBody.Part.createFormData(\"sampleFile\", user_id+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                            uploadClinicImage();\r                            //}\r\r                        }\r                    } catch (Exception e) {\r\r                        Log.w(\"Exception\", \" \" + e);\r                    }\r\r                }\r\r            }\r\r            else if(requestCode == SELECT_CERTIFICATE_CAMERA)\r            {\r                Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get(\"data\");\r\r                File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\r                OutputStream os;\r                try {\r                    os = new FileOutputStream(file);\r                    if (photo != null) {\r                        photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r                    }\r                    os.flush();\r                    os.close();\r                } catch (Exception e) {\r                    Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r                }\r\r                RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\r                certPart = MultipartBody.Part.createFormData(\"sampleFile\",  user_id+currentDateandTime+file.getName(), requestFile);\r\r                uploadCertPdf();\r\r            }\r\r            else if(requestCode == SELECT_CERTIFICATE_PICTURE){\r\r                try {\r                    if (resultCode == Activity.RESULT_OK) {\r\r                        Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\r                        Uri selectedImageUri = data.getData();\r\r                        Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\r                        String filename = null;\r                        if (selectedImageUri != null) {\r                            filename = getFileName(selectedImageUri);\r                        }\r\r                        Log.w(\"filename\", \" \" + filename);\r\r                        String filePath = FileUtil.getPath(EditVendorRegisterFormActivity.this,selectedImageUri);\r\r                        assert filePath != null;\r\r                        File file = new File(filePath); // initialize file here\r\r                        long length = file.length() / 1024; // Size in KB\r\r                        Log.w(\"filesize\", \" \" + length);\r\r                        certPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                        uploadCertPdf();\r\r\r                    }\r                } catch (Exception e) {\r\r                    Log.w(\"Exception\", \" \" + e);\r                }\r\r            }\r\r            else if(requestCode== SELECT_CERT_PDF){\r\r                try {\r                    if (resultCode == Activity.RESULT_OK)\r                    {\r\r                        if(data!=null){\r\r                            Log.w(\"URI\", \" \" + data);\r\r                            Uri selectedFileUri = data.getData();\r\r                            if(selectedFileUri!=null){\r\r                                Log.w(\"selectedFileUri\", \" \" + selectedFileUri);\r\r                                String filename = getFileName(selectedFileUri);\r\r                                Log.w(\"filename\", \" \" + filename);\r\r                                String filePath = FileUtil.getPath(EditVendorRegisterFormActivity.this,selectedFileUri);\r\r                                assert filePath != null;\r\r                                File file = new File(filePath); // initialize file here\r\r                                long length = file.length() / 1024; // Size in KB\r\r                                Log.w(\"filesize\", \" \" + length);\r\r                                if(length>2000){\r\r                                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                                            .setTitleText(\"File Size\")\r                                            .setContentText(\"Please choose file size less than 2MB \")\r                                            .setConfirmText(\"Ok\")\r                                            .show();\r                                }\r\r                                else{\r\r                                    certPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"pdf/*\"), file));\r\r                                    uploadCertPdf();\r                                }\r\r\r                            }\r\r                            else {\r\r                                Toasty.warning(getApplicationContext(),\"File Error!Please Choose some other file\",Toasty.LENGTH_LONG).show();\r\r                            }\r                        }\r                        else {\r\r                            Toasty.warning(getApplicationContext(),\"File Error!Please Choose some other file\",Toasty.LENGTH_LONG).show();\r\r                        }\r\r                    }\r                } catch (Exception e) {\r\r                    Log.w(\"Exception\", \" \" + e);\r                }\r            }\r\r            else if(requestCode == SELECT_GOVTID_CAMERA)\r            {\r                Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get(\"data\");\r\r                File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\r                OutputStream os;\r                try {\r                    os = new FileOutputStream(file);\r                    if (photo != null) {\r                        photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r                    }\r                    os.flush();\r                    os.close();\r                } catch (Exception e) {\r                    Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r                }\r\r                RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\r                govIdPart = MultipartBody.Part.createFormData(\"sampleFile\",  user_id+currentDateandTime+file.getName(), requestFile);\r\r                uploadGovtIDPdf();\r\r            }\r\r            else if(requestCode == SELECT_GOVTID_PICTURE){\r\r                try {\r                    if (resultCode == Activity.RESULT_OK) {\r\r                        Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\r                        Uri selectedImageUri = data.getData();\r\r                        Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\r                        String filename = null;\r                        if (selectedImageUri != null) {\r                            filename = getFileName(selectedImageUri);\r                        }\r\r                        Log.w(\"filename\", \" \" + filename);\r\r                        String filePath = FileUtil.getPath(EditVendorRegisterFormActivity.this,selectedImageUri);\r\r                        assert filePath != null;\r\r                        File file = new File(filePath); // initialize file here\r\r                        long length = file.length() / 1024; // Size in KB\r\r                        Log.w(\"filesize\", \" \" + length);\r\r                        govIdPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                        uploadGovtIDPdf();\r\r\r                    }\r                } catch (Exception e) {\r\r                    Log.w(\"Exception\", \" \" + e);\r                }\r\r            }\r\r            else if(requestCode== SELECT_GOVTID_PDF){\r\r                try {\r                    if (resultCode == Activity.RESULT_OK)\r                    {\r\r                        if(data!=null){\r\r                            Log.w(\"URI\", \" \" + data);\r\r                            Uri selectedFileUri = data.getData();\r\r                            if(selectedFileUri!=null){\r\r                                Log.w(\"selectedFileUri\", \" \" + selectedFileUri);\r\r                                String filename = getFileName(selectedFileUri);\r\r                                Log.w(\"filename\", \" \" + filename);\r\r                                String filePath = FileUtil.getPath(EditVendorRegisterFormActivity.this,selectedFileUri);\r\r                                assert filePath != null;\r\r                                File file = new File(filePath); // initialize file here\r\r                                long length = file.length() / 1024; // Size in KB\r\r                                Log.w(\"filesize\", \" \" + length);\r\r                                if(length>200){\r\r                                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                                            .setTitleText(\"File Size\")\r                                            .setContentText(\"Please choose file size less than 200 kb \")\r                                            .setConfirmText(\"Ok\")\r                                            .show();\r                                }\r\r                                else{\r\r                                    govIdPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"pdf/*\"), file));\r\r                                    uploadGovtIDPdf();\r                                }\r                            }\r\r                            else {\r\r\r                                Toasty.warning(EditVendorRegisterFormActivity.this, \"File Error!!Please upload Some other file\", Toasty.LENGTH_LONG).show();\r\r                            }\r\r                        }\r\r                        else {\r\r\r                            Toasty.warning(EditVendorRegisterFormActivity.this, \"File Error!!Please upload Some other file\", Toasty.LENGTH_LONG).show();\r\r                        }\r\r\r                    }\r                } catch (Exception e) {\r\r                    Log.w(\"Exception\", \" \" + e);\r                }\r            }\r\r            else if(requestCode == SELECT_PHOTOID_CAMERA)\r            {\r                Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get(\"data\");\r\r                File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\r                OutputStream os;\r                try {\r                    os = new FileOutputStream(file);\r                    if (photo != null) {\r                        photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r                    }\r                    os.flush();\r                    os.close();\r                } catch (Exception e) {\r                    Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r                }\r\r                RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\r                photIDPart = MultipartBody.Part.createFormData(\"sampleFile\",  user_id+currentDateandTime+file.getName(), requestFile);\r\r                uploadPhotoIDPdf();\r\r            }\r\r            else if(requestCode == SELECT_PHOTOID_PICTURE){\r\r                try {\r                    if (resultCode == Activity.RESULT_OK) {\r\r                        Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\r                        Uri selectedImageUri = data.getData();\r\r                        Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\r                        String filename = null;\r                        if (selectedImageUri != null) {\r                            filename = getFileName(selectedImageUri);\r                        }\r\r                        Log.w(\"filename\", \" \" + filename);\r\r                        String filePath = FileUtil.getPath(EditVendorRegisterFormActivity.this,selectedImageUri);\r\r                        assert filePath != null;\r\r                        File file = new File(filePath); // initialize file here\r\r                        long length = file.length() / 1024; // Size in KB\r\r                        Log.w(\"filesize\", \" \" + length);\r\r                        photIDPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                        uploadPhotoIDPdf();\r\r\r                    }\r                } catch (Exception e) {\r\r                    Log.w(\"Exception\", \" \" + e);\r                }\r\r            }\r\r            else if(requestCode== SELECT_PHOTOID_PDF){\r\r                try {\r                    if (resultCode == Activity.RESULT_OK)\r                    {\r                        if(data!=null){\r                            Log.w(\"URI\", \" \" + data);\r\r                            Uri selectedFileUri = data.getData();\r\r                            if(selectedFileUri!=null){\r\r                                Log.w(\"selectedFileUri\", \" \" + selectedFileUri);\r\r                                String filename = getFileName(selectedFileUri);\r\r                                Log.w(\"filename\", \" \" + filename);\r\r                                String filePath = FileUtil.getPath(EditVendorRegisterFormActivity.this,selectedFileUri);\r\r                                assert filePath != null;\r\r                                File file = new File(filePath); // initialize file here\r\r                                long length = file.length() / 1024; // Size in KB\r\r                                Log.w(\"filesize\", \" \" + length);\r\r                                if(length>2000){\r\r                                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                                            .setTitleText(\"File Size\")\r                                            .setContentText(\"Please choose file size less than 2MB \")\r                                            .setConfirmText(\"Ok\")\r                                            .show();\r                                }\r\r                                else{\r\r                                    photIDPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"pdf/*\"), file));\r\r                                    uploadPhotoIDPdf();\r                                }\r                            }\r\r                            else {\r\r                                Toasty.warning(EditVendorRegisterFormActivity.this, \"File Error!!Please upload Some other file\", Toasty.LENGTH_LONG).show();\r                            }\r\r                        }\r\r                        else {\r\r                            Toasty.warning(EditVendorRegisterFormActivity.this, \"File Error!!Please upload Some other file\", Toasty.LENGTH_LONG).show();\r                        }\r\r\r\r                    }\r                } catch (Exception e) {\r\r                    Log.w(\"Exception\", \" \" + e);\r                }\r            }\r\r\r        }\r        catch (Exception e){\r\r\r            Log.w(\"Exception\", \" \" + e);\r        }\r\r\r    }\r\r    @Override\r    public void onBackPressed() {\r        super.onBackPressed();\r        startActivity(new Intent(EditVendorRegisterFormActivity.this, VendorProfileScreenActivity.class));\r        finish();\r    }\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @Override\r    public void onClick(View v) {\r\r        switch (v.getId()){\r\r            case R.id.btn_submit:\r                checkValidation();\r                break;\r\r            case R.id.img_back:\r                onBackPressed();\r                break;\r\r                case R.id.rl_upload_gallery_image:\r                    chooseServiceGalleryImage();\r                break;\r\r            case R.id.rl_certificates:\r                chooseCertPdf();\r                break;\r\r            case R.id.rl_govtid:\r                chooseGovIDPdf();\r                break;\r\r            case R.id.rl_photoid:\r                choosePhotoIDPdf();\r                break;\r\r\r\r\r\r        }\r\r    }\r\r\r    @Override\r    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\r        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r        if (requestCode == MY_PERMISSIONS_REQUEST_LOCATION) {\r            if (grantResults.length > 0\r                    && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r                if (ContextCompat.checkSelfPermission(getApplicationContext(),\r                        Manifest.permission.ACCESS_FINE_LOCATION)\r                        == PackageManager.PERMISSION_GRANTED) {\r\r\r                }\r            } else {\r                Toast.makeText(getApplicationContext(), \"permission denied\", Toast.LENGTH_LONG).show();\r            }\r        }\r\r        if (requestCode == REQUEST_READ_CLINIC_PIC_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r                /*Intent intent = new Intent();\r                intent.setType(\"image/*\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_CLINIC_PICTURE);\r*/\r                chooseServiceGalleryImage();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_READ_CLINIC_PIC_PERMISSION);\r                        })\r                        .show();\r\r            }\r\r        } else if (requestCode == REQUEST_CLINIC_CAMERA_PERMISSION_CODE) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r//                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r//\r//                startActivityForResult(intent, SELECT_CLINIC_CAMERA);\r\r                chooseServiceGalleryImage();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Camera for taking picture\")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r                        })\r                        .show();\r\r            }\r\r        } else if (requestCode == REQUEST_READ_CLINIC_PDF_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r                Intent intent = new Intent();\r                intent.setType(\"application/pdf\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_CERT_PDF);\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Pdf files \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PDF_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_READ_CLINIC_PDF_PERMISSION);\r                        })\r                        .show();\r\r            }\r\r        } else if (requestCode == REQUEST_READ_GOVT_ID_PDF_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r                Intent intent = new Intent();\r                intent.setType(\"application/pdf\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_GOVTID_PDF);\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Pdf Files \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVT_ID_PDF_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_READ_GOVT_ID_PDF_PERMISSION);\r                        })\r                        .show();\r\r            }\r\r        } else if (requestCode == REQUEST_READ_PHOTO_ID_PDF_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r                Intent intent = new Intent();\r                intent.setType(\"application/pdf\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_PHOTOID_PDF);\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Pdf files \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTO_ID_PDF_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_READ_PHOTO_ID_PDF_PERMISSION);\r                        })\r                        .show();\r\r            }\r\r        } else if (requestCode == REQUEST_READ_CERTIFICATE_PIC_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r//                Intent intent = new Intent();\r//                intent.setType(\"image/*\");\r//                intent.setAction(Intent.ACTION_GET_CONTENT);\r//                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_CERTIFICATE_PICTURE);\r                chooseCertPdf();\r\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CERTIFICATE_PIC_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_READ_CERTIFICATE_PIC_PERMISSION);\r                        })\r                        .show();\r\r            }\r\r        } else if (requestCode == REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r                /*Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\r                //    intent.putExtra(MediaStore.EXTRA_SCREEN_ORIENTATION, ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\r\r                startActivityForResult(intent, SELECT_CERTIFICATE_CAMERA);*/\r\r                chooseCertPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Camera for taking picture\")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE);\r                        })\r                        .show();\r\r            }\r\r        } else if (requestCode == REQUEST_READ_GOVTID_PIC_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r//                Intent intent = new Intent();\r//                intent.setType(\"image/*\");\r//                intent.setAction(Intent.ACTION_GET_CONTENT);\r//                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_GOVTID_PICTURE);\r\r                chooseGovIDPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVTID_PIC_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_READ_GOVTID_PIC_PERMISSION);\r                        })\r                        .show();\r\r            }\r\r        } else if (requestCode == REQUEST_GOVTID_CAMERA_PERMISSION_CODE) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r                /*Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\r                //    intent.putExtra(MediaStore.EXTRA_SCREEN_ORIENTATION, ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\r\r                startActivityForResult(intent, SELECT_GOVTID_CAMERA);\r*/\r                chooseGovIDPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Camera for taking picture\")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_GOVTID_CAMERA_PERMISSION_CODE);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_GOVTID_CAMERA_PERMISSION_CODE);\r                        })\r                        .show();\r\r            }\r\r        } else if (requestCode == REQUEST_READ_PHOTOID_PIC_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r                /*Intent intent = new Intent();\r                intent.setType(\"image/*\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_PHOTOID_PICTURE);*/\r\r                choosePhotoIDPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTOID_PIC_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_READ_PHOTOID_PIC_PERMISSION);\r                        })\r                        .show();\r\r            }\r\r        } else if (requestCode == REQUEST_PHOTOID_CAMERA_PERMISSION_CODE) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r                /*Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\r                //    intent.putExtra(MediaStore.EXTRA_SCREEN_ORIENTATION, ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\r\r                startActivityForResult(intent, SELECT_PHOTOID_CAMERA);*/\r\r                choosePhotoIDPdf();\r\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Camera for taking picture\")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_PHOTOID_CAMERA_PERMISSION_CODE);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_PHOTOID_CAMERA_PERMISSION_CODE);\r                        })\r                        .show();\r\r            }\r\r        }\r\r\r    }\r\r\r    private void showWarning(int REQUEST_PERMISSION_CODE) {\r\r        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                .setTitleText(\"Sorry!!\")\r                .setContentText(\"You Can't proceed further unless you allow permission\")\r                .setConfirmText(\"Ok\")\r                .setConfirmClickListener(sDialog -> {\r\r                    sDialog.dismissWithAnimation();\r\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_PERMISSION_CODE);\r                    }\r\r\r                })\r                .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                .show();\r    }\r    private void showWarningAddMoreService() {\r\r        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                .setTitleText(\"Add More Service!!\")\r                .setContentText(\"Please enter the service name\")\r                .setConfirmText(\"Ok\")\r                .setConfirmClickListener(SweetAlertDialog::dismissWithAnimation)\r                .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                .show();\r    }\r    private void showWarningAddMoreSpecialzation() {\r\r        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                .setTitleText(\"Add More Specialzation!!\")\r                .setContentText(\"Please enter the specialzation name\")\r                .setConfirmText(\"Ok\")\r                .setConfirmClickListener(SweetAlertDialog::dismissWithAnimation)\r                .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                .show();\r    }\r\r    public String getFileName(Uri uri) {\r        String result = null;\r        if (Objects.requireNonNull(uri.getScheme()).equals(\"content\")) {\r            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {\r                if (cursor != null && cursor.moveToFirst()) {\r                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));\r                }\r            }\r        }\r        if (result == null) {\r            result = uri.getPath();\r            int cut = 0;\r            if (result != null) {\r                cut = result.lastIndexOf('/');\r            }\r            if (cut != -1) {\r                if (result != null) {\r                    result = result.substring(cut + 1);\r                }\r            }\r        }\r        return result;\r    }\r\r\r\r\r    @SuppressLint(\"LongLogTag\")\r    private void vendorRegisterFormUpdateResponseCall() {\r        avi_indicator.setVisibility(View.VISIBLE);\r        avi_indicator.smoothToShow();\r        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);\r        Call<VendorRegisterFormCreateResponse> call = apiInterface.vendorRegisterFormUpdateResponseCall(RestUtils.getContentType(), vendorRegisterFormCreateRequest());\r        Log.w(TAG,\"vendorRegisterFormCreateResponseCall url  :%s\"+\" \"+ call.request().url().toString());\r\r        call.enqueue(new Callback<VendorRegisterFormCreateResponse>() {\r            @SuppressLint(\"LongLogTag\")\r            @Override\r            public void onResponse(@NonNull Call<VendorRegisterFormCreateResponse> call, @NonNull Response<VendorRegisterFormCreateResponse> response) {\r\r                Log.w(TAG,\"vendorRegisterFormCreateResponseCall\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                avi_indicator.smoothToHide();\r\r                if (response.body() != null) {\r                    if(response.body().getCode() == 200){\r                        if(response.body().getMessage() != null){\r                            showRegisterSuccessalert(response.body().getMessage());\r                        }\r\r                    }\r                    else{\r                        showErrorLoading(response.body().getMessage());\r                    }\r                }\r\r\r            }\r\r            @SuppressLint(\"LongLogTag\")\r            @Override\r            public void onFailure(@NonNull Call<VendorRegisterFormCreateResponse> call, @NonNull Throwable t) {\r\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"VendorRegisterFormCreateResponse flr\"+\"--->\" + t.getMessage());\r            }\r        });\r\r    }\r    @SuppressLint(\"LongLogTag\")\r    private VendorRegisterFormCreateRequest vendorRegisterFormCreateRequest() {\r        /*\r         * user_id : 123123213\r         * _id\r         * user_name : Mohammed imthiyas\r         * user_email : mohammed@gmail.com\r         * bussiness_name : Mohammed\r         * bussiness_email : mohammed@gmail.com\r         * bussiness : Mohammed\r         * bussiness_phone : 9876543210\r         * business_reg : Resdf\r         * bussiness_gallery : [{\"bussiness_gallery\":\"http://mysalveo.com/api/uploads/images.jpeg\"},{\"bussiness_gallery\":\"http://mysalveo.com/api/uploads/images.jpeg\"}]\r         * photo_id_proof : http://mysalveo.com/api/uploads/images.jpeg\r         * govt_id_proof : http://mysalveo.com/api/uploads/images.jpeg\r         * certifi : [{\"certifi\":\"http://mysalveo.com/api/uploads/images.jpeg\"},{\"certifi\":\"http://mysalveo.com/api/uploads/images.jpeg\"}]\r         * date_and_time : 23-10-2020 12:00 AM\r         * mobile_type : Admin\r         * profile_status : true\r         * profile_verification_status : Not Verified\r         * bussiness_loc : 12.0\r         * bussiness_lat : 80.0\r         * bussiness_long : Moolakadai\r         * delete_status : true\r         */\r\r        SimpleDateFormat sdf = new SimpleDateFormat(\"dd/MM/yyyy hh:mm aa\", Locale.getDefault());\r        String currentDateandTime = sdf.format(new Date());\r        VendorRegisterFormCreateRequest vendorRegisterFormCreateRequest = new VendorRegisterFormCreateRequest();\r        vendorRegisterFormCreateRequest.setUser_id(user_id);\r        vendorRegisterFormCreateRequest.set_id(_id);\r        vendorRegisterFormCreateRequest.setUser_name(username);\r        vendorRegisterFormCreateRequest.setUser_email(useremail);\r        vendorRegisterFormCreateRequest.setBussiness_name(edt_business_name.getText().toString());\r        vendorRegisterFormCreateRequest.setBussiness_email(edt_business_email.getText().toString());\r        vendorRegisterFormCreateRequest.setBussiness(edt_business.getText().toString());\r        vendorRegisterFormCreateRequest.setBussiness_phone(edt_phone.getText().toString());\r        vendorRegisterFormCreateRequest.setBusiness_reg(edt_business_registration.getText().toString());\r        vendorRegisterFormCreateRequest.setBussiness_gallery(bus_service_gall_list);\r        vendorRegisterFormCreateRequest.setPhoto_id_proof(photoIdPic);\r        vendorRegisterFormCreateRequest.setGovt_id_proof(govtIdPic);\r        vendorRegisterFormCreateRequest.setCertifi(bus_certif_list);\r        vendorRegisterFormCreateRequest.setDate_and_time(currentDateandTime);\r        vendorRegisterFormCreateRequest.setMobile_type(\"Android\");\r        vendorRegisterFormCreateRequest.setProfile_status(true);\r        vendorRegisterFormCreateRequest.setProfile_verification_status(\"Not verified\");\r        vendorRegisterFormCreateRequest.setBussiness_loc(AddressLine);\r        vendorRegisterFormCreateRequest.setBussiness_lat(latitude);\r        vendorRegisterFormCreateRequest.setBussiness_long(longitude);\r\r        Log.w(TAG,\"vendorRegisterFormCreateRequest\"+ \"--->\" + new Gson().toJson(vendorRegisterFormCreateRequest));\r        return vendorRegisterFormCreateRequest;\r    }\r\r\r\r    public void showErrorLoading(String errormesage){\r        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);\r        alertDialogBuilder.setMessage(errormesage);\r        alertDialogBuilder.setPositiveButton(\"ok\",\r                (arg0, arg1) -> hideLoading());\r\r\r\r\r        AlertDialog alertDialog = alertDialogBuilder.create();\r        alertDialog.show();\r    }\r    public void hideLoading(){\r        try {\r            alertDialog.dismiss();\r        }catch (Exception ignored){\r\r        }\r    }\r\r\r\r\r    private void googleApiConnected() {\r\r        googleApiClient = new GoogleApiClient.Builder(Objects.requireNonNull(getApplicationContext())).\r                addConnectionCallbacks(this).\r                addOnConnectionFailedListener(this).\r                addApi(LocationServices.API).build();\r        googleApiClient.connect();\r\r    }\r    private void checkLocation() {\r        try {\r            LocationManager lm = (LocationManager) getApplicationContext().getSystemService(Context.LOCATION_SERVICE);\r            boolean gps_enabled = false;\r            boolean network_enabled = false;\r\r            try {\r                gps_enabled = lm.isProviderEnabled(LocationManager.GPS_PROVIDER);\r            } catch (Exception ignored) {\r            }\r\r            try {\r                network_enabled = lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER);\r            } catch (Exception ignored) {\r            }\r\r            if (!gps_enabled && !network_enabled) {\r\r                if (!lm.isProviderEnabled(LocationManager.GPS_PROVIDER)) {\r                    getMyLocation();\r                }\r\r            } else {\r                getLatandLong();\r            }\r        } catch (Exception e) {\r            e.printStackTrace();\r        }\r\r    }\r    @SuppressLint(\"LongLogTag\")\r    @Override\r    public void onLocationChanged(Location location) {\r        mLastLocation = location;\r        latitude = mLastLocation.getLatitude();\r        longitude = mLastLocation.getLongitude();\r\r        if(latitude != 0 && longitude != 0){\r            getAddress(latitude,longitude);\r        }\r\r        Log.w(TAG,\"onLocationChanged : \"+\" latitude : \"+latitude+ \" longitude : \"+longitude);\r\r\r\r\r\r\r    }\r    @Override\r    public void onConnected(@Nullable Bundle bundle) {\r        permissionChecking();\r    }\r    @Override\r    public void onConnectionSuspended(int i) {\r\r    }\r    @Override\r    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {\r\r    }\r    @SuppressLint(\"LongLogTag\")\r    @Override\r    public void onMapReady(GoogleMap googleMap) {\r\r\r    }\r    private void permissionChecking() {\r        if (getApplicationContext() != null) {\r            if (Build.VERSION.SDK_INT >= 23 && (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) &&\r                    (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED)) {\r\r                ActivityCompat.requestPermissions(Objects.requireNonNull(this), new String[]{Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION}, 5);\r\r            } else {\r\r                checkLocation();\r            }\r        }\r    }\r    public void getMyLocation() {\r\r        if (googleApiClient != null) {\r\r            if (googleApiClient.isConnected()) {\r                if(getApplicationContext() != null){\r                    if (ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r                        // TODO: Consider calling\r                        //    ActivityCompat#requestPermissions\r                        // here to request the missing permissions, and then overriding\r                        //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\r                        //                                          int[] grantResults)\r                        // to handle the case where the user grants the permission. See the documentation\r                        // for ActivityCompat#requestPermissions for more details.\r\r                        return;\r                    }\r\r                }\r\r                mLastLocation = LocationServices.FusedLocationApi.getLastLocation(googleApiClient);\r                LocationRequest locationRequest = new LocationRequest();\r                locationRequest.setInterval(2000);\r                locationRequest.setFastestInterval(2000);\r                locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);\r                LocationSettingsRequest.Builder builder = new LocationSettingsRequest.Builder().addLocationRequest(locationRequest);\r                builder.setAlwaysShow(true);\r                LocationServices.FusedLocationApi.requestLocationUpdates(googleApiClient, locationRequest, this);\r                PendingResult<LocationSettingsResult> result = LocationServices.SettingsApi.checkLocationSettings(googleApiClient, builder.build());\r                result.setResultCallback(result1 -> {\r                    Status status = result1.getStatus();\r                    switch (status.getStatusCode()) {\r                        case LocationSettingsStatusCodes.SUCCESS:\r                            // All location settings are satisfied.\r                            // You can initialize location requests here.\r                            mLastLocation = LocationServices.FusedLocationApi.getLastLocation(googleApiClient);\r\r\r\r\r\r\r                            Handler handler = new Handler();\r                            int delay = 1000; //milliseconds\r\r                            handler.postDelayed(new Runnable() {\r                                @SuppressLint(\"LongLogTag\")\r                                public void run() {\r                                    //do something\r                                    Log.w(TAG, \"getMyLocation-->\");\r\r                                    //parkingListResponseCall(checkinhours,checkouthours,requestCheckinDate,requestCheckoutDate, selectedVehicleTypeId);\r\r\r                                }\r                            }, delay);\r\r\r                            break;\r                        case LocationSettingsStatusCodes.RESOLUTION_REQUIRED:\r                            try {\r                                status.startResolutionForResult(this, REQUEST_CHECK_SETTINGS_GPS);\r                            } catch (IntentSender.SendIntentException e) {\r                                // Ignore the error.\r                            }\r                            break;\r                        case LocationSettingsStatusCodes.SETTINGS_CHANGE_UNAVAILABLE:\r                            break;\r                    }\r                });\r            }\r\r\r        }\r    }\r    @SuppressLint(\"LongLogTag\")\r    private void getLatandLong() {\r        try {\r            if (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 1);\r\r            } else {\r                GPSTracker gps = new GPSTracker(getApplicationContext());\r                // Check if GPS enabled\r                if (gps.canGetLocation()) {\r                    latitude = gps.getLatitude();\r                    longitude = gps.getLongitude();\r\r                    Log.w(TAG, \"getLatandLong--->\" + \"latitude\" + \" \" + latitude + \"longitude\" + \" \" + longitude);\r                    if(latitude != 0 && longitude != 0){\r                        getAddress(latitude,longitude);\r                    }\r\r\r\r\r                }\r            }\r\r\r\r\r        } catch (Exception e) {\r            e.printStackTrace();\r        }\r    }\r\r    @SuppressLint(\"LongLogTag\")\r    private void getAddress(double latitude, double longitude) {\r        StringBuilder result = new StringBuilder();\r        try {\r            Geocoder geocoder = new Geocoder(this, Locale.getDefault());\r            List<Address> listAddresses = geocoder.getFromLocation(latitude, longitude, 1);\r            if (null != listAddresses && listAddresses.size() > 0) {\r                Address address = listAddresses.get(0);\r                result.append(address.getLocality()).append(\"\\n\");\r                result.append(address.getCountryName());\r\r                String state = listAddresses.get(0).getAdminArea();\r                String country = listAddresses.get(0).getCountryName();\r                String subLocality = listAddresses.get(0).getSubLocality();\r                String postalcode = listAddresses.get(0).getPostalCode();\r                AddressLine = listAddresses.get(0).getAddressLine(0);\r                String CityName = listAddresses.get(0).getLocality();\r                if(CityName != null){\r                    AddressLine = CityName+\" \"+listAddresses.get(0).getAddressLine(0);\r\r                }\r\r\r                // Thoroughfare seems to be the street name without numbers\r               String street = address.getThoroughfare();\r\r\r\r                Log.w(TAG,\"AddressLine :\"+AddressLine+\"  CityName :\"+CityName+\"  street :\"+street);\r\r                Log.w(TAG,\"state :\"+state+\" \"+\"country :\"+country+\"subLocality :\"+subLocality+\"  postalcode :\"+postalcode);\r            }\r        } catch (IOException e) {\r            Log.e(\"tag\", Objects.requireNonNull(e.getMessage()));\r        }\r\r        result.toString();\r    }\r\r\r    @SuppressLint(\"LongLogTag\")\r    private void getVendorOrderIDResponseCall() {\r        avi_indicator.setVisibility(View.VISIBLE);\r        avi_indicator.smoothToShow();\r        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);\r        Call<VendorGetsOrderIDResponse> call = apiInterface.vendor_gets_orderbyId_ResponseCall(RestUtils.getContentType(), vendorGetsOrderIdRequest());\r        Log.w(TAG,\"getVendorOrderIDResponseCall url  :%s\"+\" \"+ call.request().url().toString());\r\r        call.enqueue(new Callback<VendorGetsOrderIDResponse>() {\r            @SuppressLint({\"LongLogTag\", \"LogNotTimber\"})\r            @Override\r            public void onResponse(@NonNull Call<VendorGetsOrderIDResponse> call, @NonNull Response<VendorGetsOrderIDResponse> response) {\r\r                Log.w(TAG,\"getVendorOrderIDResponseCall\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                avi_indicator.smoothToHide();\r\r                if (response.body() != null) {\r                    if(response.body().getCode() == 200){\r\r                        if(response.body().getData()!=null) {\r\r                            if (response.body().getData().get_id() != null && !(response.body().getData().get_id().isEmpty())) {\r                                APIClient.VENDOR_ID = response.body().getData().get_id();\r                                _id = response.body().getData().get_id();\r                            }\r\r\r                            if (response.body().getData().getBussiness_gallery() != null && response.body().getData().getBussiness_gallery().size() > 0) {\r                                for (int i = 0; i < response.body().getData().getBussiness_gallery().size(); i++) {\r                                    response.body().getData().getBussiness_gallery().get(i).getBussiness_gallery();\r                                }\r\r\r                                if (response.body().getData().getBussiness_name() != null) {\r                                    edt_business_name.setText(response.body().getData().getBussiness_name());\r                                }\r                                if (response.body().getData().getBussiness_email() != null) {\r                                    edt_business_email.setText(response.body().getData().getBussiness_email());\r                                }\r                                if (response.body().getData().getBussiness() != null) {\r                                    edt_business.setText(response.body().getData().getBussiness());\r                                }\r                                if (response.body().getData().getBussiness_phone() != null) {\r                                    edt_phone.setText(response.body().getData().getBussiness_phone());\r                                }\r                                if (response.body().getData().getBusiness_reg() != null) {\r                                    edt_business_registration.setText(response.body().getData().getBusiness_reg());\r                                }\r                                if (response.body().getData().getBussiness_gallery() != null && response.body().getData().getBussiness_gallery().size() > 0) {\r                                    bus_service_gall_list_edit = response.body().getData().getBussiness_gallery();\r\r                                    for (int i = 0; i < bus_service_gall_list_edit.size(); i++) {\r                                        VendorRegisterFormCreateRequest.BussinessGalleryBean busServiceGallBean = new VendorRegisterFormCreateRequest.BussinessGalleryBean();\r                                        busServiceGallBean.setBussiness_gallery(bus_service_gall_list_edit.get(i).getBussiness_gallery());\r                                        bus_service_gall_list.add(busServiceGallBean);\r                                    }\r\r                                    if(bus_service_gall_list!=null&&bus_service_gall_list.size()>0){\r\r                                        editVendorGalleryImageListAdapter = new EditVendorGalleryImageListAdapter(getApplicationContext(),bus_service_gall_list_edit, bus_service_gall_list);\r                                        rcylr_choosen_gallery_img.setAdapter(editVendorGalleryImageListAdapter);\r\r\r                                    }\r                                    else {\r\r                                        rcylr_choosen_gallery_img.setVisibility(View.GONE);\r                                    }\r\r\r\r                                }\r\r                                if(response.body().getData().getPhoto_id_proof() != null){\r                                    photoIdPic = response.body().getData().getPhoto_id_proof();\r                                    DocBusInfoUploadRequest.PhotoIdPicBean photoIdPicBean = new DocBusInfoUploadRequest.PhotoIdPicBean(photoIdPic);\r                                    photoIdPicBeans.add(photoIdPicBean);\r\r                                    if(photoIdPicBeans!=null&&photoIdPicBeans.size()>0){\r                                        editPhotoIDPdfAdapter = new EditVendorPhotoIDPdfAdapter(getApplicationContext(), photoIdPicBeans);\r                                        recylerView_choosen_photo_id_images.setAdapter(editPhotoIDPdfAdapter);\r                                    }\r                                    else {\r\r                                        recylerView_choosen_photo_id_images.setVisibility(View.VISIBLE);\r                                    }\r\r\r                                }\r                                if(response.body().getData().getGovt_id_proof() != null){\r                                    govtIdPic = response.body().getData().getGovt_id_proof();\r                                    DocBusInfoUploadRequest.GovtIdPicBean govtIdPicBean = new DocBusInfoUploadRequest.GovtIdPicBean(govtIdPic);\r                                    govtIdPicBeans.add(govtIdPicBean);\r\r                                    if(govtIdPicBeans!=null&&govtIdPicBeans.size()>0){\r\r                                        editGovtIdPdfAdapter = new EditVendorGovtIdPdfAdapter(getApplicationContext(), govtIdPicBeans);\r                                        recylerView_choosen_govtid_images.setAdapter(editGovtIdPdfAdapter);\r                                    }\r                                    else {\r\r                                        recylerView_choosen_govtid_images.setVisibility(View.GONE);\r                                    }\r\r                                }\r                                if(response.body().getData().getCertifi() != null){\r                                    bus_certif_list_edit = response.body().getData().getCertifi();\r                                    for(int i=0;i<bus_certif_list_edit.size();i++){\r                                        VendorRegisterFormCreateRequest.CertifiBean busCertifBean = new VendorRegisterFormCreateRequest.CertifiBean();\r                                        busCertifBean.setCertifi(bus_certif_list_edit.get(i).getCertifi());\r                                        bus_certif_list.add(busCertifBean);\r                                    }\r                                    if(bus_certif_list!=null&&bus_certif_list.size()>0){\r\r                                        editCertPdfAdapter = new EditVendorCertPdfAdapter(getApplicationContext(), bus_certif_list_edit,bus_certif_list);\r                                        recylerView_choosen_certificate_images.setAdapter(editCertPdfAdapter);\r                                    }\r                                    else {\r\r                                        recylerView_choosen_certificate_images.setVisibility(View.GONE);\r                                    }\r\r                                }\r\r\r\r                            }\r                        }\r\r                            }\r\r\r                        }\r\r\r                    }\r\r\r\r            @SuppressLint({\"LongLogTag\", \"LogNotTimber\"})\r            @Override\r            public void onFailure(@NonNull Call<VendorGetsOrderIDResponse> call, @NonNull Throwable t) {\r\r                avi_indicator.smoothToHide();\r\r                Log.w(TAG,\"getVendorOrderIDResponseCall flr\"+\"--->\" + t.getMessage());\r            }\r        });\r\r    }\r    @SuppressLint(\"LongLogTag\")\r    private VendorGetsOrderIdRequest vendorGetsOrderIdRequest() {\r        VendorGetsOrderIdRequest vendorGetsOrderIdRequest = new VendorGetsOrderIdRequest();\r        vendorGetsOrderIdRequest.setUser_id(user_id);\r        Log.w(TAG,\"vendorGetsOrderIdRequest\"+ \"--->\" + new Gson().toJson(vendorGetsOrderIdRequest));\r        return vendorGetsOrderIdRequest;\r    }\r\r\r    private void showRegisterSuccessalert(String message) {\r        try {\r\r            dialog = new Dialog(EditVendorRegisterFormActivity.this);\r            dialog.setCancelable(false);\r            dialog.setContentView(R.layout.alert_register_update);\r            TextView txt_success_msg = dialog.findViewById(R.id.txt_success_msg);\r            Button btn_back_to_profile = dialog.findViewById(R.id.btn_back_to_profile);\r            txt_success_msg.setText(message);\r\r            btn_back_to_profile.setOnClickListener(new View.OnClickListener() {\r                @Override\r                public void onClick(View view) {\r                    startActivity(new Intent(EditVendorRegisterFormActivity.this, VendorProfileScreenActivity.class));\r                    finish();\r                    dialog.dismiss();\r\r                }\r            });\r            Objects.requireNonNull(dialog.getWindow()).setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r            dialog.show();\r\r        } catch (WindowManager.BadTokenException e) {\r            e.printStackTrace();\r        }\r\r\r\r\r    }\r\r}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/petfolio/infinituss/vendor/EditVendorRegisterFormActivity.java b/app/src/main/java/com/petfolio/infinituss/vendor/EditVendorRegisterFormActivity.java
--- a/app/src/main/java/com/petfolio/infinituss/vendor/EditVendorRegisterFormActivity.java	(revision f1734ca40ba206b2d8b7b0e5c5470841991c7822)
+++ b/app/src/main/java/com/petfolio/infinituss/vendor/EditVendorRegisterFormActivity.java	(date 1632498661101)
@@ -1,5 +1,7 @@
 package com.petfolio.infinituss.vendor;
 
+import static android.os.Environment.DIRECTORY_DOCUMENTS;
+
 import android.Manifest;
 import android.annotation.SuppressLint;
 import android.app.Activity;
@@ -19,9 +21,11 @@
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
+import android.os.Environment;
 import android.os.Handler;
 import android.provider.MediaStore;
 import android.provider.OpenableColumns;
+import android.text.TextUtils;
 import android.util.Log;
 import android.view.View;
 import android.view.WindowManager;
@@ -46,6 +50,7 @@
 import com.google.android.gms.common.api.GoogleApiClient;
 import com.google.android.gms.common.api.PendingResult;
 import com.google.android.gms.common.api.Status;
+import com.google.android.gms.common.util.IOUtils;
 import com.google.android.gms.location.LocationListener;
 import com.google.android.gms.location.LocationRequest;
 import com.google.android.gms.location.LocationServices;
@@ -81,12 +86,13 @@
 import com.petfolio.infinituss.sessionmanager.SessionManager;
 import com.petfolio.infinituss.utils.ConnectionDetector;
 import com.petfolio.infinituss.utils.RestUtils;
-import com.theartofdev.edmodo.cropper.CropImage;
+import com.canhub.cropper.CropImage;
 import com.wang.avi.AVLoadingIndicatorView;
 
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.OutputStream;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
@@ -1037,7 +1043,7 @@
             if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {
                 CropImage.ActivityResult result = CropImage.getActivityResult(data);
                 if (resultCode == RESULT_OK) {
-                    Uri resultUri = result.getUri();
+                    Uri resultUri = result.getUriContent();
 
                     if (resultUri != null) {
 
@@ -1047,7 +1053,7 @@
 
                         Log.w("filename", " " + filename);
 
-                        String filePath = FileUtil.getPath(EditVendorRegisterFormActivity.this, resultUri);
+                        String filePath = getFilePathFromURI(EditVendorRegisterFormActivity.this, resultUri);
 
                         assert filePath != null;
 
@@ -2101,29 +2107,52 @@
                 .show();
     }
 
-    public String getFileName(Uri uri) {
-        String result = null;
-        if (Objects.requireNonNull(uri.getScheme()).equals("content")) {
-            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {
-                if (cursor != null && cursor.moveToFirst()) {
-                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));
-                }
+    public static String getFilePathFromURI(Context context, Uri contentUri) {
+        //copy file and send new file path
+        String fileName = getFileName(contentUri);
+        if (!TextUtils.isEmpty(fileName)) {
+
+            String path = Environment.getExternalStoragePublicDirectory(DIRECTORY_DOCUMENTS).getPath() + "/" + "MyFirstApp/";
+            // Create the parent path
+            File dir = new File(path);
+            if (!dir.exists()) {
+                dir.mkdirs();
             }
+
+            String fullName = path + "mylog";
+            File copyFile = new File (fullName);
+
+            /* File copyFile = new File(Environment.DIRECTORY_DOWNLOADS + File.separator + fileName);*/
+            copy(context, contentUri, copyFile);
+            return copyFile.getAbsolutePath();
         }
-        if (result == null) {
-            result = uri.getPath();
-            int cut = 0;
-            if (result != null) {
-                cut = result.lastIndexOf('/');
-            }
-            if (cut != -1) {
-                if (result != null) {
-                    result = result.substring(cut + 1);
-                }
-            }
+        return null;
+    }
+
+    public static String getFileName(Uri uri) {
+        if (uri == null) return null;
+        String fileName = null;
+        String path = uri.getPath();
+        int cut = path.lastIndexOf('/');
+        if (cut != -1) {
+            fileName = path.substring(cut + 1);
+        }
+        return fileName;
+    }
+
+    public static void copy(Context context, Uri srcUri, File dstFile) {
+        try {
+            InputStream inputStream = context.getContentResolver().openInputStream(srcUri);
+            if (inputStream == null) return;
+            OutputStream outputStream = new FileOutputStream(dstFile);
+            IOUtils.copyStream(inputStream, outputStream);
+            inputStream.close();
+            outputStream.close();
+        } catch (IOException e) {
+            e.printStackTrace();
         }
-        return result;
     }
+
 
 
 
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    package=\"com.petfolio.infinituss\">\r\n\r\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r\n\r\n    <uses-feature android:name=\"android.hardware.location.gps\" />\r\n\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n    <uses-permission android:name=\"android.permission.VIBRATE\" />\r\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\r\n    <uses-permission\r\n        android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"\r\n        tools:ignore=\"ScopedStorage\" />\r\n    <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\" />\r\n    <uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\r\n    <uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\r\n    <uses-permission android:name=\"android.permission.CAMERA\" />\r\n    <uses-permission android:name=\"android.permission.MODIFY_AUDIO_SETTINGS\" />\r\n    <uses-permission android:name=\"android.permission.BLUETOOTH\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\r\n<!--\r\n    <uses-permission android:name=\"android.permission.RECEIVE_SMS\" />\r\n-->\r\n    <uses-permission android:name=\"android.permission.CALL_PHONE\" />\r\n    <uses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\" />\r\n\r\n    <supports-screens\r\n        android:anyDensity=\"true\"\r\n        android:largeScreens=\"true\"\r\n        android:smallScreens=\"true\"\r\n        android:xlargeScreens=\"true\" />\r\n\r\n    <application\r\n        android:name=\".appUtils.ApplicationData\"\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@drawable/app_logo_new\"\r\n        android:label=\"@string/app_name\"\r\n        android:requestLegacyExternalStorage=\"true\"\r\n        android:roundIcon=\"@drawable/app_logo_new\"\r\n        android:screenOrientation=\"portrait\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/AppTheme\"\r\n        android:usesCleartextTraffic=\"true\"\r\n        tools:ignore=\"AllowBackup,UnusedAttribute\"\r\n        tools:replace=\"android:allowBackup,icon,theme,label,name\">\r\n        <meta-data\r\n            android:name=\"com.google.android.geo.API_KEY\"\r\n            android:value=\"@string/google_maps_key\" />\r\n\r\n\r\n        <activity android:name=\"com.theartofdev.edmodo.cropper.CropImageActivity\"\r\n            android:theme=\"@style/Base.Theme.AppCompat\"/>\r\n\r\n        <activity\r\n            android:name=\".activity.SplashActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/SplashTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n        <activity\r\n            android:name=\".activity.SliderAfterSplashActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.ShippingAddressEditActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.MedicalHistoryActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.ShippingAddressCreateActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.ShippingAddressAddActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.ShippingAddressActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.myaddresses.MyAddressesListActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.myaddresses.AddNewShippingAddressActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.myaddresses.MyAddressEditActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.ProductDetailActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n\r\n        <activity android:name=\".petlover.PetLoverDoctorChoosePaymentMethodActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n        <activity android:name=\".petlover.PetLoverServiceChoosePaymentMethodActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n\r\n\r\n        <activity\r\n            android:name=\".petlover.DoctorClinicDetailsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".vendor.VendorUpdateOrderStatusActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".vendor.EditManageProdcutsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.PetOtherInformationsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.PetEditOtherInformationsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.ChoosePetTypeActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.ChooseBreedTypeActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.BasicPetDetailsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.BasicPetDetailsNewActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.AddNewPetActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.ConsultationActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.ConsultationIssuesActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.VerifyOtpActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.SignUpActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.LoginActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.ChooseUserTypeActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.VerifyEmailOtpActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" /> <!-- Pet Lover -->\r\n        <activity\r\n            android:name=\".petlover.AddYourPetActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.RegisterYourPetActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.PetLoverDashboardActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/NewAppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.BookAppointmentActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.PetAppointment_Doctor_Date_Time_Activity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.PetMyappointmentsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.PetWalkinappointmentsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.PetLoverEditProfileActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.PetLoverProfileScreenActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.PetLoverEditProfileImageActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.EditYourPetProfileInfoActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.AddYourPetOldUserActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.AddYourPetImageOlduserActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.EditYourPetImageActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.FiltersActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.PetMyOrdrersActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.PetMyOrdrersNewActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.PetCartActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.ProductDetailsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.ListOfProductsSeeMoreActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.Service_Details_Activity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.ServiceBookAppointmentActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.SelectedServiceActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.PetServiceAppointment_Doctor_Date_Time_Activity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.SelectYourPetActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.PetVerifyEmailOtpActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.VideoCallPetLoverActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.location.ManageAddressActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.location.PickUpLocationAddNewAddressActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.location.EditShippingAddresssActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.location.PickUpLocationShippingAddressEditActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.location.PickUpLocationAllowActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.location.AddMyAddressShippingActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.location.PickUpLocationDenyActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.location.AddMyAddressActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.location.PlacesSearchActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.location.PickUpLocationActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.location.AddMyAddressOldUserActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.location.EditMyAddressActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.location.PickUpLocationEditActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.location.SetLocationDoctorNewActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.location.SetLocationDoctorOldActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.location.SetLocationSPNewActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.location.SetLocationSPOldActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.PetAppointmentDetailsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.PetWalkinAppointmentDetailsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity android:name=\".activity.SliderActivity\" />\r\n        <activity\r\n            android:name=\".petlover.PetCompletedAppointmentDetailsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.PetMissedAppointmentDetailsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.PetNewAppointmentDetailsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.PetSPNewAppointmentDetailsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.ProductFiltersActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n\r\n        <activity\r\n            android:name=\".petlover.MyCouponsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n\r\n        <!-- Doctor -->\r\n        <activity\r\n            android:name=\".doctor.DoctorBusinessInfoActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.EditDoctorBusinessInfoActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.DoctorMyCalendarNewUserActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.DoctorMyCalendarTimeActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.Doctor_Holiday_Activity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.DoctorMyCalendarActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.DoctorDashboardActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.DoctorVerifyEmailOtpActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.PrescriptionActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.WalkinPrescriptionActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.WalkinPrescriptionDetailsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.DoctorWalkinPrescriptionDetailsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.DoctorEditProfileActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.DoctorProfileScreenActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.EditDoctorProfileImageActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.DoctorPrescriptionDetailsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.PrescriptionDetailsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.VideoCallDoctorActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.DoctorAppointmentDetailsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.DoctorWalkinAppointmentDetailsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.DoctorOrderDetailsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.ManageAddressDoctorActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n\r\n        <!-- Service Provider -->\r\n        <activity\r\n            android:name=\".serviceprovider.ServiceProviderRegisterFormActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".serviceprovider.SPVerifyEmailOtpActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".serviceprovider.SPMyCalendarNewUserActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".serviceprovider.SPEditProfileActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".serviceprovider.SPProfileScreenActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".serviceprovider.ServiceProviderEditFormActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".serviceprovider.ServiceProviderDashboardActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".serviceprovider.SPMyCalendarActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".serviceprovider.SP_Holiday_Activity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".serviceprovider.SPMyCalendarTimeActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".serviceprovider.SPManageServiceActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".serviceprovider.SPSettingsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".serviceprovider.SPFiltersActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".serviceprovider.SPAppointmentDetailsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".serviceprovider.SPEditProfileImageActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".serviceprovider.ShippingAddressSPActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".serviceprovider.shop.SearchSPActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".serviceprovider.shop.SPCancelOrderActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".serviceprovider.shop.SPCartActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".serviceprovider.shop.SPListOfProductsSeeMoreActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".serviceprovider.shop.SPProductDetailsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".serviceprovider.shop.SPShopTodayDealsSeeMoreActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".serviceprovider.shop.SPTrackOrderActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".serviceprovider.shop.SPOrderDetailsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".serviceprovider.shop.SPMyOrdrersActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".serviceprovider.shop.SPProductsFavActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n\r\n        <activity\r\n            android:name=\".serviceprovider.ServiceAppointment_Doctor_Date_Time_Activity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n\r\n\r\n        <!-- Vendor -->\r\n        <activity\r\n            android:name=\".vendor.VendorRegisterFormActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".vendor.VendorDashboardActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".vendor.VendorAddProductsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".vendor.VendorCreateProductsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.NotificationActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.SoSActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.EditSoSActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.PetShopTodayDealsSeeMoreActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.DoctorMissedAppointmentDetailsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.DoctorCompletedAppointmentDetailsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.DoctorNewAppointmentDetailsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".vendor.VendorEditProfileActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".vendor.VendorProfileScreenActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".vendor.EditVendorProfileImageActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".vendor.EditVendorRegisterFormActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".vendor.VendorVerifyEmailOtpActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.PetVendorOrderDetailsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.PetLoverVendorOrderDetailsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.PetVendorTrackOrderActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.TrackOrderActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.PetVendorCancelOrderActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.PetReturnOrderActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".vendor.VendorOrderDetailsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".vendor.VendorTrackOrderActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".vendor.VendorOrderDetailsNewActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".vendor.ManageProductsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.SearchActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.shop.DoctorShopTodayDealsSeeMoreActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.shop.DoctorListOfProductsSeeMoreActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.shop.DoctorProductDetailsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.shop.SearchDoctorActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.shop.DoctorCartActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.shop.DoctorTrackOrderActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.shop.DoctorCancelOrderActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.DoctorMyOrdrersActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.DoctorWalkinAppointmentsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.PetloverFavListActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.location.PickUpLocationAddNewAddressSPActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.location.AddMyAddressShippingSPActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.location.PickUpLocationDoctorActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.location.AddMyAddressDoctorActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.location.EditMyAddressDoctorActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.location.PickUpLocationEditDoctorActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".activity.location.ShippingAddressAddSPActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.DoctorProductsFavActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".doctor.DoctorPaymentDetailsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.PetloverPaymentDetailsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".serviceprovider.PickUpLocationEditSPActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/SplashTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".serviceprovider.EditMyAddressSPActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/SplashTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".serviceprovider.AddMyAddressSPActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/SplashTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".serviceprovider.PickUpLocationSPActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/SplashTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".serviceprovider.ManageAddressSPActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/SplashTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".petlover.PetloverPetDetailsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n\r\n       <!-- <receiver\r\n            android:name=\".receiver.SmsBroadcastListener\"\r\n            android:permission=\"android.permission.BROADCAST_SMS\">\r\n            <intent-filter>\r\n                <action android:name=\"android.provider.Telephony.SMS_RECEIVED\" />\r\n            </intent-filter>\r\n        </receiver>-->\r\n\r\n        <service\r\n            android:name=\".fcm.MyFirebaseMessagingService\"\r\n            android:directBootAware=\"true\"\r\n            android:exported=\"false\">\r\n            <intent-filter>\r\n                <action android:name=\"com.google.firebase.MESSAGING_EVENT\" />\r\n            </intent-filter>\r\n        </service>\r\n\r\n        <meta-data\r\n            android:name=\"com.google.firebase.messaging.default_notification_color\"\r\n            android:resource=\"@color/new_gree_color\" />\r\n        <meta-data\r\n            android:name=\"com.google.firebase.messaging.default_notification_icon\"\r\n            android:resource=\"@drawable/app_logo\" />\r\n\r\n        <provider\r\n            android:name=\"androidx.core.content.FileProvider\"\r\n            android:authorities=\"${applicationId}.provider\"\r\n            android:exported=\"false\"\r\n            android:grantUriPermissions=\"true\">\r\n            <meta-data\r\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\r\n                android:resource=\"@xml/provider_paths\" />\r\n        </provider> <!-- Add your API key here -->\r\n        <meta-data\r\n            android:name=\"com.razorpay.ApiKey\"\r\n            android:value=\"rzp_test_zioohqmxDjJJtd\" />\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
--- a/app/src/main/AndroidManifest.xml	(revision f1734ca40ba206b2d8b7b0e5c5470841991c7822)
+++ b/app/src/main/AndroidManifest.xml	(date 1632495296663)
@@ -53,8 +53,14 @@
             android:value="@string/google_maps_key" />
 
 
+<!--
         <activity android:name="com.theartofdev.edmodo.cropper.CropImageActivity"
             android:theme="@style/Base.Theme.AppCompat"/>
+-->
+
+        <activity android:name="com.canhub.cropper.CropImageActivity"
+            android:theme="@style/Base.Theme.AppCompat"/> <!-- optional (needed if default theme has no action bar) -->
+
 
         <activity
             android:name=".activity.SplashActivity"
Index: app/src/main/java/com/petfolio/infinituss/serviceprovider/ServiceProviderEditFormActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.petfolio.infinituss.serviceprovider;\r\rimport android.Manifest;\rimport android.annotation.SuppressLint;\rimport android.app.Activity;\rimport android.app.Dialog;\rimport android.content.Context;\rimport android.content.Intent;\rimport android.content.IntentSender;\rimport android.content.pm.PackageManager;\rimport android.database.Cursor;\rimport android.graphics.Bitmap;\rimport android.graphics.Color;\rimport android.graphics.drawable.ColorDrawable;\rimport android.location.Address;\rimport android.location.Geocoder;\rimport android.location.Location;\rimport android.location.LocationManager;\rimport android.net.Uri;\rimport android.os.Build;\rimport android.os.Bundle;\rimport android.os.Handler;\rimport android.provider.MediaStore;\rimport android.provider.OpenableColumns;\rimport android.util.Log;\rimport android.view.View;\rimport android.view.WindowManager;\rimport android.widget.AdapterView;\rimport android.widget.ArrayAdapter;\rimport android.widget.Button;\rimport android.widget.EditText;\rimport android.widget.ImageView;\rimport android.widget.RelativeLayout;\rimport android.widget.Spinner;\rimport android.widget.TextView;\rimport android.widget.Toast;\r\rimport androidx.annotation.NonNull;\rimport androidx.annotation.Nullable;\rimport androidx.appcompat.app.AlertDialog;\rimport androidx.appcompat.app.AppCompatActivity;\rimport androidx.cardview.widget.CardView;\rimport androidx.core.app.ActivityCompat;\rimport androidx.core.content.ContextCompat;\rimport androidx.recyclerview.widget.DefaultItemAnimator;\rimport androidx.recyclerview.widget.GridLayoutManager;\rimport androidx.recyclerview.widget.LinearLayoutManager;\rimport androidx.recyclerview.widget.RecyclerView;\r\rimport com.google.android.gms.common.ConnectionResult;\rimport com.google.android.gms.common.api.GoogleApiClient;\rimport com.google.android.gms.common.api.PendingResult;\rimport com.google.android.gms.common.api.Status;\rimport com.google.android.gms.location.LocationListener;\rimport com.google.android.gms.location.LocationRequest;\rimport com.google.android.gms.location.LocationServices;\rimport com.google.android.gms.location.LocationSettingsRequest;\rimport com.google.android.gms.location.LocationSettingsResult;\rimport com.google.android.gms.location.LocationSettingsStatusCodes;\rimport com.google.android.gms.maps.GoogleMap;\rimport com.google.android.gms.maps.OnMapReadyCallback;\rimport com.google.android.gms.maps.SupportMapFragment;\rimport com.google.gson.Gson;\rimport com.petfolio.infinituss.R;\rimport com.petfolio.infinituss.activity.location.SetLocationSPOldActivity;\rimport com.petfolio.infinituss.adapter.AddMoreServiceAdapter;\rimport com.petfolio.infinituss.adapter.AddMoreSpecialzationAdapter;\rimport com.petfolio.infinituss.adapter.EditCertPdfAdapter;\rimport com.petfolio.infinituss.adapter.EditGovtIdPdfAdapter;\rimport com.petfolio.infinituss.adapter.EditPhotoIDPdfAdapter;\rimport com.petfolio.infinituss.adapter.EditServiceImageListAdapter;\rimport com.petfolio.infinituss.adapter.SPServiceListEditAdapter;\rimport com.petfolio.infinituss.adapter.SPSpecialzationListEditAdapter;\rimport com.petfolio.infinituss.api.APIClient;\rimport com.petfolio.infinituss.api.RestApiInterface;\rimport com.petfolio.infinituss.appUtils.FileUtil;\rimport com.petfolio.infinituss.appUtils.NumericKeyBoardTransformationMethod;\rimport com.petfolio.infinituss.serviceprovider.ServiceProviderEditFormActivity;\rimport com.petfolio.infinituss.serviceprovider.ServiceProviderEditFormActivity;\rimport com.petfolio.infinituss.serviceprovider.ServiceProviderEditFormActivity;\rimport com.petfolio.infinituss.doctor.DoctorProfileScreenActivity;\rimport com.petfolio.infinituss.serviceprovider.ServiceProviderEditFormActivity;\rimport com.petfolio.infinituss.interfaces.AddMoreServiceRemoveListener;\rimport com.petfolio.infinituss.interfaces.AddMoreSpecialzationRemoveListener;\rimport com.petfolio.infinituss.interfaces.SPServiceCheckedListener;\rimport com.petfolio.infinituss.interfaces.SPSpecialzationChckedListener;\rimport com.petfolio.infinituss.requestpojo.DocBusInfoUploadRequest;\rimport com.petfolio.infinituss.requestpojo.SPDetailsByUserIdRequest;\rimport com.petfolio.infinituss.requestpojo.ServiceProviderRegisterFormCreateRequest;\rimport com.petfolio.infinituss.responsepojo.AddSpecTypeListModel;\rimport com.petfolio.infinituss.responsepojo.FileUploadResponse;\rimport com.petfolio.infinituss.responsepojo.SPServiceListResponse;\rimport com.petfolio.infinituss.responsepojo.ServiceProviderRegisterFormCreateResponse;\rimport com.petfolio.infinituss.service.GPSTracker;\rimport com.petfolio.infinituss.sessionmanager.SessionManager;\rimport com.petfolio.infinituss.utils.ConnectionDetector;\rimport com.petfolio.infinituss.utils.RestUtils;\rimport com.theartofdev.edmodo.cropper.CropImage;\rimport com.wang.avi.AVLoadingIndicatorView;\r\rimport java.io.File;\rimport java.io.FileOutputStream;\rimport java.io.IOException;\rimport java.io.OutputStream;\rimport java.text.SimpleDateFormat;\rimport java.util.ArrayList;\rimport java.util.Date;\rimport java.util.HashMap;\rimport java.util.List;\rimport java.util.Locale;\rimport java.util.Objects;\r\rimport butterknife.BindView;\rimport butterknife.ButterKnife;\rimport cn.pedant.SweetAlert.SweetAlertDialog;\rimport es.dmoral.toasty.Toasty;\rimport okhttp3.MediaType;\rimport okhttp3.MultipartBody;\rimport okhttp3.RequestBody;\rimport retrofit2.Call;\rimport retrofit2.Callback;\rimport retrofit2.Response;\r\rpublic class ServiceProviderEditFormActivity extends AppCompatActivity implements View.OnClickListener, SPServiceCheckedListener, AddMoreServiceRemoveListener, SPSpecialzationChckedListener, AddMoreSpecialzationRemoveListener,\r        OnMapReadyCallback, GoogleApiClient.ConnectionCallbacks,\r        GoogleApiClient.OnConnectionFailedListener, LocationListener {\r\r    private final String TAG = \"ServiceProviderEditFormActivity\";\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edt_business_name)\r    EditText edt_business_name;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edt_aboutsp)\r    EditText edt_aboutsp;\r\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rl_service_gallery_image)\r    RelativeLayout rl_service_gallery_image;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rl_certificates)\r    RelativeLayout rl_certificates;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rl_govtid)\r    RelativeLayout rl_govtid;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rl_photoid)\r    RelativeLayout rl_photoid;\r\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.buttonsubmit)\r    Button buttonsubmit;\r\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_sp_servicelist)\r    RecyclerView rcylr_sp_servicelist;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_sp_servicestaticlist)\r    RecyclerView rcylr_sp_servicestaticlist;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edt_addmore_service)\r    EditText edt_addmore_service;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.btn_add_service)\r    Button btn_add_service;\r\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_sp_specializationlist)\r    RecyclerView rcylr_sp_specializationlist;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_sp_specializationstaticlist)\r    RecyclerView rcylr_sp_specializationstaticlist;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edt_specialization_ifany)\r    EditText edt_specialization_ifany;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.btn_add_specialization)\r    Button btn_add_specialization;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.txt_no_records_specialization)\r    TextView txt_no_records_specialization;\r\r\r\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_choosen_service_img)\r    RecyclerView rcylr_choosen_service_img;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_choosen_certificate_img)\r    RecyclerView recylerView_choosen_certificate_images;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_choosen_govtid_images)\r    RecyclerView recylerView_choosen_govtid_images;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_choosen_photoid_img)\r    RecyclerView recylerView_choosen_photo_id_images;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.cdvw_certificate)\r    CardView material_cardview_certificate;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.img_bck)\r    ImageView img_bck;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.avi_indicator)\r    AVLoadingIndicatorView avi_indicator;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.txt_no_records)\r    TextView txt_no_records;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.txt_address)\r    TextView txt_address;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.txt_location_change)\r    TextView txt_location_change;\r\r\r\r    String business_name;\r    ArrayList<FileUploadResponse> certificatePicResponse = new ArrayList<>();\r    private final List<DocBusInfoUploadRequest.GovtIdPicBean> govtIdPicBeans = new ArrayList<>();\r\r    private final List<DocBusInfoUploadRequest.PhotoIdPicBean> photoIdPicBeans = new ArrayList<>();\r\r    ArrayList<AddSpecTypeListModel> addSpecTypeListModels = new ArrayList<>();\r\r\r\r\r    SPServiceListEditAdapter spServiceListEditAdapter;\r    SPSpecialzationListEditAdapter spSpecialzationListEditAdapter;\r    AddMoreServiceAdapter addMoreServiceAdapter;\r    AddMoreSpecialzationAdapter addMoreSpecialzationAdapter;\r\r    EditServiceImageListAdapter editServiceImageListAdapter;\r\r    EditCertPdfAdapter editCertPdfAdapter;\r\r\r    EditGovtIdPdfAdapter editGovtIdPdfAdapter;\r\r    EditPhotoIDPdfAdapter editPhotoIDPdfAdapter;\r\r\r    MultipartBody.Part filePart,certPart,govIdPart,photIDPart;\r\r    private static final int REQUEST_CLINIC_CAMERA_PERMISSION_CODE = 785 ;\r\r    private static final int REQUEST_READ_CLINIC_PDF_PERMISSION = 787 ;\r\r    private static final int REQUEST_READ_GOVT_ID_PDF_PERMISSION = 788;\r\r    private static final int REQUEST_READ_PHOTO_ID_PDF_PERMISSION = 789;\r\r    private static final int REQUEST_READ_CLINIC_PIC_PERMISSION = 786;\r\r    private static final int REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE = 790;\r\r    private static final int REQUEST_READ_CERTIFICATE_PIC_PERMISSION = 791;\r\r    private static final int REQUEST_GOVTID_CAMERA_PERMISSION_CODE = 792;\r\r    private static final int REQUEST_READ_GOVTID_PIC_PERMISSION = 793;\r\r    private static final int REQUEST_PHOTOID_CAMERA_PERMISSION_CODE = 794;\r\r    private static final int REQUEST_READ_PHOTOID_PIC_PERMISSION = 795;\r\r\r\r\r    private static final int SELECT_CLINIC_CAMERA = 1000 ;\r\r    private static final int SELECT_CLINIC_PICTURE = 1001 ;\r\r    private static final int SELECT_CERT_PDF = 1002;\r\r    private static final int SELECT_GOVTID_PDF = 1003;\r\r    private static final int SELECT_PHOTOID_PDF = 1004;\r\r    private static final int SELECT_CERTIFICATE_CAMERA = 1005;\r\r    private static final int SELECT_CERTIFICATE_PICTURE = 1006;\r\r    private static final int SELECT_GOVTID_CAMERA = 1007;\r\r    private static final int SELECT_GOVTID_PICTURE = 1008;\r\r    private static final int SELECT_PHOTOID_CAMERA = 1009;\r\r    private static final int SELECT_PHOTOID_PICTURE = 1010;\r\r\r    String user_id,currentDateandTime;\r\r\r\r    private String username;\r    private String useremail;\r    private String userphone;\r    private String govtIdPic;\r    private String photoIdPic;\r    Dialog alertDialog;\r\r    private GoogleApiClient googleApiClient;\r    Location mLastLocation;\r    public static final int MY_PERMISSIONS_REQUEST_LOCATION = 99;\r    private SupportMapFragment mapFragment;\r    private double latitude;\r    private double longitude;\r    private static final int REQUEST_CHECK_SETTINGS_GPS = 0x1;\r    private String AddressLine;\r    private List<ServiceProviderRegisterFormCreateResponse.DataBean.BusServiceListBean> spServiceListEdit;\r    private List<ServiceProviderRegisterFormCreateResponse.DataBean.BusSpecListBean> spSpecialzationListEdit;\r    private List<ServiceProviderRegisterFormCreateResponse.DataBean.BusCertifBean> bus_certif_list_edit;\r    List<ServiceProviderRegisterFormCreateRequest.BusServiceListBean> bus_service_list = new ArrayList<>();\r    private List<SPServiceListResponse.DataBean.ServiceListBean> spServiceList;\r    private List<SPServiceListResponse.DataBean.SpecializationBean> spSpecialzationList;\r    List<ServiceProviderRegisterFormCreateRequest.BusServiceListBean> bus_service_addmore_list = new ArrayList<>();\r    List<ServiceProviderRegisterFormCreateRequest.BusSpecListBean> bus_specialzation_addmore_list = new ArrayList<>();\r    List<ServiceProviderRegisterFormCreateRequest.BusSpecListBean> bus_spec_list = new ArrayList<>();\r    List<ServiceProviderRegisterFormCreateRequest.BusCertifBean> bus_certif_list = new ArrayList<>();\r\r    List<ServiceProviderRegisterFormCreateRequest.BusServiceGallBean> bus_service_gall_list = new ArrayList<>();\r    private List<ServiceProviderRegisterFormCreateResponse.DataBean.BusServiceGallBean> bus_service_gall_list_edit;\r\r    private String _id;\r\r    private List<SPServiceListResponse.DataBean.TimeBean> spTimeList;\r    private String strTimeslot;\r\r\r\r    private String latlng;\r    private String CityName;\r    private boolean isSetAddress = false;\r    private Dialog dialog;\r\r\r    /*Crop Functonality */\r\r    private boolean isAddClinicPic = false;\r    private boolean isAddCertfProof = false;\r    private boolean isAddGovtIdproof = false;\r    private boolean isAddPhotoIDproof = false;\r\r\r    @SuppressLint(\"LongLogTag\")\r    @Override\r    protected void onCreate(Bundle savedInstanceState) {\r        super.onCreate(savedInstanceState);\r        setContentView(R.layout.activity_service_provider_edit_form);\r        ButterKnife.bind(this);\r        SessionManager session = new SessionManager(getApplicationContext());\r        HashMap<String, String> user = session.getProfileDetails();\r        username = user.get(SessionManager.KEY_FIRST_NAME);\r        user_id = user.get(SessionManager.KEY_ID);\r        useremail = user.get(SessionManager.KEY_EMAIL_ID);\r        userphone = user.get(SessionManager.KEY_MOBILE);\r\r        Log.w(TAG,\"username : \"+username+\" user_id : \"+user_id);\r\r\r\r\r\r        avi_indicator.setVisibility(View.GONE);\r        rcylr_sp_servicestaticlist.setVisibility(View.GONE);\r\r\r        Bundle extras = getIntent().getExtras();\r        if (extras != null) {\r            latlng = String.valueOf(getIntent().getSerializableExtra(\"latlng\"));\r            Log.w(TAG,\"latlng-->\"+ latlng);\r            if(latlng != null && !latlng.equalsIgnoreCase(\"null\")){\r                String newString = latlng.replace(\"lat/lng:\", \"\");\r                Log.w(TAG,\"latlng==\"+newString);\r\r                String latlngs = newString.trim().replaceAll(\"\\\\(\", \"\").replaceAll(\"\\\\)\",\"\").trim();\r                Log.w(TAG,\"latlngs==\"+latlngs);\r                String[] separated = latlngs.split(\",\");\r                String lat = separated[0];\r                String lon = separated[1];\r\r                latitude = Double.parseDouble(lat);\r                longitude = Double.parseDouble(lon);\r            }\r\r\r\r            CityName = extras.getString(\"cityname\");\r            AddressLine = extras.getString(\"address\");\r            String postalCode = extras.getString(\"PostalCode\");\r\r\r            if(AddressLine != null) {\r                txt_address.setText(AddressLine);\r                isSetAddress = true;\r            }\r\r\r\r\r\r        }\r\r        if (mapFragment == null) {\r            mapFragment = SupportMapFragment.newInstance();\r            mapFragment.getMapAsync(this);\r        }\r        googleApiConnected();\r        LocationRequest locationRequest = LocationRequest.create();\r        locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);\r        locationRequest.setInterval(1000); // 10 seconds\r        locationRequest.setFastestInterval(1000); // 5 seconds\r\r        if(user_id != null){\r            if (new ConnectionDetector(getApplicationContext()).isNetworkAvailable(getApplicationContext())) {\r                spDetailsReponseByUserIdCall();\r            }\r        }\r\r\r\r        buttonsubmit.setOnClickListener(this);\r\r\r        rl_service_gallery_image.setOnClickListener(this);\r\r        rl_certificates.setOnClickListener(this);\r\r        rl_govtid.setOnClickListener(this);\r\r        rl_photoid.setOnClickListener(this);\r        img_bck.setOnClickListener(this);\r\r        btn_add_service.setOnClickListener(this);\r        btn_add_specialization.setOnClickListener(this);\r        txt_location_change.setOnClickListener(this);\r\r\r\r\r\r\r\r        /* ************ Adding service gallery Images ************** */\r\r        rcylr_choosen_service_img.setHasFixedSize(true);\r\r        rcylr_choosen_service_img.setNestedScrollingEnabled(false);\r\r        LinearLayoutManager layoutManager2 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);\r\r        rcylr_choosen_service_img.setLayoutManager(layoutManager2);\r\r\r        /* ************ Adding Certificate ************** */\r\r        recylerView_choosen_certificate_images.setHasFixedSize(true);\r\r        recylerView_choosen_certificate_images.setNestedScrollingEnabled(false);\r\r        LinearLayoutManager layoutManager3 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);\r\r        recylerView_choosen_certificate_images.setLayoutManager(layoutManager3);\r\r\r        /* ************ Adding GovtID ************** */\r\r        recylerView_choosen_govtid_images.setHasFixedSize(true);\r\r        recylerView_choosen_govtid_images.setNestedScrollingEnabled(false);\r\r        LinearLayoutManager layoutManager4 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);\r\r        recylerView_choosen_govtid_images.setLayoutManager(layoutManager4);\r\r\r\r        /* ************ Adding PhotoID ************** */\r\r        recylerView_choosen_photo_id_images.setHasFixedSize(true);\r\r        recylerView_choosen_photo_id_images.setNestedScrollingEnabled(false);\r\r        LinearLayoutManager layoutManager5 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);\r\r        recylerView_choosen_photo_id_images.setLayoutManager(layoutManager5);\r\r\r        /* *************** Get Current Date and Time ************************ */\r\r        SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r         currentDateandTime = sdf.format(new Date());\r\r\r\r\r    }\r\r\r\r\r    @SuppressLint({\"LongLogTag\", \"LogNotTimber\"})\r    public void SPServiceListResponseCall(){\r\r        avi_indicator.setVisibility(View.VISIBLE);\r        avi_indicator.smoothToShow();\r        //Creating an object of our api interface\r        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);\r        Call<SPServiceListResponse> call = apiInterface.SPServiceListResponseCall(RestUtils.getContentType());\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\r        call.enqueue(new Callback<SPServiceListResponse>() {\r            @SuppressLint({\"SetTextI18n\", \"LogNotTimber\"})\r            @Override\r            public void onResponse(@NonNull Call<SPServiceListResponse> call, @NonNull Response<SPServiceListResponse> response) {\r                avi_indicator.smoothToHide();\r\r\r                if (response.body() != null) {\r                    if(200 == response.body().getCode()){\r                        Log.w(TAG,\"SPServiceListResponse\" + new Gson().toJson(response.body()));\r\r                        if(response.body().getData() != null) {\r                            if(response.body().getData().getService_list() != null) {\r                                spServiceList = response.body().getData().getService_list();\r                            }\r\r                            Log.w(TAG,\"SPServiceListResponse\" + new Gson().toJson(response.body()));\r\r                            if(response.body().getData().getSpecialization() != null) {\r                                spSpecialzationList = response.body().getData().getSpecialization();\r                            }\r\r                            if(response.body().getData().getTime() != null) {\r                                spTimeList = response.body().getData().getTime();\r                            }\r\r                            if(spTimeList != null && spTimeList.size()>0) {\r                                for (int i = 0; i < spTimeList.size(); i++) {\r                                    strTimeslot = spTimeList.get(0).getTime();\r                                }\r                                if(bus_service_list != null) {\r                                    for (int j = 0; j < bus_service_list.size(); j++) {\r                                        bus_service_list.get(j).setTime_slots(strTimeslot);\r                                    }\r                                }\r\r\r                            }\r\r\r\r                           Log.w(TAG,\"bus_service_list : \"+new Gson().toJson(bus_service_list));\r\r                            Log.w(TAG,\"spSpecialzationListEdit : \"+new Gson().toJson(spSpecialzationListEdit));\r                            if(spSpecialzationListEdit != null && spSpecialzationList != null) {\r                                for (int i = 0; i < spSpecialzationListEdit.size(); i++) {\r                                    for (int j = 0; j < spSpecialzationList.size(); j++) {\r                                        if (spSpecialzationListEdit.get(i).getBus_spec_list().equalsIgnoreCase(spSpecialzationList.get(j).getSpecialization())) {\r                                            ServiceProviderRegisterFormCreateRequest.BusSpecListBean busSpecListBean = new ServiceProviderRegisterFormCreateRequest.BusSpecListBean();\r                                            busSpecListBean.setBus_spec_list(spSpecialzationList.get(j).getSpecialization());\r                                            bus_spec_list.add(busSpecListBean);\r                                        }\r                                    }\r\r\r                                }\r                            }\r\r                            Log.w(TAG,\"bus_spec_list : \"+new Gson().toJson(bus_spec_list));\r\r\r                        }\r\r                        if(spServiceListEdit != null && spServiceListEdit.size()>0 && spServiceList != null && spServiceList.size()>0){\r\r                            try{\r                                for(int i=0;i<spServiceListEdit.size();i++){\r                                    for(int j=0;j<spServiceList.size();j++) {\r                                        if (spServiceListEdit.get(i).getBus_service_list().equalsIgnoreCase(spServiceList.get(j).getService_list())) {\r                                            spServiceList.get(j).setChbxChecked(true);\r                                            spServiceList.get(j).setValueAdded(true);\r                                            spServiceList.get(j).setTime_slots(spServiceListEdit.get(i).getTime_slots());\r                                            spServiceList.get(j).setAmount(spServiceListEdit.get(i).getAmount());\r\r                                            ServiceProviderRegisterFormCreateRequest.BusServiceListBean busServiceListBean = new ServiceProviderRegisterFormCreateRequest.BusServiceListBean();\r                                            busServiceListBean.setBus_service_list(spServiceListEdit.get(j).getBus_service_list());\r                                            busServiceListBean.setTime_slots(spServiceListEdit.get(j).getTime_slots());\r                                            busServiceListBean.setAmount(spServiceListEdit.get(j).getAmount());\r                                            bus_service_list.add(busServiceListBean);\r\r\r                                        }\r                                    }\r                                }\r\r                            }catch (Exception e){\r\r                            }\r\r\r\r                        }\r\r\r\r\r\r                        Log.w(TAG,\"spServiceList : \"+new Gson().toJson(spServiceList));\r                        if(spServiceList != null && spServiceList.size()>0){\r                            rcylr_sp_servicelist.setVisibility(View.VISIBLE);\r                            txt_no_records.setVisibility(View.GONE);\r                            setSPServiceList(spServiceList,spServiceListEdit);\r                        }else{\r                            rcylr_sp_servicelist.setVisibility(View.GONE);\r                            txt_no_records.setVisibility(View.VISIBLE);\r                            txt_no_records.setText(\"No services found\");\r                        }\r\r                        Log.w(TAG,\"spSpecialzationList : \"+new Gson().toJson(spSpecialzationList));\r                        if(spSpecialzationList != null && spSpecialzationList.size()>0){\r                            rcylr_sp_specializationlist.setVisibility(View.VISIBLE);\r                            txt_no_records_specialization.setVisibility(View.GONE);\r                            setSPSpecialzationList(spSpecialzationList,spSpecialzationListEdit);\r                        }else{\r                            rcylr_sp_specializationlist.setVisibility(View.GONE);\r                            txt_no_records_specialization.setVisibility(View.VISIBLE);\r                            txt_no_records_specialization.setText(\"No specialzation found\");\r                        }\r\r                    }\r\r                }\r\r            }\r\r            @Override\r            public void onFailure(@NonNull Call<SPServiceListResponse> call, @NonNull  Throwable t) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"SPServiceListResponse flr\"+t.getMessage());\r            }\r        });\r\r    }\r\r\r\r\r\r\r    private void setSPServiceList(List<SPServiceListResponse.DataBean.ServiceListBean> spServiceList, List<ServiceProviderRegisterFormCreateResponse.DataBean.BusServiceListBean> spServiceListEdit) {\r        rcylr_sp_servicelist.setLayoutManager(new GridLayoutManager(this, 1));\r        rcylr_sp_servicelist.setItemAnimator(new DefaultItemAnimator());\r        spServiceListEditAdapter = new SPServiceListEditAdapter(getApplicationContext(), spServiceList,spServiceListEdit,this,strTimeslot);\r        rcylr_sp_servicelist.setAdapter(spServiceListEditAdapter);\r    }\r    private void setSPAddMoreServiceList(List<ServiceProviderRegisterFormCreateRequest.BusServiceListBean> bus_service_addmore_list) {\r        rcylr_sp_servicestaticlist.setLayoutManager(new GridLayoutManager(this, 2));\r        rcylr_sp_servicestaticlist.setItemAnimator(new DefaultItemAnimator());\r        addMoreServiceAdapter = new AddMoreServiceAdapter(getApplicationContext(), bus_service_addmore_list,this);\r        rcylr_sp_servicestaticlist.setAdapter(addMoreServiceAdapter);\r    }\r\r\r    private void setSPSpecialzationList(List<SPServiceListResponse.DataBean.SpecializationBean> spSpecialzationList, List<ServiceProviderRegisterFormCreateResponse.DataBean.BusSpecListBean> spSpecialzationListEdit) {\r        rcylr_sp_specializationlist.setLayoutManager(new GridLayoutManager(this, 2));\r        rcylr_sp_specializationlist.setItemAnimator(new DefaultItemAnimator());\r        spSpecialzationListEditAdapter = new SPSpecialzationListEditAdapter(getApplicationContext(), spSpecialzationList,spSpecialzationListEdit,this);\r        rcylr_sp_specializationlist.setAdapter(spSpecialzationListEditAdapter);\r    }\r\r\r    private void setSPAddMoreSpecialzationList(List<ServiceProviderRegisterFormCreateRequest.BusSpecListBean> bus_specialzation_addmore_list) {\r        rcylr_sp_specializationstaticlist.setLayoutManager(new GridLayoutManager(this, 2));\r        rcylr_sp_specializationstaticlist.setItemAnimator(new DefaultItemAnimator());\r        addMoreSpecialzationAdapter = new AddMoreSpecialzationAdapter(getApplicationContext(), bus_specialzation_addmore_list,this);\r        rcylr_sp_specializationstaticlist.setAdapter(addMoreSpecialzationAdapter);\r    }\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r    @SuppressLint(\"LongLogTag\")\r    @Override\r    public void onItemSPServiceCheck(int position, String servicevalue,boolean isChbxChecked) {\r        Log.w(TAG,\"onItemSPServiceCheck servicevalue : \"+servicevalue+\" isChbxChecked : \"+isChbxChecked);\r        showAddAmount(position);\r    }\r\r    @SuppressLint(\"LongLogTag\")\r    @Override\r    public void onItemSPServiceUnCheck(int position, String servicevalue,boolean isChbxChecked) {\r        Log.w(TAG,\"onItemSPServiceUnCheck servicevalue : \"+servicevalue+\" isChbxChecked : \"+isChbxChecked);\r        if(servicevalue != null){\r            if(bus_service_list != null){\r                for (int i = 0; i < bus_service_list.size(); i++)\r                    if (bus_service_list.get(i).getBus_service_list().equalsIgnoreCase(servicevalue)) {\r                        bus_service_list.remove(i);\r                        Log.w(TAG, \"after removing list if\" + new Gson().toJson(bus_service_list));\r\r                    }\r\r            }\r            if(spServiceList != null && spServiceList.size()>0){\r                spServiceList.get(position).setChbxChecked(false);\r                spServiceList.get(position).setValueAdded(false);\r                rcylr_sp_servicelist.post(new Runnable()\r                {\r                    @Override\r                    public void run() {\r                        spServiceListEditAdapter.notifyDataSetChanged();\r                    }\r                });\r\r            }\r        }\r        Log.w(TAG,\"onItemSPServiceUnCheck spServiceList : \"+new Gson().toJson(spServiceList));\r\r\r\r    }\r\r\r    @SuppressLint(\"LongLogTag\")\r    private void chooseServiceGalleryImage() {\r        Log.w(TAG,\"bus_service_gall_list.size() : \"+bus_service_gall_list.size()+\" conditions : \"+(bus_service_gall_list.size()>=3));\r\r        if(bus_service_gall_list!=null&&bus_service_gall_list.size()>=3){\r\r            Toasty.warning(getApplicationContext(), \"Sorry you can't Add more than 3\", Toast.LENGTH_SHORT).show();\r\r        }\r\r        else {\r           /* final CharSequence[] items = {\"Take Photo\", \"Choose from Library\", \"Cancel\"};\r            //AlertDialog.Builder alert=new AlertDialog.Builder(this);\r            AlertDialog.Builder builder = new AlertDialog.Builder(ServiceProviderEditFormActivity.this);\r            builder.setTitle(\"Choose option\");\r            builder.setItems(items, (dialog, item) -> {\r                if (items[item].equals(\"Take Photo\"))\r                {\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(ServiceProviderEditFormActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r                    }\r                    else\r                    {\r\r\r                        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\r                        startActivityForResult(intent, SELECT_CLINIC_CAMERA);\r                    }\r\r                }\r\r                else if (items[item].equals(\"Choose from Library\"))\r                {\r\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(ServiceProviderEditFormActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r                    }\r\r                    else{\r\r                        Intent intent = new Intent();\r                        intent.setType(\"image/*\");\r                        intent.setAction(Intent.ACTION_GET_CONTENT);\r                        startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_CLINIC_PICTURE);\r\r\r                    }\r                }\r\r                else if (items[item].equals(\"Cancel\")) {\r                    dialog.dismiss();\r                }\r            });\r            builder.show();*/\r\r            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(ServiceProviderEditFormActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r            {\r                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r            }\r\r            else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(ServiceProviderEditFormActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r            {\r                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r            }\r\r            else\r            {\r\r                isAddClinicPic = true;\r\r                isAddCertfProof = false;\r\r                isAddGovtIdproof = false;\r\r                isAddPhotoIDproof = false;\r\r                CropImage.activity().start(ServiceProviderEditFormActivity.this);\r\r                /*CropImage.activity().start(AddYourPetImageOlduserActivity.this);*/\r            }\r        }\r\r\r    }\r\r    @SuppressLint(\"LongLogTag\")\r    private void uploadServiceGalleryImage() {\r\r        avi_indicator.show();\r\r        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\r        //RestApiInterface ApiService = RetrofitClient.getApiService();\r\r        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(filePart);\r\r//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());\r\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\r        call.enqueue(new Callback<FileUploadResponse>() {\r            @SuppressLint(\"LongLogTag\")\r            @Override\r            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"Profpic\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                if (response.body() != null) {\r                    if (200 == response.body().getCode()) {\r\r                        isAddClinicPic = false;\r\r                        ServiceProviderRegisterFormCreateRequest.BusServiceGallBean busServiceGallBean = new ServiceProviderRegisterFormCreateRequest.BusServiceGallBean();\r                        busServiceGallBean.setBus_service_gall(response.body().getData());\r                        bus_service_gall_list.add(busServiceGallBean);\r\r                        ServiceProviderRegisterFormCreateResponse.DataBean.BusServiceGallBean busServiceGallBean1 = new ServiceProviderRegisterFormCreateResponse.DataBean.BusServiceGallBean();\r                        busServiceGallBean1.setBus_service_gall(response.body().getData());\r                        bus_service_gall_list_edit.add(busServiceGallBean1);\r\r\r\r\r                        editServiceImageListAdapter = new EditServiceImageListAdapter(getApplicationContext(), bus_service_gall_list_edit,bus_service_gall_list);\r                        rcylr_choosen_service_img.setAdapter(editServiceImageListAdapter);\r\r                    }\r\r                }\r\r\r            }\r\r            @SuppressLint(\"LongLogTag\")\r            @Override\r            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r                // avi_indicator.smoothToHide();\r                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r            }\r        });\r\r\r    }\r\r    private void chooseCertPdf() {\r\r        if(certificatePicResponse!=null&&certificatePicResponse.size()>=1){\r\r            Toasty.warning(getApplicationContext(), \"Sorry you can't Add more than 1\", Toast.LENGTH_SHORT).show();\r\r        }\r\r        else {\r\r            final CharSequence[] items = {\"Select Image\", \"Select File\",\"Cancel\"};\r            //AlertDialog.Builder alert=new AlertDialog.Builder(this);\r            AlertDialog.Builder builder = new AlertDialog.Builder(ServiceProviderEditFormActivity.this);\r            builder.setTitle(\"Choose option\");\r            builder.setItems(items, (dialog, item) -> {\r                if (items[item].equals(\"Select Image\"))\r                {\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(ServiceProviderEditFormActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE);\r                    }\r                    else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CERTIFICATE_PIC_PERMISSION);\r                    }\r                    else {\r\r                        isAddCertfProof = true;\r\r                        isAddClinicPic = false;\r\r                        isAddGovtIdproof = false;\r\r                        isAddPhotoIDproof = false;\r\r                        CropImage.activity().start(ServiceProviderEditFormActivity.this);\r\r                    }\r\r                }\r\r                else if (items[item].equals(\"Select File\")){\r\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M   && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PDF_PERMISSION);\r                    }\r\r                    else{\r\r                        Intent intent = new Intent();\r                        intent.setType(\"application/pdf\");\r                        intent.setAction(Intent.ACTION_GET_CONTENT);\r                        startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_CERT_PDF);\r\r\r                    }\r\r\r                }\r\r                else if (items[item].equals(\"Cancel\")) {\r                    dialog.dismiss();\r                }\r            });\r            builder.show();\r\r        }\r\r    }\r\r    @SuppressLint(\"LongLogTag\")\r    private void uploadCertPdf() {\r\r        avi_indicator.show();\r\r        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\r        //RestApiInterface ApiService = RetrofitClient.getApiService();\r\r        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(certPart);\r\r//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());\r\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\r        call.enqueue(new Callback<FileUploadResponse>() {\r            @SuppressLint(\"LongLogTag\")\r            @Override\r            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"PdfFileLink\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                if (response.body() != null) {\r\r                    if (200 == response.body().getCode()) {\r\r                        isAddCertfProof =false;\r\r                        ServiceProviderRegisterFormCreateRequest.BusCertifBean busCertifBean = new ServiceProviderRegisterFormCreateRequest.BusCertifBean();\r                        busCertifBean.setBus_certif(response.body().getData());\r                        bus_certif_list.add(busCertifBean);\r\r                        ServiceProviderRegisterFormCreateResponse.DataBean.BusCertifBean busCertifBean1 = new ServiceProviderRegisterFormCreateResponse.DataBean.BusCertifBean();\r                        busCertifBean1.setBus_certif(response.body().getData());\r                        bus_certif_list_edit.add(busCertifBean1);\r\r\r                        editCertPdfAdapter = new EditCertPdfAdapter(getApplicationContext(), bus_certif_list_edit,bus_certif_list);\r                        recylerView_choosen_certificate_images.setAdapter(editCertPdfAdapter);\r\r\r                    }\r\r                }\r\r\r            }\r\r            @SuppressLint(\"LongLogTag\")\r            @Override\r            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r                // avi_indicator.smoothToHide();\r                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r            }\r        });\r\r\r    }\r\r    private void chooseGovIDPdf() {\r\r        if(govtIdPicBeans!=null&&govtIdPicBeans.size()>=1){\r\r            Toasty.warning(getApplicationContext(), \"Sorry you can't Add more than 1\", Toast.LENGTH_SHORT).show();\r\r        }\r\r        else {\r\r            final CharSequence[] items = {\"Select Image\", \"Select File\",\"Cancel\"};\r            //AlertDialog.Builder alert=new AlertDialog.Builder(this);\r            AlertDialog.Builder builder = new AlertDialog.Builder(ServiceProviderEditFormActivity.this);\r            builder.setTitle(\"Choose option\");\r            builder.setItems(items, (dialog, item) -> {\r                if (items[item].equals(\"Select Image\"))\r                {\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(ServiceProviderEditFormActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_GOVTID_CAMERA_PERMISSION_CODE);\r                    }\r                    else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVTID_PIC_PERMISSION);\r                    }\r\r                    else {\r\r                        isAddGovtIdproof = true;\r\r                        isAddClinicPic = false;\r\r                        isAddCertfProof = false;\r\r                        isAddPhotoIDproof = false;\r\r\r                        CropImage.activity().start(ServiceProviderEditFormActivity.this);\r\r                    }\r\r\r                }\r\r                else if (items[item].equals(\"Select File\")){\r\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M   && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVT_ID_PDF_PERMISSION);\r                    }\r\r                    else{\r\r                        Intent intent = new Intent();\r                        intent.setType(\"application/pdf\");\r                        intent.setAction(Intent.ACTION_GET_CONTENT);\r                        startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_GOVTID_PDF);\r\r\r                    }\r\r\r                }\r\r                else if (items[item].equals(\"Cancel\")) {\r                    dialog.dismiss();\r                }\r            });\r            builder.show();\r        }\r\r\r    }\r\r\r    @SuppressLint(\"LongLogTag\")\r    private void uploadGovtIDPdf() {\r\r        avi_indicator.show();\r\r        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\r        //RestApiInterface ApiService = RetrofitClient.getApiService();\r\r        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(govIdPart);\r\r//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());\r\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\r        call.enqueue(new Callback<FileUploadResponse>() {\r            @SuppressLint(\"LongLogTag\")\r            @Override\r            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"PdfFileLink\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                if (response.body() != null) {\r\r                    if (200 == response.body().getCode()) {\r\r                        isAddGovtIdproof = false;\r\r                        govtIdPic = response.body().getData();\r                        DocBusInfoUploadRequest.GovtIdPicBean govtIdPicBean = new DocBusInfoUploadRequest.GovtIdPicBean (response.body().getData());\r                        govtIdPicBeans.add(govtIdPicBean);\r                        editGovtIdPdfAdapter = new EditGovtIdPdfAdapter(getApplicationContext(), govtIdPicBeans);\r                        recylerView_choosen_govtid_images.setAdapter(editGovtIdPdfAdapter);\r\r                    }\r\r                }\r\r\r            }\r\r            @SuppressLint(\"LongLogTag\")\r            @Override\r            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r                // avi_indicator.smoothToHide();\r                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r            }\r        });\r\r\r    }\r\r    private void choosePhotoIDPdf() {\r\r        if(photoIdPicBeans.size()>=1){\r\r            Toasty.warning(getApplicationContext(), \"Sorry you can't Add more than 1\", Toast.LENGTH_SHORT).show();\r\r        }\r\r        else {\r\r            final CharSequence[] items = {\"Select Image\", \"Select File\",\"Cancel\"};\r            //AlertDialog.Builder alert=new AlertDialog.Builder(this);\r            AlertDialog.Builder builder = new AlertDialog.Builder(ServiceProviderEditFormActivity.this);\r            builder.setTitle(\"Choose option\");\r            builder.setItems(items, (dialog, item) -> {\r                if (items[item].equals(\"Select Image\"))\r                {\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(ServiceProviderEditFormActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_PHOTOID_CAMERA_PERMISSION_CODE);\r                    }\r                    else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTOID_PIC_PERMISSION);\r                    }\r                    {\r                        isAddPhotoIDproof=true;\r\r                        isAddClinicPic = false;\r\r                        isAddCertfProof = false;\r\r                        isAddGovtIdproof = false;\r\r                        CropImage.activity().start(ServiceProviderEditFormActivity.this);\r\r                    }\r\r                }\r\r                else if (items[item].equals(\"Select File\")){\r\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M   && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTO_ID_PDF_PERMISSION);\r                    }\r\r                    else{\r\r                        Intent intent = new Intent();\r                        intent.setType(\"application/pdf\");\r                        intent.setAction(Intent.ACTION_GET_CONTENT);\r                        startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_PHOTOID_PDF);\r\r\r                    }\r\r\r                }\r\r                else if (items[item].equals(\"Cancel\")) {\r                    dialog.dismiss();\r                }\r            });\r            builder.show();\r\r        }\r\r\r\r    }\r\r    @SuppressLint(\"LongLogTag\")\r    private void uploadPhotoIDPdf() {\r\r        avi_indicator.show();\r\r        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\r        //RestApiInterface ApiService = RetrofitClient.getApiService();\r\r        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(photIDPart);\r\r//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());\r\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\r        call.enqueue(new Callback<FileUploadResponse>() {\r            @SuppressLint(\"LongLogTag\")\r            @Override\r            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"PdfFileLink\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                if (response.body() != null) {\r\r                    if (200 == response.body().getCode()) {\r\r                        isAddPhotoIDproof = false;\r\r                        photoIdPic = response.body().getData();\r                        DocBusInfoUploadRequest.PhotoIdPicBean photoIdPicBean = new DocBusInfoUploadRequest.PhotoIdPicBean(response.body().getData());\r\r                        photoIdPicBeans.add(photoIdPicBean);\r\r                        editPhotoIDPdfAdapter = new EditPhotoIDPdfAdapter(getApplicationContext(), photoIdPicBeans);\r\r                        recylerView_choosen_photo_id_images.setAdapter(editPhotoIDPdfAdapter);\r\r                    }\r\r                }\r\r\r\r\r            }\r\r            @SuppressLint(\"LongLogTag\")\r            @Override\r            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r                // avi_indicator.smoothToHide();\r                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r            }\r        });\r\r\r    }\r\r    @SuppressLint({\"LongLogTag\", \"LogNotTimber\"})\r    private void checkValidation() {\r            business_name = edt_business_name.getText().toString().trim();\r        Log.w(TAG,\"checkValidation spServiceList \"+new Gson().toJson(spServiceList));\r        Log.w(TAG,\"checkValidation bus_service_list \"+new Gson().toJson(bus_service_list));\r\r        boolean can_proceed = true;\r\r                if(business_name.isEmpty()){\r                    edt_business_name.setError(\"Please fill the business name\");\r                    edt_business_name.requestFocus();\r                    can_proceed = false;\r\r                }\r                else if(bus_service_list != null && bus_service_list.size()<1){\r                    Toasty.warning(getApplicationContext(),\"Please Choose minimum 1 Service\",Toast.LENGTH_SHORT).show();\r                    can_proceed = false;\r\r\r                }\r                else if(bus_spec_list != null && bus_spec_list.size()<1){\r                    Toasty.warning(getApplicationContext(),\"Please Choose minimum 1 Specialization\",Toast.LENGTH_SHORT).show();\r                    can_proceed = false;\r\r                }\r\r\r                else if(bus_service_gall_list != null &&bus_service_gall_list.size()<1){\r\r                    Toasty.warning(getApplicationContext(), \"Please Choose minimum 1 Service gallery image\", Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r                }\r                else if(photoIdPicBeans != null &&photoIdPicBeans.size()<1){\r\r                    Toasty.warning(getApplicationContext(), \"Please Choose PhotoID File\", Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r                }\r                else if(govtIdPicBeans != null &&govtIdPicBeans.size()<1){\r\r                    Toasty.warning(getApplicationContext(), \"Please Choose GovtID File\", Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r                }\r                else if(bus_certif_list != null &&bus_certif_list.size()<1){\r\r                    Toasty.warning(getApplicationContext(), \"Please Choose Certificate File\", Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r                }\r\r\r\r\r\r        if(can_proceed){\r                    if (new ConnectionDetector(getApplicationContext()).isNetworkAvailable(getApplicationContext())) {\r                        spUpdateReponseCall();\r\r                    }\r                }\r\r\r\r\r\r    }\r\r\r\r\r    @Override\r    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r        super.onActivityResult(requestCode, resultCode, data);\r\r        try {\r            if (requestCode == REQUEST_CHECK_SETTINGS_GPS) {\r                switch (resultCode) {\r                    case Activity.RESULT_OK:\r                        getMyLocation();\r                        break;\r                    case Activity.RESULT_CANCELED:\r                        getMyLocation();\r                        break;\r                }\r            }\r            //\tToast.makeText(getActivity(),\"kk\",Toast.LENGTH_SHORT).show();\r\r            if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {\r                CropImage.ActivityResult result = CropImage.getActivityResult(data);\r                if (resultCode == RESULT_OK) {\r                    Uri resultUri = result.getUri();\r\r                    if (resultUri != null) {\r\r                        Log.w(\"selectedImageUri\", \" \" + resultUri);\r\r                        String filename = getFileName(resultUri);\r\r                        Log.w(\"filename\", \" \" + filename);\r\r                        String filePath = FileUtil.getPath(ServiceProviderEditFormActivity.this, resultUri);\r\r                        assert filePath != null;\r\r                        File file = new File(filePath); // initialize file here\r\r                        long length = file.length() / 1024; // Size in KB\r\r                        Log.w(\"filesize\", \" \" + length);\r\r                        if (length > 2000) {\r\r                            new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                                    .setTitleText(\"File Size\")\r                                    .setContentText(\"Please choose file size less than 2 MB \")\r                                    .setConfirmText(\"Ok\")\r                                    .show();\r                        } else {\r\r\r                            SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r                            String currentDateandTime = sdf.format(new Date());\r\r                            if(isAddClinicPic){\r\r                                filePart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                                uploadServiceGalleryImage();\r                            }\r\r                            else if(isAddCertfProof){\r\r                                certPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                                uploadCertPdf();\r                            }\r\r                            else if(isAddGovtIdproof){\r\r                                govIdPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                                uploadGovtIDPdf();\r                            }\r                            else if(isAddPhotoIDproof){\r\r                                photIDPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                                uploadPhotoIDPdf();\r                            }\r                        }\r\r\r                    } else {\r\r                        Toasty.warning(ServiceProviderEditFormActivity.this, \"Image Error!!Please upload Some other image\", Toasty.LENGTH_LONG).show();\r                    }\r\r\r                }\r            }\r\r           else if(requestCode== SELECT_CLINIC_PICTURE || requestCode == SELECT_CLINIC_CAMERA)\r            {\r\r                if(requestCode == SELECT_CLINIC_CAMERA)\r                {\r                    Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get(\"data\");\r\r                    File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\r                    OutputStream os;\r                    try {\r                        os = new FileOutputStream(file);\r                        if (photo != null) {\r                            photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r                        }\r                        os.flush();\r                        os.close();\r                    } catch (Exception e) {\r                        Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r                    }\r\r                    RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\r                    filePart = MultipartBody.Part.createFormData(\"sampleFile\",  user_id+currentDateandTime+file.getName(), requestFile);\r\r                    uploadServiceGalleryImage();\r\r                }\r\r                else{\r\r                    try {\r                        if (resultCode == Activity.RESULT_OK)\r                        {\r\r                            Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\r                            Uri selectedImageUri = data.getData();\r\r                            Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\r                            String filename = null;\r                            if (selectedImageUri != null) {\r                                filename = getFileName(selectedImageUri);\r                            }\r\r                            Log.w(\"filename\", \" \" + filename);\r\r                            String filePath = FileUtil.getPath(ServiceProviderEditFormActivity.this,selectedImageUri);\r\r                            assert filePath != null;\r\r                            File file = new File(filePath); // initialize file here\r\r                            long length = file.length() / 1024; // Size in KB\r\r                            Log.w(\"filesize\", \" \" + length);\r\r//                        if(length>200){\r//\r//                            new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r//                                    .setTitleText(\"File Size\")\r//                                    .setContentText(\"Please choose file size less than 200 kb \")\r//                                    .setConfirmText(\"Ok\")\r//                                    .show();\r//                        }\r//\r//                        else{\r\r                            filePart = MultipartBody.Part.createFormData(\"sampleFile\", user_id+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                            uploadServiceGalleryImage();\r                            //}\r\r                        }\r                    } catch (Exception e) {\r\r                        Log.w(\"Exception\", \" \" + e);\r                    }\r\r                }\r\r            }\r\r            else if(requestCode == SELECT_CERTIFICATE_CAMERA)\r            {\r                Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get(\"data\");\r\r                File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\r                OutputStream os;\r                try {\r                    os = new FileOutputStream(file);\r                    if (photo != null) {\r                        photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r                    }\r                    os.flush();\r                    os.close();\r                } catch (Exception e) {\r                    Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r                }\r\r                RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\r                certPart = MultipartBody.Part.createFormData(\"sampleFile\",  user_id+currentDateandTime+file.getName(), requestFile);\r\r                uploadCertPdf();\r\r            }\r\r            else if(requestCode == SELECT_CERTIFICATE_PICTURE){\r\r                try {\r                    if (resultCode == Activity.RESULT_OK) {\r\r                        Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\r                        Uri selectedImageUri = data.getData();\r\r                        Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\r                        String filename = null;\r                        if (selectedImageUri != null) {\r                            filename = getFileName(selectedImageUri);\r                        }\r\r                        Log.w(\"filename\", \" \" + filename);\r\r                        String filePath = FileUtil.getPath(ServiceProviderEditFormActivity.this,selectedImageUri);\r\r                        assert filePath != null;\r\r                        File file = new File(filePath); // initialize file here\r\r                        long length = file.length() / 1024; // Size in KB\r\r                        Log.w(\"filesize\", \" \" + length);\r\r                        certPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                        uploadCertPdf();\r\r\r                    }\r                } catch (Exception e) {\r\r                    Log.w(\"Exception\", \" \" + e);\r                }\r\r            }\r\r            else if(requestCode== SELECT_CERT_PDF){\r\r                if(data!=null){\r\r                    try {\r                        if (resultCode == Activity.RESULT_OK)\r                        {\r\r                            Log.w(\"URI\", \" \" + data);\r\r                            Uri selectedFileUri = data.getData();\r\r                            if(selectedFileUri!=null){\r\r                                Log.w(\"selectedFileUri\", \" \" + selectedFileUri);\r\r                                String filename = getFileName(selectedFileUri);\r\r                                Log.w(\"filename\", \" \" + filename);\r\r                                String filePath = FileUtil.getPath(ServiceProviderEditFormActivity.this,selectedFileUri);\r\r                                assert filePath != null;\r\r                                File file = new File(filePath); // initialize file here\r\r                                long length = file.length() / 1024; // Size in KB\r\r                                Log.w(\"filesize\", \" \" + length);\r\r                                if(length>2000){\r\r                                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                                            .setTitleText(\"File Size\")\r                                            .setContentText(\"Please choose file size less than 2MB \")\r                                            .setConfirmText(\"Ok\")\r                                            .show();\r                                }\r\r                                else{\r\r                                    certPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"pdf/*\"), file));\r\r                                    uploadCertPdf();\r                                }\r\r\r                            }\r                            else {\r\r                                Toasty.warning(ServiceProviderEditFormActivity.this, \"File Error!!Please upload Some other File\", Toasty.LENGTH_LONG).show();\r\r                            }\r\r                        }\r                    } catch (Exception e) {\r\r                        Log.w(\"Exception\", \" \" + e);\r                    }\r                }\r\r                else {\r\r                    Toasty.warning(ServiceProviderEditFormActivity.this, \"File Error!!Please upload Some other File\", Toasty.LENGTH_LONG).show();\r\r                }\r\r            }\r\r            else if(requestCode == SELECT_GOVTID_CAMERA)\r            {\r                Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get(\"data\");\r\r                File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\r                OutputStream os;\r                try {\r                    os = new FileOutputStream(file);\r                    if (photo != null) {\r                        photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r                    }\r                    os.flush();\r                    os.close();\r                } catch (Exception e) {\r                    Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r                }\r\r                RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\r                govIdPart = MultipartBody.Part.createFormData(\"sampleFile\",  user_id+currentDateandTime+file.getName(), requestFile);\r\r                uploadGovtIDPdf();\r\r            }\r\r            else if(requestCode == SELECT_GOVTID_PICTURE){\r\r                try {\r                    if (resultCode == Activity.RESULT_OK) {\r\r                        Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\r                        Uri selectedImageUri = data.getData();\r\r                        Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\r                        String filename = null;\r                        if (selectedImageUri != null) {\r                            filename = getFileName(selectedImageUri);\r                        }\r\r                        Log.w(\"filename\", \" \" + filename);\r\r                        String filePath = FileUtil.getPath(ServiceProviderEditFormActivity.this,selectedImageUri);\r\r                        assert filePath != null;\r\r                        File file = new File(filePath); // initialize file here\r\r                        long length = file.length() / 1024; // Size in KB\r\r                        Log.w(\"filesize\", \" \" + length);\r\r                        govIdPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                        uploadGovtIDPdf();\r\r\r                    }\r                } catch (Exception e) {\r\r                    Log.w(\"Exception\", \" \" + e);\r                }\r\r            }\r\r            else if(requestCode== SELECT_GOVTID_PDF){\r\r                try {\r                    if (resultCode == Activity.RESULT_OK)\r                    {\r                        if(data!=null){\r\r                            Log.w(\"URI\", \" \" + data);\r\r                            Uri selectedFileUri = data.getData();\r\r                            if(selectedFileUri!=null){\r\r                                Log.w(\"selectedFileUri\", \" \" + selectedFileUri);\r\r                                String filename = getFileName(selectedFileUri);\r\r                                Log.w(\"filename\", \" \" + filename);\r\r                                String filePath = FileUtil.getPath(ServiceProviderEditFormActivity.this,selectedFileUri);\r\r                                assert filePath != null;\r\r                                File file = new File(filePath); // initialize file here\r\r                                long length = file.length() / 1024; // Size in KB\r\r                                Log.w(\"filesize\", \" \" + length);\r\r                                if(length>2000){\r\r                                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                                            .setTitleText(\"File Size\")\r                                            .setContentText(\"Please choose file size less than 2MB \")\r                                            .setConfirmText(\"Ok\")\r                                            .show();\r                                }\r\r                                else{\r\r                                    govIdPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"pdf/*\"), file));\r\r                                    uploadGovtIDPdf();\r                                }\r                            }\r\r                            else {\r\r                                Toasty.warning(ServiceProviderEditFormActivity.this, \"File Error!!Please upload Some other File\", Toasty.LENGTH_LONG).show();\r\r                            }\r\r                        }\r\r                        else {\r\r                            Toasty.warning(ServiceProviderEditFormActivity.this, \"File Error!!Please upload Some other File\", Toasty.LENGTH_LONG).show();\r\r                        }\r\r                    }\r                } catch (Exception e) {\r\r                    Log.w(\"Exception\", \" \" + e);\r                }\r            }\r\r            else if(requestCode == SELECT_PHOTOID_CAMERA)\r            {\r                Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get(\"data\");\r\r                File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\r                OutputStream os;\r                try {\r                    os = new FileOutputStream(file);\r                    if (photo != null) {\r                        photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r                    }\r                    os.flush();\r                    os.close();\r                } catch (Exception e) {\r                    Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r                }\r\r                RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\r                photIDPart = MultipartBody.Part.createFormData(\"sampleFile\",  user_id+currentDateandTime+file.getName(), requestFile);\r\r                uploadPhotoIDPdf();\r\r            }\r\r            else if(requestCode == SELECT_PHOTOID_PICTURE){\r\r                try {\r                    if (resultCode == Activity.RESULT_OK) {\r\r                        Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\r                        Uri selectedImageUri = data.getData();\r\r                        Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\r                        String filename = null;\r                        if (selectedImageUri != null) {\r                            filename = getFileName(selectedImageUri);\r                        }\r\r                        Log.w(\"filename\", \" \" + filename);\r\r                        String filePath = FileUtil.getPath(ServiceProviderEditFormActivity.this,selectedImageUri);\r\r                        assert filePath != null;\r\r                        File file = new File(filePath); // initialize file here\r\r                        long length = file.length() / 1024; // Size in KB\r\r                        Log.w(\"filesize\", \" \" + length);\r\r                        photIDPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                        uploadPhotoIDPdf();\r\r\r                    }\r                } catch (Exception e) {\r\r                    Log.w(\"Exception\", \" \" + e);\r                }\r\r            }\r\r            else if(requestCode== SELECT_PHOTOID_PDF){\r\r                try {\r\r                    if (resultCode == Activity.RESULT_OK)\r                    {\r                        if(data!=null){\r\r                            Log.w(\"URI\", \" \" + data);\r\r                            Uri selectedFileUri = data.getData();\r\r                            if(selectedFileUri!=null){\r\r                                Log.w(\"selectedFileUri\", \" \" + selectedFileUri);\r\r                                String filename = getFileName(selectedFileUri);\r\r                                Log.w(\"filename\", \" \" + filename);\r\r                                String filePath = FileUtil.getPath(ServiceProviderEditFormActivity.this,selectedFileUri);\r\r                                assert filePath != null;\r\r                                File file = new File(filePath); // initialize file here\r\r                                long length = file.length() / 1024; // Size in KB\r\r                                Log.w(\"filesize\", \" \" + length);\r\r                                if(length>2000){\r\r                                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                                            .setTitleText(\"File Size\")\r                                            .setContentText(\"Please choose file size less than 2MB \")\r                                            .setConfirmText(\"Ok\")\r                                            .show();\r                                }\r\r                                else{\r\r                                    photIDPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"pdf/*\"), file));\r\r                                    uploadPhotoIDPdf();\r                                }\r\r                            }\r\r                            else {\r\r                                Toasty.warning(ServiceProviderEditFormActivity.this, \"File Error!!Please upload Some other File\", Toasty.LENGTH_LONG).show();\r\r                            }\r\r                        }\r\r                        else {\r\r                            Toasty.warning(ServiceProviderEditFormActivity.this, \"File Error!!Please upload Some other File\", Toasty.LENGTH_LONG).show();\r\r                        }\r\r                    }\r\r                } catch (Exception e) {\r\r                    Log.w(\"Exception\", \" \" + e);\r                }\r            }\r        } catch (Exception e) {\r            e.printStackTrace();\r        }\r\r\r    }\r\r    @Override\r    public void onBackPressed() {\r        super.onBackPressed();\r        startActivity(new Intent(ServiceProviderEditFormActivity.this, SPProfileScreenActivity.class));\r        finish();\r    }\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @Override\r    public void onClick(View v) {\r\r        switch (v.getId()){\r\r            case R.id.buttonsubmit:\r                checkValidation();\r                break;\r\r            case R.id.img_bck:\r                onBackPressed();\r                break;\r\r                case R.id.rl_service_gallery_image:\r                    chooseServiceGalleryImage();\r                break;\r\r            case R.id.rl_certificates:\r                chooseCertPdf();\r                break;\r\r            case R.id.rl_govtid:\r                chooseGovIDPdf();\r                break;\r\r            case R.id.rl_photoid:\r                choosePhotoIDPdf();\r                break;\r\r                case R.id.btn_add_service:\r                    addMoreService();\r\r                break;\r                case R.id.btn_add_specialization:\r                    addMoreSpecialzation();\r\r                break;\r\r\r            case R.id.txt_location_change:\r                gotoSetlocation();\r                break;\r\r\r        }\r\r    }\r\r    private void gotoSetlocation() {\r        Intent intent = new Intent(getApplicationContext(), SetLocationSPOldActivity.class);\r        intent.putExtra(\"fromactivity\",TAG);\r        startActivity(intent);\r    }\r\r\r    @SuppressLint(\"LongLogTag\")\r    private void addMoreService() {\r        if(edt_addmore_service.getText().toString() != null && !edt_addmore_service.getText().toString().isEmpty()){\r            ServiceProviderRegisterFormCreateRequest.BusServiceListBean busServiceListBean = new ServiceProviderRegisterFormCreateRequest.BusServiceListBean();\r            busServiceListBean.setBus_service_list(edt_addmore_service.getText().toString());\r            busServiceListBean.setTime_slots(strTimeslot);\r            busServiceListBean.setAmount(1);\r            bus_service_addmore_list.add(busServiceListBean);\r\r            bus_service_list.add(busServiceListBean);\r            rcylr_sp_servicestaticlist.setVisibility(View.VISIBLE);\r            setSPAddMoreServiceList(bus_service_addmore_list);\r            edt_addmore_service.setText(\"\");\r            Log.w(TAG,\"moreServiceArrayList : \"+new Gson().toJson(bus_service_list));\r        }else{\r            showWarningAddMoreService();\r        }\r    }\r\r    @SuppressLint(\"LongLogTag\")\r    private void addMoreSpecialzation() {\r        if(edt_specialization_ifany.getText().toString() != null && !edt_specialization_ifany.getText().toString().isEmpty()){\r            ServiceProviderRegisterFormCreateRequest.BusSpecListBean busSpecListBean = new ServiceProviderRegisterFormCreateRequest.BusSpecListBean();\r            busSpecListBean.setBus_spec_list(edt_specialization_ifany.getText().toString());\r            bus_specialzation_addmore_list.add(busSpecListBean);\r            bus_spec_list.add(busSpecListBean);\r            rcylr_sp_specializationstaticlist.setVisibility(View.VISIBLE);\r            setSPAddMoreSpecialzationList(bus_specialzation_addmore_list);\r            edt_specialization_ifany.setText(\"\");\r            Log.w(TAG,\"moreSpecialzationArrayList : \"+new Gson().toJson(bus_spec_list));\r        }else{\r            showWarningAddMoreSpecialzation();\r        }\r    }\r\r    @Override\r    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\r        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r        if (requestCode == MY_PERMISSIONS_REQUEST_LOCATION) {\r            if (grantResults.length > 0\r                    && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r                if (ContextCompat.checkSelfPermission(getApplicationContext(),\r                        Manifest.permission.ACCESS_FINE_LOCATION)\r                        == PackageManager.PERMISSION_GRANTED) {\r\r\r                }\r            } else {\r                Toast.makeText(getApplicationContext(), \"permission denied\", Toast.LENGTH_LONG).show();\r            }\r        }\r\r        if (requestCode == REQUEST_READ_CLINIC_PIC_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r//                Intent intent = new Intent();\r//                intent.setType(\"image/*\");\r//                intent.setAction(Intent.ACTION_GET_CONTENT);\r//                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_CLINIC_PICTURE);\r\r                chooseServiceGalleryImage();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_READ_CLINIC_PIC_PERMISSION);\r                        })\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_CLINIC_CAMERA_PERMISSION_CODE) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r//                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r//\r//                startActivityForResult(intent, SELECT_CLINIC_CAMERA);\r\r                chooseServiceGalleryImage();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Camera for taking picture\")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r                        })\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_READ_CLINIC_PDF_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r                Intent intent = new Intent();\r                intent.setType(\"application/pdf\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_CERT_PDF);\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Pdf files \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PDF_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_READ_CLINIC_PDF_PERMISSION);\r                        })\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_READ_GOVT_ID_PDF_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r                Intent intent = new Intent();\r                intent.setType(\"application/pdf\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_GOVTID_PDF);\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Pdf Files \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVT_ID_PDF_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_READ_GOVT_ID_PDF_PERMISSION);\r                        })\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_READ_PHOTO_ID_PDF_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r                Intent intent = new Intent();\r                intent.setType(\"application/pdf\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_PHOTOID_PDF);\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Pdf files \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTO_ID_PDF_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_READ_PHOTO_ID_PDF_PERMISSION);\r                        })\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_READ_CERTIFICATE_PIC_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r              /*  Intent intent = new Intent();\r                intent.setType(\"image/*\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_CERTIFICATE_PICTURE);\r*/\r                chooseCertPdf();\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CERTIFICATE_PIC_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_READ_CERTIFICATE_PIC_PERMISSION);\r                        })\r                        .show();\r\r            }\r\r        } else if (requestCode == REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r               /* Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\r                //    intent.putExtra(MediaStore.EXTRA_SCREEN_ORIENTATION, ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\r\r                startActivityForResult(intent, SELECT_CERTIFICATE_CAMERA);*/\r\r                chooseCertPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Camera for taking picture\")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE);\r                        })\r                        .show();\r\r            }\r\r        } else if (requestCode == REQUEST_READ_GOVTID_PIC_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r//                Intent intent = new Intent();\r//                intent.setType(\"image/*\");\r//                intent.setAction(Intent.ACTION_GET_CONTENT);\r//                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_GOVTID_PICTURE);\r\r                chooseGovIDPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVTID_PIC_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_READ_GOVTID_PIC_PERMISSION);\r                        })\r                        .show();\r\r            }\r\r        } else if (requestCode == REQUEST_GOVTID_CAMERA_PERMISSION_CODE) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r             /*   Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\r                //    intent.putExtra(MediaStore.EXTRA_SCREEN_ORIENTATION, ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\r\r                startActivityForResult(intent, SELECT_GOVTID_CAMERA);*/\r\r                chooseGovIDPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Camera for taking picture\")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_GOVTID_CAMERA_PERMISSION_CODE);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_GOVTID_CAMERA_PERMISSION_CODE);\r                        })\r                        .show();\r\r            }\r\r        } else if (requestCode == REQUEST_READ_PHOTOID_PIC_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r                /*Intent intent = new Intent();\r                intent.setType(\"image/*\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_PHOTOID_PICTURE);*/\r\r                choosePhotoIDPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTOID_PIC_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_READ_PHOTOID_PIC_PERMISSION);\r                        })\r                        .show();\r\r            }\r\r        } else if (requestCode == REQUEST_PHOTOID_CAMERA_PERMISSION_CODE) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r/*                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\r                //    intent.putExtra(MediaStore.EXTRA_SCREEN_ORIENTATION, ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\r\r                startActivityForResult(intent, SELECT_PHOTOID_CAMERA);*/\r\r                choosePhotoIDPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Camera for taking picture\")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_PHOTOID_CAMERA_PERMISSION_CODE);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_PHOTOID_CAMERA_PERMISSION_CODE);\r                        })\r                        .show();\r\r            }\r\r        }\r\r\r    }\r\r\r    private void showWarning(int REQUEST_PERMISSION_CODE) {\r\r        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                .setTitleText(\"Sorry!!\")\r                .setContentText(\"You Can't proceed further unless you allow permission\")\r                .setConfirmText(\"Ok\")\r                .setConfirmClickListener(sDialog -> {\r\r                    sDialog.dismissWithAnimation();\r\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_PERMISSION_CODE);\r                    }\r\r\r                })\r                .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                .show();\r    }\r    private void showWarningAddMoreService() {\r\r        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                .setTitleText(\"Add More Service!!\")\r                .setContentText(\"Please enter the service name\")\r                .setConfirmText(\"Ok\")\r                .setConfirmClickListener(SweetAlertDialog::dismissWithAnimation)\r                .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                .show();\r    }\r    private void showWarningAddMoreSpecialzation() {\r\r        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                .setTitleText(\"Add More Specialzation!!\")\r                .setContentText(\"Please enter the specialzation name\")\r                .setConfirmText(\"Ok\")\r                .setConfirmClickListener(SweetAlertDialog::dismissWithAnimation)\r                .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                .show();\r    }\r\r    public String getFileName(Uri uri) {\r        String result = null;\r        if (Objects.requireNonNull(uri.getScheme()).equals(\"content\")) {\r            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {\r                if (cursor != null && cursor.moveToFirst()) {\r                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));\r                }\r            }\r        }\r        if (result == null) {\r            result = uri.getPath();\r            int cut = 0;\r            if (result != null) {\r                cut = result.lastIndexOf('/');\r            }\r            if (cut != -1) {\r                if (result != null) {\r                    result = result.substring(cut + 1);\r                }\r            }\r        }\r        return result;\r    }\r\r\r\r\r    @SuppressLint({\"LongLogTag\", \"LogNotTimber\"})\r    private void spUpdateReponseCall() {\r        avi_indicator.setVisibility(View.VISIBLE);\r        avi_indicator.smoothToShow();\r        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);\r        Call<ServiceProviderRegisterFormCreateResponse> call = apiInterface.spUpdateReponseCall(RestUtils.getContentType(), serviceProviderRegisterFormCreateRequest());\r        Log.w(TAG,\"ServiceProviderRegisterFormCreateResponse url  :%s\"+\" \"+ call.request().url().toString());\r\r        call.enqueue(new Callback<ServiceProviderRegisterFormCreateResponse>() {\r            @SuppressLint({\"LongLogTag\", \"LogNotTimber\"})\r            @Override\r            public void onResponse(@NonNull Call<ServiceProviderRegisterFormCreateResponse> call, @NonNull Response<ServiceProviderRegisterFormCreateResponse> response) {\r\r                Log.w(TAG,\"spUpdateReponseCall\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                avi_indicator.smoothToHide();\r\r                if (response.body() != null) {\r                    if(response.body().getCode() == 200){\r\r                        if (response.body().getMessage() != null){\r                            showRegisterSuccessalert(response.body().getMessage());\r                        }\r\r\r                    }\r                    else{\r                        showErrorLoading(response.body().getMessage());\r                    }\r                }\r\r\r            }\r\r            @SuppressLint(\"LongLogTag\")\r            @Override\r            public void onFailure(@NonNull Call<ServiceProviderRegisterFormCreateResponse> call, @NonNull Throwable t) {\r\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"spUpdateReponseCall flr\"+\"--->\" + t.getMessage());\r            }\r        });\r\r    }\r    @SuppressLint(\"LongLogTag\")\r    private ServiceProviderRegisterFormCreateRequest serviceProviderRegisterFormCreateRequest() {\r        /*\r         * user_id : 5fc61b82b750da703e48da78\r         * _id : 5fc61b82b750da703e48da78\r         * bus_user_name : mohammed Imthiyas\r         * bus_user_email : mohammed@gmail.com\r         * bussiness_name : Mohammed imthiyas\r         * bus_user_phone : 9876543210\r         * bus_service_list : [{\"bus_service_list\":\"Service - 1\"},{\"bus_service_list\":\"Service - 2\"},{\"bus_service_list\":\"Service - 3\"}]\r         * bus_spec_list : [{\"bus_spec_list\":\"Spec -1\"},{\"bus_spec_list\":\"Spec -1\"},{\"bus_spec_list\":\"Spec -1\"}]\r         * bus_service_gall : [{\"bus_service_gall\":\"http://mysalveo.com/api/uploads/images.jpeg\"},{\"bus_service_gall\":\"http://mysalveo.com/api/uploads/images.jpeg\"},{\"bus_service_gall\":\"http://mysalveo.com/api/uploads/images.jpeg\"}]\r         * bus_profile : http://mysalveo.com/api/uploads/images.jpeg\r         * bus_proof : http://mysalveo.com/api/uploads/images.jpeg\r         * bus_certif : [{\"bus_certif\":\"http://mysalveo.com/api/uploads/images.jpeg\"},{\"bus_certif\":\"http://mysalveo.com/api/uploads/images.jpeg\"},{\"bus_certif\":\"http://mysalveo.com/api/uploads/images.jpeg\"}]\r         * date_and_time : 23-10-2020 12:00 AM\r         * mobile_type : Admin\r         * profile_status : true\r         * profile_verification_status : Not verified\r         *\"sp_loc\" : \"No, chennai tamil nadu\",\r         *\"sp_lat\" : 12.00909,\r         *\"sp_long\" : 80.980098,\r         */\r\r        SimpleDateFormat sdf = new SimpleDateFormat(\"dd/MM/yyyy hh:mm aa\", Locale.getDefault());\r        String currentDateandTime = sdf.format(new Date());\r        ServiceProviderRegisterFormCreateRequest serviceProviderRegisterFormCreateRequest = new ServiceProviderRegisterFormCreateRequest();\r        serviceProviderRegisterFormCreateRequest.setUser_id(user_id);\r        serviceProviderRegisterFormCreateRequest.set_id(_id);\r        serviceProviderRegisterFormCreateRequest.setBus_user_name(username);\r        serviceProviderRegisterFormCreateRequest.setBus_user_email(useremail);\r        serviceProviderRegisterFormCreateRequest.setBussiness_name(edt_business_name.getText().toString());\r        serviceProviderRegisterFormCreateRequest.setBus_user_phone(userphone);\r        serviceProviderRegisterFormCreateRequest.setBus_service_list(bus_service_list);\r        serviceProviderRegisterFormCreateRequest.setBus_spec_list(bus_spec_list);\r        serviceProviderRegisterFormCreateRequest.setBus_service_gall(bus_service_gall_list);\r        serviceProviderRegisterFormCreateRequest.setBus_profile(photoIdPic);\r        serviceProviderRegisterFormCreateRequest.setBus_proof(govtIdPic);\r        serviceProviderRegisterFormCreateRequest.setBus_certif(bus_certif_list);\r        serviceProviderRegisterFormCreateRequest.setDate_and_time(currentDateandTime);\r        serviceProviderRegisterFormCreateRequest.setMobile_type(\"Android\");\r        serviceProviderRegisterFormCreateRequest.setProfile_status(true);\r        serviceProviderRegisterFormCreateRequest.setProfile_verification_status(\"Not verified\");\r        serviceProviderRegisterFormCreateRequest.setSp_loc(txt_address.getText().toString());\r        serviceProviderRegisterFormCreateRequest.setSp_lat(latitude);\r        serviceProviderRegisterFormCreateRequest.setSp_long(longitude);\r        serviceProviderRegisterFormCreateRequest.setSp_info(edt_aboutsp.getText().toString());\r        if(latitude!=0&&longitude!=0){\r            String city = getCity(latitude,longitude);\r            if(city!=null&&!city.isEmpty()){\r\r                serviceProviderRegisterFormCreateRequest.setCity_name(city);\r            }\r        }\r\r        Log.w(TAG,\"spUpdateReponseCall Request\"+ \"--->\" + new Gson().toJson(serviceProviderRegisterFormCreateRequest));\r        return serviceProviderRegisterFormCreateRequest;\r    }\r\r    private String getCity(double clinic_lat, double clinic_long) {\r\r        Geocoder geocoder = new Geocoder(this, Locale.getDefault());\r        List<Address> addresses = null;\r        try {\r            addresses = geocoder.getFromLocation(clinic_lat, clinic_long, 1);\r        } catch (IOException e) {\r            e.printStackTrace();\r        }\r        String cityName = addresses.get(0).getLocality();\r        String stateName = addresses.get(0).getSubLocality();\r        String countryName = addresses.get(0).getAddressLine(2);\r\r        return cityName;\r    }\r\r\r\r    @SuppressLint(\"LongLogTag\")\r    @Override\r    public void addMoreServiceRemoveListener(int position, String servicevalue) {\r        Log.w(TAG,\"addMoreServiceRemoveListener : \"+servicevalue);\r        if(servicevalue != null){\r            if(bus_service_list != null){\r                for (int i = 0; i < bus_service_list.size(); i++)\r                    if (bus_service_list.get(i).getBus_service_list().equalsIgnoreCase(servicevalue)) {\r                        bus_service_list.remove(i);\r                        Log.w(TAG, \"after removing list if\" + new Gson().toJson(bus_service_list));\r\r                    }\r\r            }\r\r\r\r        }\r    }\r\r    public void showErrorLoading(String errormesage){\r        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);\r        alertDialogBuilder.setMessage(errormesage);\r        alertDialogBuilder.setPositiveButton(\"ok\",\r                (arg0, arg1) -> hideLoading());\r\r\r\r\r        AlertDialog alertDialog = alertDialogBuilder.create();\r        alertDialog.show();\r    }\r    public void hideLoading(){\r        try {\r            alertDialog.dismiss();\r        }catch (Exception ignored){\r\r        }\r    }\r\r    @SuppressLint(\"LongLogTag\")\r    @Override\r    public void onItemSPSpecialzationCheck(int position, String specValue) {\r        SPServiceListResponse.DataBean.SpecializationBean specializationBean = new SPServiceListResponse.DataBean.SpecializationBean();\r        specializationBean.setSpecialization(specValue);\r        spSpecialzationList.add(specializationBean);\r        //spSpecialzationListEditAdapter.notifyDataSetChanged();\r\r        ServiceProviderRegisterFormCreateRequest.BusSpecListBean busSpecListBean = new ServiceProviderRegisterFormCreateRequest.BusSpecListBean();\r        busSpecListBean.setBus_spec_list(specValue);\r        bus_spec_list.add(busSpecListBean);\r        Log.w(TAG + \"added_specialzation_list\",new Gson().toJson(bus_spec_list));\r\r\r    }\r\r    @SuppressLint(\"LongLogTag\")\r    @Override\r    public void onItemSPSpecialzationUnCheck(int position, String specValue) {\r        if(specValue != null){\r            if(bus_spec_list != null){\r                for (int i = 0; i < bus_spec_list.size(); i++)\r                    if (bus_spec_list.get(i).getBus_spec_list().equalsIgnoreCase(specValue)) {\r                        bus_spec_list.remove(i);\r                        Log.w(TAG, \"after removing list if\" + new Gson().toJson(bus_spec_list));\r\r                    }\r\r            }\r\r\r\r        }\r    }\r\r    @SuppressLint(\"LongLogTag\")\r    @Override\r    public void addMoreSpecialzationRemoveListener(int position, String specValue) {\r        Log.w(TAG,\"addMoreSpecialzationRemoveListener : \"+specValue);\r        if(specValue != null){\r            if(bus_spec_list != null){\r                for (int i = 0; i < bus_spec_list.size(); i++)\r                    if (bus_spec_list.get(i).getBus_spec_list().equalsIgnoreCase(specValue)) {\r                        bus_spec_list.remove(i);\r                        Log.w(TAG, \"after removing list if\" + new Gson().toJson(bus_spec_list));\r\r                    }\r\r            }\r\r\r\r        }\r    }\r\r    private void googleApiConnected() {\r\r        googleApiClient = new GoogleApiClient.Builder(Objects.requireNonNull(getApplicationContext())).\r                addConnectionCallbacks(this).\r                addOnConnectionFailedListener(this).\r                addApi(LocationServices.API).build();\r        googleApiClient.connect();\r\r    }\r    private void checkLocation() {\r        try {\r            LocationManager lm = (LocationManager) getApplicationContext().getSystemService(Context.LOCATION_SERVICE);\r            boolean gps_enabled = false;\r            boolean network_enabled = false;\r\r            try {\r                gps_enabled = lm.isProviderEnabled(LocationManager.GPS_PROVIDER);\r            } catch (Exception ignored) {\r            }\r\r            try {\r                network_enabled = lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER);\r            } catch (Exception ignored) {\r            }\r\r            if (!gps_enabled && !network_enabled) {\r\r                if (!lm.isProviderEnabled(LocationManager.GPS_PROVIDER)) {\r                    getMyLocation();\r                }\r\r            } /*else {\r                getLatandLong();\r            }*/\r        } catch (Exception e) {\r            e.printStackTrace();\r        }\r\r    }\r    @SuppressLint(\"LongLogTag\")\r    @Override\r    public void onLocationChanged(Location location) {\r        mLastLocation = location;\r       // latitude = mLastLocation.getLatitude();\r       // longitude = mLastLocation.getLongitude();\r\r       /* if(latitude != 0 && longitude != 0){\r            getAddress(latitude,longitude);\r        }\r\r        Log.w(TAG,\"onLocationChanged : \"+\" latitude : \"+latitude+ \" longitude : \"+longitude);\r\r*/\r\r\r\r\r    }\r    @Override\r    public void onConnected(@Nullable Bundle bundle) {\r        permissionChecking();\r    }\r    @Override\r    public void onConnectionSuspended(int i) {\r\r    }\r    @Override\r    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {\r\r    }\r    @SuppressLint(\"LongLogTag\")\r    @Override\r    public void onMapReady(GoogleMap googleMap) {\r\r\r    }\r    private void permissionChecking() {\r        if (getApplicationContext() != null) {\r            if (Build.VERSION.SDK_INT >= 23 && (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) &&\r                    (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED)) {\r\r                ActivityCompat.requestPermissions(Objects.requireNonNull(this), new String[]{Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION}, 5);\r\r            } else {\r\r                checkLocation();\r            }\r        }\r    }\r    public void getMyLocation() {\r\r        if (googleApiClient != null) {\r\r            if (googleApiClient.isConnected()) {\r                if(getApplicationContext() != null){\r                    if (ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r                        // TODO: Consider calling\r                        //    ActivityCompat#requestPermissions\r                        // here to request the missing permissions, and then overriding\r                        //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\r                        //                                          int[] grantResults)\r                        // to handle the case where the user grants the permission. See the documentation\r                        // for ActivityCompat#requestPermissions for more details.\r\r                        return;\r                    }\r\r                }\r\r                mLastLocation = LocationServices.FusedLocationApi.getLastLocation(googleApiClient);\r                LocationRequest locationRequest = new LocationRequest();\r                locationRequest.setInterval(2000);\r                locationRequest.setFastestInterval(2000);\r                locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);\r                LocationSettingsRequest.Builder builder = new LocationSettingsRequest.Builder().addLocationRequest(locationRequest);\r                builder.setAlwaysShow(true);\r                LocationServices.FusedLocationApi.requestLocationUpdates(googleApiClient, locationRequest, this);\r                PendingResult<LocationSettingsResult> result = LocationServices.SettingsApi.checkLocationSettings(googleApiClient, builder.build());\r                result.setResultCallback(result1 -> {\r                    Status status = result1.getStatus();\r                    switch (status.getStatusCode()) {\r                        case LocationSettingsStatusCodes.SUCCESS:\r                            // All location settings are satisfied.\r                            // You can initialize location requests here.\r                            mLastLocation = LocationServices.FusedLocationApi.getLastLocation(googleApiClient);\r\r\r\r\r\r\r                            Handler handler = new Handler();\r                            int delay = 1000; //milliseconds\r\r                            handler.postDelayed(new Runnable() {\r                                @SuppressLint(\"LongLogTag\")\r                                public void run() {\r                                    //do something\r                                    Log.w(TAG, \"getMyLocation-->\");\r\r                                    //parkingListResponseCall(checkinhours,checkouthours,requestCheckinDate,requestCheckoutDate, selectedVehicleTypeId);\r\r\r                                }\r                            }, delay);\r\r\r                            break;\r                        case LocationSettingsStatusCodes.RESOLUTION_REQUIRED:\r                            try {\r                                status.startResolutionForResult(this, REQUEST_CHECK_SETTINGS_GPS);\r                            } catch (IntentSender.SendIntentException e) {\r                                // Ignore the error.\r                            }\r                            break;\r                        case LocationSettingsStatusCodes.SETTINGS_CHANGE_UNAVAILABLE:\r                            break;\r                    }\r                });\r            }\r\r\r        }\r    }\r    @SuppressLint(\"LongLogTag\")\r    private void getLatandLong() {\r        try {\r            if (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 1);\r\r            } else {\r                GPSTracker gps = new GPSTracker(getApplicationContext());\r                // Check if GPS enabled\r                if (gps.canGetLocation()) {\r                    latitude = gps.getLatitude();\r                    longitude = gps.getLongitude();\r\r                    Log.w(TAG, \"getLatandLong--->\" + \"latitude\" + \" \" + latitude + \"longitude\" + \" \" + longitude);\r                    if(latitude != 0 && longitude != 0){\r                        getAddress(latitude,longitude);\r                    }\r\r\r\r\r                }\r            }\r\r\r\r\r        } catch (Exception e) {\r            e.printStackTrace();\r        }\r    }\r\r    @SuppressLint(\"LongLogTag\")\r    private void getAddress(double latitude, double longitude) {\r        StringBuilder result = new StringBuilder();\r        try {\r            Geocoder geocoder = new Geocoder(this, Locale.getDefault());\r            List<Address> listAddresses = geocoder.getFromLocation(latitude, longitude, 1);\r            if (null != listAddresses && listAddresses.size() > 0) {\r                Address address = listAddresses.get(0);\r                result.append(address.getLocality()).append(\"\\n\");\r                result.append(address.getCountryName());\r\r                String state = listAddresses.get(0).getAdminArea();\r                String country = listAddresses.get(0).getCountryName();\r                String subLocality = listAddresses.get(0).getSubLocality();\r                String postalcode = listAddresses.get(0).getPostalCode();\r                AddressLine = listAddresses.get(0).getAddressLine(0);\r                String CityName = listAddresses.get(0).getLocality();\r                if(CityName != null){\r                    AddressLine = CityName+\" \"+listAddresses.get(0).getAddressLine(0);\r\r                }\r\r\r                // Thoroughfare seems to be the street name without numbers\r               String street = address.getThoroughfare();\r\r\r\r                Log.w(TAG,\"AddressLine :\"+AddressLine+\"  CityName :\"+CityName+\"  street :\"+street);\r\r                Log.w(TAG,\"state :\"+state+\" \"+\"country :\"+country+\"subLocality :\"+subLocality+\"  postalcode :\"+postalcode);\r            }\r        } catch (IOException e) {\r            Log.e(\"tag\", Objects.requireNonNull(e.getMessage()));\r        }\r\r        result.toString();\r    }\r\r\r    @SuppressLint({\"LongLogTag\", \"LogNotTimber\"})\r    private void spDetailsReponseByUserIdCall() {\r        avi_indicator.setVisibility(View.VISIBLE);\r        avi_indicator.smoothToShow();\r        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);\r        Call<ServiceProviderRegisterFormCreateResponse> call = apiInterface.spDetailsReponseByUserIdCall(RestUtils.getContentType(), spDetailsByUserIdRequest());\r        Log.w(TAG,\"spDetailsReponseByUserIdCall url  :%s\"+\" \"+ call.request().url().toString());\r\r        call.enqueue(new Callback<ServiceProviderRegisterFormCreateResponse>() {\r            @SuppressLint({\"LongLogTag\", \"LogNotTimber\"})\r            @Override\r            public void onResponse(@NonNull Call<ServiceProviderRegisterFormCreateResponse> call, @NonNull Response<ServiceProviderRegisterFormCreateResponse> response) {\r\r                Log.w(TAG,\"spDetailsReponseByUserIdCall\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                avi_indicator.smoothToHide();\r                if (response.body() != null) {\r                    if(response.body().getCode() == 200){\r                        if(response.body().getData() != null) {\r                            _id = response.body().getData().get_id();\r                            spServiceListEdit = response.body().getData().getBus_service_list();\r                            spSpecialzationListEdit = response.body().getData().getBus_spec_list();\r                            latitude = response.body().getData().getSp_lat();\r                            longitude = response.body().getData().getSp_long();\r                            AddressLine = response.body().getData().getSp_loc();\r                            if(AddressLine != null){\r                                txt_address.setText(AddressLine);\r                            }\r                            Bundle extras = getIntent().getExtras();\r                            if (extras != null) {\r                                latlng = String.valueOf(getIntent().getSerializableExtra(\"latlng\"));\r                                Log.w(TAG,\"latlng-->\"+ latlng);\r                                if(latlng != null && !latlng.equalsIgnoreCase(\"null\")){\r                                    String newString = latlng.replace(\"lat/lng:\", \"\");\r                                    Log.w(TAG,\"latlng==\"+newString);\r\r                                    String latlngs = newString.trim().replaceAll(\"\\\\(\", \"\").replaceAll(\"\\\\)\",\"\").trim();\r                                    Log.w(TAG,\"latlngs==\"+latlngs);\r                                    String[] separated = latlngs.split(\",\");\r                                    String lat = separated[0];\r                                    String lon = separated[1];\r\r                                    latitude = Double.parseDouble(lat);\r                                    longitude = Double.parseDouble(lon);\r                                }\r\r\r\r                                CityName = extras.getString(\"cityname\");\r                                AddressLine = extras.getString(\"address\");\r                                String postalCode = extras.getString(\"PostalCode\");\r\r\r                                if(AddressLine != null) {\r                                    txt_address.setText(AddressLine);\r                                    isSetAddress = true;\r                                }\r\r\r\r\r\r                            }\r                            if(response.body().getData().getBussiness_name() != null){\r                                edt_business_name.setText(response.body().getData().getBussiness_name());\r                            } if(response.body().getData().getSp_info() != null){\r                                edt_aboutsp.setText(response.body().getData().getSp_info());\r                            }\r\r                            if(response.body().getData().getBus_service_gall() != null){\r                                bus_service_gall_list_edit = response.body().getData().getBus_service_gall();\r\r                                for(int i=0;i<bus_service_gall_list_edit.size();i++){\r                                    ServiceProviderRegisterFormCreateRequest.BusServiceGallBean busServiceGallBean = new ServiceProviderRegisterFormCreateRequest.BusServiceGallBean();\r                                    busServiceGallBean.setBus_service_gall(bus_service_gall_list_edit.get(i).getBus_service_gall());\r                                    bus_service_gall_list.add(busServiceGallBean);\r                                }\r\r                                if(bus_service_gall_list!=null&&bus_service_gall_list.size()>0){\r\r                                    editServiceImageListAdapter = new EditServiceImageListAdapter(getApplicationContext(), bus_service_gall_list_edit,bus_service_gall_list);\r                                    rcylr_choosen_service_img.setAdapter(editServiceImageListAdapter);\r\r\r                                }\r\r                                else {\r\r                                    rcylr_choosen_service_img.setVisibility(View.GONE);\r\r                                }\r\r\r\r                            }\r                            if(response.body().getData().getBus_profile() != null){\r                                photoIdPic = response.body().getData().getBus_profile();\r                                DocBusInfoUploadRequest.PhotoIdPicBean photoIdPicBean = new DocBusInfoUploadRequest.PhotoIdPicBean(photoIdPic);\r                                photoIdPicBeans.add(photoIdPicBean);\r                                Log.w(TAG,\"photoIdPicBeans\"+ \"--->\" + new Gson().toJson(photoIdPicBeans));\r                                if(photoIdPicBeans!=null&&photoIdPicBeans.size()>0){\r                                    editPhotoIDPdfAdapter = new EditPhotoIDPdfAdapter(getApplicationContext(), photoIdPicBeans);\r                                    recylerView_choosen_photo_id_images.setAdapter(editPhotoIDPdfAdapter);\r                                }\r                                else {\r\r                                    recylerView_choosen_photo_id_images.setVisibility(View.GONE);\r                                }\r\r                            }\r                            if(response.body().getData().getBus_proof() != null){\r                                govtIdPic = response.body().getData().getBus_proof();\r                                DocBusInfoUploadRequest.GovtIdPicBean govtIdPicBean = new DocBusInfoUploadRequest.GovtIdPicBean(govtIdPic);\r                                govtIdPicBeans.add(govtIdPicBean);\r\r                                    editGovtIdPdfAdapter = new EditGovtIdPdfAdapter(getApplicationContext(), govtIdPicBeans);\r                                    recylerView_choosen_govtid_images.setAdapter(editGovtIdPdfAdapter);\r                                }\r                                else {\r\r                                    recylerView_choosen_govtid_images.setVisibility(View.GONE);\r                                }\r                            }\r                            if(response.body().getData().getBus_certif() != null){\r                                bus_certif_list_edit = response.body().getData().getBus_certif();\r                                for(int i=0;i<bus_certif_list_edit.size();i++){\r                                    ServiceProviderRegisterFormCreateRequest.BusCertifBean busCertifBean = new ServiceProviderRegisterFormCreateRequest.BusCertifBean();\r                                    busCertifBean.setBus_certif(bus_certif_list_edit.get(i).getBus_certif());\r                                    bus_certif_list.add(busCertifBean);\r                                }if(govtIdPicBeans!=null&&govtIdPicBeans.size()>0){\r\r                                    editCertPdfAdapter = new EditCertPdfAdapter(getApplicationContext(), bus_certif_list_edit,bus_certif_list);\r                                recylerView_choosen_certificate_images.setAdapter(editCertPdfAdapter);\r                            }\r                                else {\r\r                                    recylerView_choosen_certificate_images.setVisibility(View.GONE);\r                                }\r                        }\r\r\r\r\r\r                    }\r                    else{\r                        showErrorLoading(response.body().getMessage());\r                    }\r                }\r\r                if (new ConnectionDetector(ServiceProviderEditFormActivity.this).isNetworkAvailable(ServiceProviderEditFormActivity.this)) {\r                    SPServiceListResponseCall();\r\r                }\r\r\r            }\r\r            @SuppressLint(\"LongLogTag\")\r            @Override\r            public void onFailure(@NonNull Call<ServiceProviderRegisterFormCreateResponse> call, @NonNull Throwable t) {\r\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"spDetailsReponseByUserIdCall flr\"+\"--->\" + t.getMessage());\r            }\r        });\r\r    }\r    @SuppressLint(\"LongLogTag\")\r    private SPDetailsByUserIdRequest spDetailsByUserIdRequest() {\r        /*\r         * user_id : 5fc61b82b750da703e48da78\r\r         */\r\r        SPDetailsByUserIdRequest spDetailsByUserIdRequest = new SPDetailsByUserIdRequest();\r        spDetailsByUserIdRequest.setUser_id(user_id);\r        Log.w(TAG,\"spDetailsByUserIdRequest\"+ \"--->\" + new Gson().toJson(spDetailsByUserIdRequest));\r        return spDetailsByUserIdRequest;\r    }\r\r    @SuppressLint(\"LongLogTag\")\r    private void showAddAmount(int position) {\r        try {\r            Log.w(TAG,\"showAddAmount : \"+\"position : \"+position);\r            Dialog dialog = new Dialog(ServiceProviderEditFormActivity.this);\r            dialog.setContentView(R.layout.alert_add_sp_amout_layout);\r            dialog.setCancelable(false);\r            Button btn_add = dialog.findViewById(R.id.btn_add);\r            Spinner spr_timeslottype = dialog.findViewById(R.id.spr_timeslottype);\r            ImageView img_close = dialog.findViewById(R.id.img_close);\r            EditText edt_amount = dialog.findViewById(R.id.edt_amount);\r            edt_amount.setTransformationMethod(new NumericKeyBoardTransformationMethod());\r            ArrayList<String> timetypeArrayList = new ArrayList<>();\r            //timetypeArrayList.add(\"Select Time Type\");\r            if(spTimeList != null && spTimeList.size()>0){\r                for (int i = 0; i < spTimeList.size(); i++) {\r                    String timeType = spTimeList.get(i).getTime();\r                    timetypeArrayList.add(timeType);\r                    ArrayAdapter<String> spinnerArrayAdapter = new ArrayAdapter<>(ServiceProviderEditFormActivity.this, R.layout.spinner_item, timetypeArrayList);\r                    spinnerArrayAdapter.setDropDownViewResource(R.layout.spinner_item); // The drop down view\r                    spr_timeslottype.setAdapter(spinnerArrayAdapter);\r\r\r                }\r\r            }\r\r            spr_timeslottype.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r                @SuppressLint(\"LongLogTag\")\r                @Override\r                public void onItemSelected(AdapterView<?> parent, View view, int arg2, long arg3) {\r                    String  strTimeslot = spr_timeslottype.getSelectedItem().toString();\r                    Log.w(TAG,\"strTimeslot : \"+strTimeslot);\r\r                    spServiceList.get(position).setTime_slots(strTimeslot);\r\r\r                }\r\r                @Override\r                public void onNothingSelected(AdapterView<?> arg0) {\r                    // TODO Auto-generated method stub\r\r                }\r            });\r            btn_add.setOnClickListener(new View.OnClickListener() {\r                @SuppressLint(\"LongLogTag\")\r                @Override\r                public void onClick(View view) {\r                    if(edt_amount.getText().toString().isEmpty()){\r                        Toasty.warning(getApplicationContext(),\"Please enter the service amount\",Toast.LENGTH_SHORT).show();\r\r\r                    }else{\r                        spServiceList.get(position).setAmount(Integer.parseInt(edt_amount.getText().toString()));\r                        spServiceList.get(position).setChbxChecked(true);\r                        spServiceList.get(position).setValueAdded(true);\r                        // bus_service_list.get(position).setAmount(Integer.valueOf(edt_amount.getText().toString()));\r                        spServiceListEditAdapter.notifyItemChanged(position);\r\r\r\r\r                        ServiceProviderRegisterFormCreateRequest.BusServiceListBean busServiceListBean = new ServiceProviderRegisterFormCreateRequest.BusServiceListBean();\r                        busServiceListBean.setBus_service_list(spServiceList.get(position).getService_list());\r                        busServiceListBean.setTime_slots(spServiceList.get(position).getTime_slots());\r                        busServiceListBean.setAmount(spServiceList.get(position).getAmount());\r                        bus_service_list.add(busServiceListBean);\r\r                        Log.w(TAG + \" onItemSPServiceCheck added_service_list\",new Gson().toJson(bus_service_list));\r\r                    }\r\r                    dialog.dismiss();\r\r                }\r            });\r\r            img_close.setOnClickListener(new View.OnClickListener() {\r                @Override\r                public void onClick(View v) {\r                    Log.w(TAG,\"img_close : \"+\"position : \"+position);\r\r                    if(spServiceList != null && spServiceList.size()>0){\r                        spServiceList.get(position).setValueAdded(false);\r                        spServiceList.get(position).setChbxChecked(false);\r                        spServiceListEditAdapter.notifyItemChanged(position);\r                        Log.w(TAG,\"img_close : \"+\"notifyItemChanged position : \"+position);\r                    }\r                    Log.w(TAG,\"img_close spServiceList : \"+new Gson().toJson(spServiceList));\r                    dialog.dismiss();\r\r                }\r            });\r            Objects.requireNonNull(dialog.getWindow()).setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r            dialog.show();\r\r        } catch (WindowManager.BadTokenException e) {\r            e.printStackTrace();\r        }\r\r\r\r\r    }\r\r\r    private void showRegisterSuccessalert(String message) {\r        try {\r\r            dialog = new Dialog(ServiceProviderEditFormActivity.this);\r            dialog.setCancelable(false);\r            dialog.setContentView(R.layout.alert_register_update);\r            TextView txt_success_msg = dialog.findViewById(R.id.txt_success_msg);\r            Button btn_back_to_profile = dialog.findViewById(R.id.btn_back_to_profile);\r            txt_success_msg.setText(message);\r            btn_back_to_profile.setOnClickListener(new View.OnClickListener() {\r                @Override\r                public void onClick(View view) {\r                    startActivity(new Intent(ServiceProviderEditFormActivity.this,SPProfileScreenActivity.class));\r                    finish();\r                    dialog.dismiss();\r\r                }\r            });\r            Objects.requireNonNull(dialog.getWindow()).setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r            dialog.show();\r\r        } catch (WindowManager.BadTokenException e) {\r            e.printStackTrace();\r        }\r\r\r\r\r    }\r\r\r\r}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/petfolio/infinituss/serviceprovider/ServiceProviderEditFormActivity.java b/app/src/main/java/com/petfolio/infinituss/serviceprovider/ServiceProviderEditFormActivity.java
--- a/app/src/main/java/com/petfolio/infinituss/serviceprovider/ServiceProviderEditFormActivity.java	(revision f1734ca40ba206b2d8b7b0e5c5470841991c7822)
+++ b/app/src/main/java/com/petfolio/infinituss/serviceprovider/ServiceProviderEditFormActivity.java	(date 1632498661305)
@@ -1,5 +1,7 @@
 package com.petfolio.infinituss.serviceprovider;
 
+import static android.os.Environment.DIRECTORY_DOCUMENTS;
+
 import android.Manifest;
 import android.annotation.SuppressLint;
 import android.app.Activity;
@@ -19,9 +21,11 @@
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
+import android.os.Environment;
 import android.os.Handler;
 import android.provider.MediaStore;
 import android.provider.OpenableColumns;
+import android.text.TextUtils;
 import android.util.Log;
 import android.view.View;
 import android.view.WindowManager;
@@ -51,6 +55,7 @@
 import com.google.android.gms.common.api.GoogleApiClient;
 import com.google.android.gms.common.api.PendingResult;
 import com.google.android.gms.common.api.Status;
+import com.google.android.gms.common.util.IOUtils;
 import com.google.android.gms.location.LocationListener;
 import com.google.android.gms.location.LocationRequest;
 import com.google.android.gms.location.LocationServices;
@@ -95,12 +100,13 @@
 import com.petfolio.infinituss.sessionmanager.SessionManager;
 import com.petfolio.infinituss.utils.ConnectionDetector;
 import com.petfolio.infinituss.utils.RestUtils;
-import com.theartofdev.edmodo.cropper.CropImage;
+import com.canhub.cropper.CropImage;
 import com.wang.avi.AVLoadingIndicatorView;
 
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.OutputStream;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
@@ -1393,7 +1399,7 @@
             if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {
                 CropImage.ActivityResult result = CropImage.getActivityResult(data);
                 if (resultCode == RESULT_OK) {
-                    Uri resultUri = result.getUri();
+                    Uri resultUri = result.getUriContent();
 
                     if (resultUri != null) {
 
@@ -1403,7 +1409,7 @@
 
                         Log.w("filename", " " + filename);
 
-                        String filePath = FileUtil.getPath(ServiceProviderEditFormActivity.this, resultUri);
+                        String filePath = getFilePathFromURI(ServiceProviderEditFormActivity.this, resultUri);
 
                         assert filePath != null;
 
@@ -2511,29 +2517,52 @@
                 .show();
     }
 
-    public String getFileName(Uri uri) {
-        String result = null;
-        if (Objects.requireNonNull(uri.getScheme()).equals("content")) {
-            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {
-                if (cursor != null && cursor.moveToFirst()) {
-                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));
-                }
+    public static String getFilePathFromURI(Context context, Uri contentUri) {
+        //copy file and send new file path
+        String fileName = getFileName(contentUri);
+        if (!TextUtils.isEmpty(fileName)) {
+
+            String path = Environment.getExternalStoragePublicDirectory(DIRECTORY_DOCUMENTS).getPath() + "/" + "MyFirstApp/";
+            // Create the parent path
+            File dir = new File(path);
+            if (!dir.exists()) {
+                dir.mkdirs();
             }
+
+            String fullName = path + "mylog";
+            File copyFile = new File (fullName);
+
+            /* File copyFile = new File(Environment.DIRECTORY_DOWNLOADS + File.separator + fileName);*/
+            copy(context, contentUri, copyFile);
+            return copyFile.getAbsolutePath();
         }
-        if (result == null) {
-            result = uri.getPath();
-            int cut = 0;
-            if (result != null) {
-                cut = result.lastIndexOf('/');
-            }
-            if (cut != -1) {
-                if (result != null) {
-                    result = result.substring(cut + 1);
-                }
-            }
+        return null;
+    }
+
+    public static String getFileName(Uri uri) {
+        if (uri == null) return null;
+        String fileName = null;
+        String path = uri.getPath();
+        int cut = path.lastIndexOf('/');
+        if (cut != -1) {
+            fileName = path.substring(cut + 1);
+        }
+        return fileName;
+    }
+
+    public static void copy(Context context, Uri srcUri, File dstFile) {
+        try {
+            InputStream inputStream = context.getContentResolver().openInputStream(srcUri);
+            if (inputStream == null) return;
+            OutputStream outputStream = new FileOutputStream(dstFile);
+            IOUtils.copyStream(inputStream, outputStream);
+            inputStream.close();
+            outputStream.close();
+        } catch (IOException e) {
+            e.printStackTrace();
         }
-        return result;
     }
+
 
 
 
Index: app/src/main/java/com/petfolio/infinituss/adapter/VendorAddCertPdfAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.petfolio.infinituss.adapter;\r\n\r\n\r\nimport android.content.Context;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.petfolio.infinituss.R;\r\nimport com.petfolio.infinituss.requestpojo.VendorRegisterFormCreateRequest;\r\n\r\nimport java.util.List;\r\n\r\npublic class VendorAddCertPdfAdapter extends RecyclerView.Adapter<VendorAddCertPdfAdapter.AddImageListHolder> {\r\n    Context context;\r\n    List<VendorRegisterFormCreateRequest.CertifiBean> bus_certif_list;\r\n    View view;\r\n    String extension;\r\n    public VendorAddCertPdfAdapter(Context context, List<VendorRegisterFormCreateRequest.CertifiBean> bus_certif_list) {\r\n        this.context = context;\r\n        this.bus_certif_list = bus_certif_list;\r\n\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public AddImageListHolder onCreateViewHolder(ViewGroup parent, int viewType) {\r\n        view = LayoutInflater.from(parent.getContext()).inflate(R.layout.adapter_pdf_upload, parent, false);\r\n        return new AddImageListHolder(view);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull AddImageListHolder holder, final int position) {\r\n        final VendorRegisterFormCreateRequest.CertifiBean certificatePicBean = bus_certif_list.get(position);\r\n\r\n        if (certificatePicBean.getCertifi()!= null) {\r\n\r\n            String uri = certificatePicBean.getCertifi();\r\n            if(uri.contains(\".\")) {\r\n                extension = uri.substring(uri.lastIndexOf(\".\"));\r\n\r\n                Log.w(\"extension\",extension);\r\n            }\r\n\r\n        }\r\n        if(extension != null && !extension.isEmpty()) {\r\n            if (extension.equals(\".png\") || extension.equals(\".jpg\") || (extension.equals(\".jpeg\"))) {\r\n                Glide.with(context)\r\n                        .load(certificatePicBean.getCertifi())\r\n                        .into(holder.certificate_pics_1);\r\n\r\n            }\r\n        } else {\r\n\r\n            holder.certificate_pics_1.setImageResource(R.drawable.pdf_icon);\r\n        }\r\n\r\n\r\n\r\n\r\n        holder.removeImg.setOnClickListener(view -> {\r\n            bus_certif_list.remove(position);\r\n            notifyDataSetChanged();\r\n        });\r\n\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return bus_certif_list.size();\r\n    }\r\n\r\n    public static class AddImageListHolder extends RecyclerView.ViewHolder {\r\n        ImageView removeImg,certificate_pics_1;\r\n        public AddImageListHolder(View itemView) {\r\n            super(itemView);\r\n            certificate_pics_1 = itemView.findViewById(R.id.pdf_file);\r\n            removeImg = itemView.findViewById(R.id.close);\r\n        }\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/petfolio/infinituss/adapter/VendorAddCertPdfAdapter.java b/app/src/main/java/com/petfolio/infinituss/adapter/VendorAddCertPdfAdapter.java
--- a/app/src/main/java/com/petfolio/infinituss/adapter/VendorAddCertPdfAdapter.java	(revision f1734ca40ba206b2d8b7b0e5c5470841991c7822)
+++ b/app/src/main/java/com/petfolio/infinituss/adapter/VendorAddCertPdfAdapter.java	(date 1632575983064)
@@ -9,12 +9,15 @@
 import android.widget.ImageView;
 
 import androidx.annotation.NonNull;
+import androidx.cardview.widget.CardView;
 import androidx.recyclerview.widget.RecyclerView;
 
 import com.bumptech.glide.Glide;
 import com.petfolio.infinituss.R;
 import com.petfolio.infinituss.requestpojo.VendorRegisterFormCreateRequest;
 
+import java.net.MalformedURLException;
+import java.net.URL;
 import java.util.List;
 
 public class VendorAddCertPdfAdapter extends RecyclerView.Adapter<VendorAddCertPdfAdapter.AddImageListHolder> {
@@ -22,6 +25,7 @@
     List<VendorRegisterFormCreateRequest.CertifiBean> bus_certif_list;
     View view;
     String extension;
+    URL url;
     public VendorAddCertPdfAdapter(Context context, List<VendorRegisterFormCreateRequest.CertifiBean> bus_certif_list) {
         this.context = context;
         this.bus_certif_list = bus_certif_list;
@@ -39,6 +43,16 @@
     public void onBindViewHolder(@NonNull AddImageListHolder holder, final int position) {
         final VendorRegisterFormCreateRequest.CertifiBean certificatePicBean = bus_certif_list.get(position);
 
+        Log.w("cert_link",certificatePicBean.getCertifi());
+
+        try {
+            url = new URL(certificatePicBean.getCertifi());
+        } catch (MalformedURLException e) {
+            e.printStackTrace();
+        }
+
+        Log.w("url", String.valueOf(url));
+
         if (certificatePicBean.getCertifi()!= null) {
 
             String uri = certificatePicBean.getCertifi();
@@ -47,22 +61,26 @@
 
                 Log.w("extension",extension);
             }
-
-        }
-        if(extension != null && !extension.isEmpty()) {
-            if (extension.equals(".png") || extension.equals(".jpg") || (extension.equals(".jpeg"))) {
-                Glide.with(context)
-                        .load(certificatePicBean.getCertifi())
-                        .into(holder.certificate_pics_1);
+            if(extension != null && !extension.isEmpty()) {
+                if (extension.equals(".png") || extension.equals(".jpg") || (extension.equals(".jpeg"))) {
+                    Glide.with(context)
+                            .load(certificatePicBean.getCertifi())
+                            .into(holder.certificate_pics_1);
 
-            }
-        } else {
+                }else {
 
-            holder.certificate_pics_1.setImageResource(R.drawable.pdf_icon);
-        }
+                    holder.certificate_pics_1.setImageResource(R.drawable.pdf_icon);
+                }
+            } else {
 
+                holder.material_cardview_education_details.setVisibility(View.VISIBLE);
+            }
 
+        }
+        else {
 
+            holder.material_cardview_education_details.setVisibility(View.VISIBLE);
+        }
 
         holder.removeImg.setOnClickListener(view -> {
             bus_certif_list.remove(position);
@@ -78,9 +96,11 @@
 
     public static class AddImageListHolder extends RecyclerView.ViewHolder {
         ImageView removeImg,certificate_pics_1;
+        CardView material_cardview_education_details;
         public AddImageListHolder(View itemView) {
             super(itemView);
             certificate_pics_1 = itemView.findViewById(R.id.pdf_file);
+            material_cardview_education_details = itemView.findViewById(R.id.material_cardview_education_details);
             removeImg = itemView.findViewById(R.id.close);
         }
     }
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"DesignSurface\">\r\n    <option name=\"filePathToZoomLevelMap\">\r\n      <map>\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/drawable/ic_baseline_remove_circle_outline_24.xml\" value=\"0.2175925925925926\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/drawable/light_green_bgm.xml\" value=\"0.2703125\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/drawable/new_solid_bgm.xml\" value=\"0.2703125\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_add_my_address.xml\" value=\"0.16666666666666666\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_add_your_pet.xml\" value=\"0.17753623188405798\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_add_your_pet_image_old_user.xml\" value=\"0.25416666666666665\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_add_your_pet_old_user.xml\" value=\"0.17753623188405798\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_basic_pet_details.xml\" value=\"0.17753623188405798\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_book_appointment.xml\" value=\"0.18568840579710144\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_doctor_business_info.xml\" value=\"0.13360507246376813\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_doctor_cart.xml\" value=\"0.13722826086956522\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_doctor_clinic_details.xml\" value=\"0.12360688956433637\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_doctor_dashboard.xml\" value=\"0.13722826086956522\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_doctor_list_of_products.xml\" value=\"0.16394927536231885\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_doctor_prescription_details.xml\" value=\"0.16757246376811594\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_doctor_product_details.xml\" value=\"0.13722826086956522\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_doctor_profile_screen.xml\" value=\"0.17753623188405798\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_edit_doctor_business_info.xml\" value=\"0.17753623188405798\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_edit_your_pet_profile_info.xml\" value=\"0.17753623188405798\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_filters.xml\" value=\"0.13722826086956522\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_login.xml\" value=\"0.18568840579710144\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_manage_products.xml\" value=\"0.13360507246376813\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_notificaton.xml\" value=\"0.12360688956433637\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_pet_lover_edit_profile.xml\" value=\"0.20516304347826086\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_pet_lover_edit_profile_image.xml\" value=\"0.20380434782608695\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_pet_lover_profile_screen.xml\" value=\"0.17119565217391305\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_petappointment_details.xml\" value=\"0.16077898550724637\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_petlover_doctor_choose_payment_method.xml\" value=\"0.18568840579710144\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_petlover_service_choose_payment_method.xml\" value=\"0.18568840579710144\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_petlover_vendor_order_details.xml\" value=\"0.12360688956433637\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_prescription.xml\" value=\"0.18568840579710144\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_product_details.xml\" value=\"0.152\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_search_doctor.xml\" value=\"0.12360688956433637\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_service_provider_dashboard.xml\" value=\"0.12360688956433637\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_service_provider_edit_form.xml\" value=\"0.15217391304347827\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_service_provider_register_form.xml\" value=\"0.13360507246376813\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_sp_profile_screen.xml\" value=\"0.12360688956433637\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_vendor_add_products.xml\" value=\"0.13360507246376813\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/activity_vendor_register_form.xml\" value=\"0.17753623188405798\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/adapter_doctor_missed_appointment.xml\" value=\"0.23505434782608695\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/adapter_doctor_new_appointment.xml\" value=\"0.23505434782608695\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/adapter_mycoupons_cardview.xml\" value=\"0.19293478260869565\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/adapter_nearby_doctors.xml\" value=\"0.18297101449275363\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/adapter_pet_new_appointment.xml\" value=\"0.17119565217391305\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/adapter_petlist.xml\" value=\"0.17119565217391305\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/adapter_prescription_row.xml\" value=\"0.25416666666666665\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/adapter_sp_missed_appointment.xml\" value=\"0.25416666666666665\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/alert_add_sp_amout_layout.xml\" value=\"0.18297101449275363\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/alert_appointment_payment_success_layout.xml\" value=\"0.18297101449275363\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/alert_approve_reject_layout.xml\" value=\"0.18297101449275363\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/alert_cancel_layout.xml\" value=\"0.18297101449275363\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/alert_comingsoon_layout.xml\" value=\"0.18297101449275363\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/alert_diagnosis_layout.xml\" value=\"0.25416666666666665\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/alert_exit_layout.xml\" value=\"0.18297101449275363\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/alert_location_allow_deny_layout.xml\" value=\"0.18297101449275363\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/alert_manage_addresses_layout.xml\" value=\"0.18297101449275363\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/alert_no_internet_layout.xml\" value=\"0.18297101449275363\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/alert_payment_success_layout.xml\" value=\"0.18297101449275363\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/alert_pettype_layout.xml\" value=\"0.18297101449275363\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/alert_profile_update_layout.xml\" value=\"0.18297101449275363\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/alert_register_update.xml\" value=\"0.25416666666666665\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/alert_reschedule_appointment_layout.xml\" value=\"0.18297101449275363\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/alert_return_layout.xml\" value=\"0.18297101449275363\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/alert_sortby_layout.xml\" value=\"0.18297101449275363\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/alert_success_register.xml\" value=\"0.25416666666666665\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/alert_successfulley_cancelled_layout.xml\" value=\"0.18297101449275363\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/alert_yes_no.xml\" value=\"0.17753623188405798\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/content_sp_details.xml\" value=\"0.25416666666666665\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/doctor_bottom_sheet.xml\" value=\"0.25416666666666665\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/doctor_navigation_drawer_layout.xml\" value=\"0.17119565217391305\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/doctor_toolbar_layout.xml\" value=\"0.25416666666666665\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/fragment_doctor_dashboard.xml\" value=\"0.19293478260869565\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/fragment_home_pet_new.xml\" value=\"0.13541666666666666\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/fragment_pet_care.xml\" value=\"0.18297101449275363\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/fragment_shop_vendor.xml\" value=\"0.12360688956433637\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/navigation_drawer_layout_new.xml\" value=\"0.17119565217391305\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/petcare_bottom_sheet.xml\" value=\"0.13722826086956522\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/product_details_bottom_sheet.xml\" value=\"0.25416666666666665\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/row.xml\" value=\"0.18568840579710144\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/spverify_popup_layout.xml\" value=\"0.25416666666666665\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/toolbar_layout.xml\" value=\"0.25416666666666665\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/toolbar_layout_doctor_footer.xml\" value=\"0.13722826086956522\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/toolbar_layout_vendor_footer.xml\" value=\"0.25416666666666665\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/layout/vendor_navigation_drawer_layout.xml\" value=\"0.13360507246376813\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/menu/navigation_menu_drawer.xml\" value=\"0.25416666666666665\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/menu/navigation_menu_drawer_doctor.xml\" value=\"0.25416666666666665\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/menu/navigation_menu_drawer_sp.xml\" value=\"0.25416666666666665\" />\r\n        <entry key=\"..\\:/TritonAppsGIt/Petfolio_Andriod_Dev/app/src/main/res/menu/navigation_menu_drawer_vendor.xml\" value=\"0.25416666666666665\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"EntryPointsManager\">\r\n    <list size=\"1\">\r\n      <item index=\"0\" class=\"java.lang.String\" itemvalue=\"android.annotation.SuppressLint\" />\r\n    </list>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision f1734ca40ba206b2d8b7b0e5c5470841991c7822)
+++ b/.idea/misc.xml	(date 1632494895097)
@@ -99,7 +99,7 @@
       <item index="0" class="java.lang.String" itemvalue="android.annotation.SuppressLint" />
     </list>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
Index: app/src/main/java/com/petfolio/infinituss/petlover/AddYourPetImageOlduserActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.petfolio.infinituss.petlover;\r\n\r\nimport android.Manifest;\r\nimport android.annotation.SuppressLint;\r\nimport android.annotation.TargetApi;\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.database.Cursor;\r\nimport android.graphics.Bitmap;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.provider.MediaStore;\r\nimport android.provider.OpenableColumns;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.google.gson.Gson;\r\nimport com.petfolio.infinituss.R;\r\nimport com.petfolio.infinituss.adapter.AddPetImageListAdapter;\r\nimport com.petfolio.infinituss.api.APIClient;\r\nimport com.petfolio.infinituss.api.RestApiInterface;\r\nimport com.petfolio.infinituss.appUtils.FileUtil;\r\nimport com.petfolio.infinituss.requestpojo.PetAddImageRequest;\r\nimport com.petfolio.infinituss.responsepojo.FileUploadResponse;\r\nimport com.petfolio.infinituss.responsepojo.PetAddImageResponse;\r\nimport com.petfolio.infinituss.sessionmanager.SessionManager;\r\nimport com.petfolio.infinituss.utils.RestUtils;\r\nimport com.theartofdev.edmodo.cropper.CropImage;\r\nimport com.wang.avi.AVLoadingIndicatorView;\r\n\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.OutputStream;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\nimport butterknife.BindView;\r\nimport butterknife.ButterKnife;\r\nimport cn.pedant.SweetAlert.SweetAlertDialog;\r\nimport es.dmoral.toasty.Toasty;\r\nimport okhttp3.MediaType;\r\nimport okhttp3.MultipartBody;\r\nimport okhttp3.RequestBody;\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.Manifest.permission.CAMERA;\r\nimport static android.Manifest.permission.READ_EXTERNAL_STORAGE;\r\nimport static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;\r\n\r\npublic class AddYourPetImageOlduserActivity extends AppCompatActivity implements View.OnClickListener {\r\n    private  String TAG = \"AddYourPetImageOlduserActivity\";\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.img_back)\r\n    ImageView img_back;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.txt_skip)\r\n    TextView txt_skip;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.img_pet_imge)\r\n    ImageView img_pet_imge;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.avi_indicator)\r\n    AVLoadingIndicatorView avi_indicator;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.txt_uploadpetimage)\r\n    TextView txt_uploadpetimage;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.btn_continue)\r\n    Button btn_continue;\r\n\r\n    private String petid;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.rc_uploaded_pet_images)\r\n    RecyclerView rc_uploaded_pet_images;\r\n\r\n\r\n    public final int REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS = 1;\r\n    private static final String CAMERA_PERMISSION = CAMERA ;\r\n    private static final String READ_EXTERNAL_STORAGE_PERMISSION = READ_EXTERNAL_STORAGE;\r\n    private static final String WRITE_EXTERNAL_STORAGE_PERMISSION = WRITE_EXTERNAL_STORAGE;\r\n\r\n\r\n\r\n\r\n\r\n    private String ServerUrlImagePath;\r\n\r\n    private static final int REQUEST_READ_CLINIC_PIC_PERMISSION = 786;\r\n    private static final int REQUEST_CLINIC_CAMERA_PERMISSION_CODE = 785 ;\r\n\r\n    List<PetAddImageRequest.PetImgBean> pet_img = new ArrayList<>();\r\n    AddPetImageListAdapter addPetImageListAdapter;\r\n\r\n    private static final int SELECT_CLINIC_CAMERA = 1000 ;\r\n\r\n    private static final int SELECT_CLINIC_PICTURE = 1001 ;\r\n    private MultipartBody.Part filePart;\r\n    private String userid;\r\n\r\n    private String selectedAppointmentType = \"Normal\";\r\n    private String selectedVisitType = \"\";\r\n    private String petId;\r\n    private String doctorid;\r\n    private String fromto;\r\n    private String Payment_id = \"\";\r\n    private String Doctor_ava_Date = \"\";\r\n    private String selectedTimeSlot = \"\";\r\n    private int amount;\r\n    private String communicationtype = \"\";\r\n    private String fromactivity;\r\n\r\n    private String spid,catid,from;\r\n    private String spuserid;\r\n    private String selectedServiceTitle;\r\n    private String petcolor;\r\n    private double petweight;\r\n    private String servicetime;\r\n    private int serviceamount;\r\n    private String petage;\r\n    private int distance;\r\n    private String SP_ava_Date;\r\n\r\n\r\n    @SuppressLint(\"LogNotTimber\")\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_add_your_pet_image_old_user);\r\n        Log.w(TAG,\"onCreate \");\r\n        ButterKnife.bind(this);\r\n        avi_indicator.setVisibility(View.GONE);\r\n        btn_continue.setVisibility(View.GONE);\r\n        img_back.setOnClickListener(this);\r\n        txt_skip.setOnClickListener(this);\r\n        btn_continue.setOnClickListener(this);\r\n        txt_uploadpetimage.setOnClickListener(this);\r\n        img_pet_imge.setOnClickListener(this);\r\n\r\n        SessionManager  session = new SessionManager(getApplicationContext());\r\n        HashMap<String, String> user = session.getProfileDetails();\r\n\r\n        userid = user.get(SessionManager.KEY_ID);\r\n\r\n        Bundle extras = getIntent().getExtras();\r\n        if (extras != null) {\r\n            petid = extras.getString(\"petid\");\r\n            doctorid = extras.getString(\"doctorid\");\r\n            fromactivity = extras.getString(\"fromactivity\");\r\n            fromto = extras.getString(\"fromto\");\r\n            Doctor_ava_Date = extras.getString(\"Doctor_ava_Date\");\r\n            selectedTimeSlot = extras.getString(\"selectedTimeSlot\");\r\n            amount = extras.getInt(\"amount\");\r\n            communicationtype = extras.getString(\"communicationtype\");\r\n            petId = extras.getString(\"petId\");\r\n            Log.w(TAG,\"Bundle \"+\" doctorid : \"+doctorid+\" selectedTimeSlot : \"+selectedTimeSlot+\"communicationtype : \"+communicationtype+\" amount : \"+amount+\" fromactivity : \"+fromactivity+\" fromto : \"+fromto);\r\n\r\n            /*PetServiceAppointment_Doctor_Date_Time_Activity*/\r\n            fromactivity = extras.getString(\"fromactivity\");\r\n            spid = extras.getString(\"spid\");\r\n            catid = extras.getString(\"catid\");\r\n            from = extras.getString(\"from\");\r\n            spuserid = extras.getString(\"spuserid\");\r\n            selectedServiceTitle = extras.getString(\"selectedServiceTitle\");\r\n            serviceamount = extras.getInt(\"serviceamount\");\r\n            servicetime = extras.getString(\"servicetime\");\r\n            SP_ava_Date = extras.getString(\"SP_ava_Date\");\r\n            selectedTimeSlot = extras.getString(\"selectedTimeSlot\");\r\n            distance = extras.getInt(\"distance\");\r\n            Log.w(TAG,\"spid : \"+spid +\" catid : \"+catid+\" from : \"+from+\" serviceamount : \"+serviceamount+\" servicetime : \"+servicetime+\" SP_ava_Date : \"+SP_ava_Date+\" selectedTimeSlot : \"+selectedTimeSlot);\r\n\r\n            Log.w(TAG,\"fromactivity : \"+fromactivity+\" from : \"+from);\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @Override\r\n    public void onClick(View v) {\r\n        switch (v.getId()){\r\n            case R.id.img_back:\r\n                onBackPressed();\r\n                break;\r\n                case R.id.txt_skip:\r\n                    gotoPetLoverProfileScreenActivity();\r\n                break;\r\n\r\n                case R.id.txt_uploadpetimage:\r\n                   gotoUplodPetImage();\r\n                break;\r\n\r\n                case R.id.img_pet_imge:\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                    checkMultiplePermissions(REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS, AddYourPetImageOlduserActivity.this);\r\n                }else{\r\n                    choosePetImage();\r\n\r\n                }\r\n                break;\r\n\r\n                case R.id.btn_continue:\r\n                    PetAddImageResponseCall();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private void gotoUplodPetImage() {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n            checkMultiplePermissions(REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS, AddYourPetImageOlduserActivity.this);\r\n        }else{\r\n            choosePetImage();\r\n\r\n        }\r\n    }\r\n\r\n    private void gotoPetLoverProfileScreenActivity() {\r\n        if(fromactivity != null && fromactivity.equalsIgnoreCase(\"AddNewPetActivity\")){\r\n            Intent intent = new Intent(getApplicationContext(), ConsultationActivity.class);\r\n            intent.putExtra(\"doctorid\", doctorid);\r\n            intent.putExtra(\"fromactivity\", TAG);\r\n            intent.putExtra(\"Doctor_ava_Date\", Doctor_ava_Date);\r\n            intent.putExtra(\"selectedTimeSlot\", selectedTimeSlot);\r\n            intent.putExtra(\"amount\", amount);\r\n            intent.putExtra(\"communicationtype\", communicationtype);\r\n            intent.putExtra(\"fromto\", TAG);\r\n            intent.putExtra(\"petId\", petId);\r\n            startActivity(intent);\r\n        }else if(fromactivity != null && fromactivity.equalsIgnoreCase(\"PetServiceAppointment_Doctor_Date_Time_Activity\")){\r\n            Intent intent = new Intent(getApplicationContext(),ConsultationActivity.class);\r\n            intent.putExtra(\"spid\",spid);\r\n            intent.putExtra(\"catid\",catid);\r\n            intent.putExtra(\"from\",from);\r\n            intent.putExtra(\"spuserid\",spuserid);\r\n            intent.putExtra(\"selectedServiceTitle\",selectedServiceTitle);\r\n            intent.putExtra(\"serviceamount\",serviceamount);\r\n            intent.putExtra(\"servicetime\",servicetime);\r\n            intent.putExtra(\"SP_ava_Date\",SP_ava_Date);\r\n            intent.putExtra(\"selectedTimeSlot\",selectedTimeSlot);\r\n            intent.putExtra(\"distance\",distance);\r\n            intent.putExtra(\"fromactivity\",fromactivity);\r\n            intent.putExtra(\"petid\", petid);\r\n            intent.putExtra(\"petId\", petId);\r\n            startActivity(intent);\r\n        }else {\r\n            Intent intent = new Intent(AddYourPetImageOlduserActivity.this, PetLoverProfileScreenActivity.class);\r\n            startActivity(intent);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        super.onBackPressed();\r\n        if(fromactivity != null && fromactivity.equalsIgnoreCase(\"AddNewPetActivity\")){\r\n            Intent intent = new Intent(getApplicationContext(), ConsultationActivity.class);\r\n            intent.putExtra(\"doctorid\", doctorid);\r\n            intent.putExtra(\"fromactivity\", TAG);\r\n            intent.putExtra(\"Doctor_ava_Date\", Doctor_ava_Date);\r\n            intent.putExtra(\"selectedTimeSlot\", selectedTimeSlot);\r\n            intent.putExtra(\"amount\", amount);\r\n            intent.putExtra(\"communicationtype\", communicationtype);\r\n            intent.putExtra(\"fromto\", TAG);\r\n            intent.putExtra(\"petId\", petId);\r\n            startActivity(intent);\r\n        }else{\r\n            startActivity(new Intent(AddYourPetImageOlduserActivity.this, PetLoverProfileScreenActivity.class));\r\n            finish();\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    private void choosePetImage() {\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(AddYourPetImageOlduserActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r\n        {\r\n            requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\n        }\r\n\r\n        else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(AddYourPetImageOlduserActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r\n        {\r\n            requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r\n        }\r\n\r\n        else\r\n        {\r\n\r\n\r\n            CropImage.activity().start(AddYourPetImageOlduserActivity.this);\r\n\r\n            /*CropImage.activity().start(AddYourPetImageOlduserActivity.this);*/\r\n        }\r\n\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        \r\n        try{\r\n            if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {\r\n                CropImage.ActivityResult result = CropImage.getActivityResult(data);\r\n                if (resultCode == RESULT_OK) {\r\n\r\n                    Uri resultUri = result.getUri();\r\n\r\n                    if(resultUri!=null){\r\n\r\n                        Log.w(\"selectedImageUri\", \" \" + resultUri);\r\n\r\n                        String filename = getFileName(resultUri);\r\n\r\n                        Log.w(\"filename\", \" \" + filename);\r\n\r\n                        String filePath = FileUtil.getPath(AddYourPetImageOlduserActivity.this, resultUri);\r\n\r\n                        assert filePath != null;\r\n\r\n                        File file = new File(filePath); // initialize file here\r\n\r\n                        long length = file.length() / 1024; // Size in KB\r\n\r\n                        Log.w(\"filesize\", \" \" + length);\r\n\r\n                        if (length > 2000) {\r\n\r\n                            new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                                    .setTitleText(\"File Size\")\r\n                                    .setContentText(\"Please choose file size less than 2 MB \")\r\n                                    .setConfirmText(\"Ok\")\r\n                                    .show();\r\n                        } else {\r\n\r\n\r\n                            SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r\n                            String currentDateandTime = sdf.format(new Date());\r\n\r\n                            filePart = MultipartBody.Part.createFormData(\"sampleFile\", userid + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\n\r\n                            uploadPetImage();\r\n\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                    else {\r\n\r\n                        Toasty.warning(AddYourPetImageOlduserActivity.this,\"Image Error!!Please upload Some other image\",Toasty.LENGTH_LONG).show();\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            //\tToast.makeText(getActivity(),\"kk\",Toast.LENGTH_SHORT).show();\r\n            if(requestCode== SELECT_CLINIC_PICTURE || requestCode == SELECT_CLINIC_CAMERA) {\r\n\r\n                if(requestCode == SELECT_CLINIC_CAMERA)\r\n                {\r\n                    Bitmap photo = (Bitmap) data.getExtras().get(\"data\");\r\n\r\n                    File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\n\r\n                    OutputStream os;\r\n                    try {\r\n                        os = new FileOutputStream(file);\r\n                        photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r\n                        os.flush();\r\n                        os.close();\r\n                    } catch (Exception e) {\r\n                        Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r\n                    }\r\n                    SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r\n                    String currentDateandTime = sdf.format(new Date());\r\n\r\n                    RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\n\r\n                    filePart = MultipartBody.Part.createFormData(\"sampleFile\",  userid+currentDateandTime+file.getName(), requestFile);\r\n\r\n                    uploadPetImage();\r\n\r\n                }\r\n\r\n                else{\r\n\r\n                    try {\r\n                        if (resultCode == Activity.RESULT_OK)\r\n                        {\r\n\r\n                            Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\n\r\n                            Uri selectedImageUri = data.getData();\r\n\r\n                            Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\n\r\n                            String filename = getFileName(selectedImageUri);\r\n\r\n                            Log.w(\"filename\", \" \" + filename);\r\n\r\n                            String filePath = FileUtil.getPath(AddYourPetImageOlduserActivity.this,selectedImageUri);\r\n\r\n                            assert filePath != null;\r\n\r\n                            File file = new File(filePath); // initialize file here\r\n\r\n                            long length = file.length() / 1024; // Size in KB\r\n\r\n                            Log.w(\"filesize\", \" \" + length);\r\n\r\n                            if(length>2000){\r\n\r\n                                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                                        .setTitleText(\"File Size\")\r\n                                        .setContentText(\"Plz choose file size less than 2 MB \")\r\n                                        .setConfirmText(\"Ok\")\r\n                                        .show();\r\n                            }\r\n\r\n                            else{\r\n\r\n\r\n                                SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r\n                                String currentDateandTime = sdf.format(new Date());\r\n\r\n                                filePart = MultipartBody.Part.createFormData(\"sampleFile\", userid+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\n\r\n                                uploadPetImage();\r\n\r\n                            }\r\n\r\n                        }\r\n                    } catch (Exception e) {\r\n\r\n                        Log.w(\"Exception\", \" \" + e);\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }catch (Exception e){\r\n            Log.w(TAG,\"onActivityResult exception\"+e.toString());\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    private void uploadPetImage() {\r\n\r\n        avi_indicator.show();\r\n\r\n        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\n\r\n\r\n        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(filePart);\r\n\r\n\r\n        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\n\r\n        call.enqueue(new Callback<FileUploadResponse>() {\r\n            @Override\r\n            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r\n                avi_indicator.smoothToHide();\r\n                Log.w(TAG,\"Profpic\"+ \"--->\" + new Gson().toJson(response.body()));\r\n\r\n                if (response.body() != null) {\r\n                    if (200 == response.body().getCode()) {\r\n\r\n                        ServerUrlImagePath = response.body().getData();\r\n                        btn_continue.setVisibility(View.VISIBLE);\r\n\r\n                        Log.w(TAG, \"ServerUrlImagePath \" + ServerUrlImagePath);\r\n\r\n\r\n                        if(pet_img!=null&&pet_img.size()>=3){\r\n\r\n                            Toasty.warning(AddYourPetImageOlduserActivity.this,\"Sorry You can't Upload more than 3\", Toasty.LENGTH_LONG).show();\r\n\r\n                        }\r\n\r\n                        else\r\n                        {\r\n                            PetAddImageRequest.PetImgBean petImgBean = new PetAddImageRequest.PetImgBean();\r\n\r\n                            if(ServerUrlImagePath != null&&!ServerUrlImagePath.isEmpty())\r\n                            {\r\n                                petImgBean.setPet_img(ServerUrlImagePath);\r\n\r\n                                pet_img.add(petImgBean);\r\n\r\n                            }\r\n                            else\r\n                            {\r\n                                petImgBean.setPet_img(APIClient.PROFILE_IMAGE_URL);\r\n\r\n                                pet_img.add(petImgBean);\r\n\r\n                            }\r\n\r\n\r\n                            setView();\r\n\r\n                        }\r\n\r\n\r\n\r\n\r\n                    }\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r\n                // avi_indicator.smoothToHide();\r\n                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r\n                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    private void setView() {\r\n\r\n        rc_uploaded_pet_images.setHasFixedSize(true);\r\n\r\n        rc_uploaded_pet_images.setNestedScrollingEnabled(false);\r\n\r\n        LinearLayoutManager layoutManager = new LinearLayoutManager(AddYourPetImageOlduserActivity.this, LinearLayoutManager.HORIZONTAL, false);\r\n\r\n        rc_uploaded_pet_images.setLayoutManager(layoutManager);\r\n\r\n        addPetImageListAdapter = new AddPetImageListAdapter(this, pet_img);\r\n\r\n        rc_uploaded_pet_images.setAdapter(addPetImageListAdapter);\r\n\r\n    }\r\n\r\n\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.M)\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode,\r\n                                           @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        if (requestCode == REQUEST_READ_CLINIC_PIC_PERMISSION) {\r\n\r\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n\r\n                CropImage.activity().start(AddYourPetImageOlduserActivity.this);\r\n\r\n            } else {\r\n                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                        .setTitleText(\"Permisson Required\")\r\n                        .setContentText(\"Plz Allow Permissions for choosing Images from Gallery \")\r\n                        .setConfirmText(\"Ok\")\r\n                        .setConfirmClickListener(sDialog -> {\r\n\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                                requestPermissions(new String[]{READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r\n                            }\r\n\r\n\r\n                        })\r\n                        .setCancelButton(\"Cancel\", sDialog -> {\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            showWarning(REQUEST_READ_CLINIC_PIC_PERMISSION);\r\n                        })\r\n                        .show();\r\n\r\n            }\r\n\r\n        } else if (requestCode == REQUEST_CLINIC_CAMERA_PERMISSION_CODE) {\r\n\r\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n\r\n                CropImage.activity().start(AddYourPetImageOlduserActivity.this);\r\n\r\n            } else {\r\n                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                        .setTitleText(\"Permisson Required\")\r\n                        .setContentText(\"Plz Allow Camera for taking picture\")\r\n                        .setConfirmText(\"Ok\")\r\n                        .setConfirmClickListener(sDialog -> {\r\n\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                                requestPermissions(new String[]{CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\n                            }\r\n\r\n\r\n                        })\r\n                        .setCancelButton(\"Cancel\", sDialog -> {\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            showWarning(REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\n                        })\r\n                        .show();\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    //check for camera and storage access permissions\r\n    @TargetApi(Build.VERSION_CODES.M)\r\n    private void checkMultiplePermissions(int permissionCode, Context context) {\r\n\r\n        String[] PERMISSIONS = {CAMERA_PERMISSION, READ_EXTERNAL_STORAGE_PERMISSION, WRITE_EXTERNAL_STORAGE_PERMISSION};\r\n        if (!hasPermissions(context, PERMISSIONS)) {\r\n            ActivityCompat.requestPermissions((Activity) context, PERMISSIONS, permissionCode);\r\n        } else {\r\n            choosePetImage();\r\n            // Open your camera here.\r\n        }\r\n    }\r\n    private boolean hasPermissions(Context context, String... permissions) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && context != null && permissions != null) {\r\n            for (String permission : permissions) {\r\n                if (ActivityCompat.checkSelfPermission(context, permission) != PackageManager.PERMISSION_GRANTED) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private void showWarning(int REQUEST_PERMISSION_CODE) {\r\n\r\n        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                .setTitleText(\"Sorry!!\")\r\n                .setContentText(\"You Can't proceed further unless you allow permission\")\r\n                .setConfirmText(\"Ok\")\r\n                .setConfirmClickListener(sDialog -> {\r\n\r\n                    sDialog.dismissWithAnimation();\r\n\r\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)\r\n                    {\r\n                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_PERMISSION_CODE);\r\n                    }\r\n\r\n\r\n                })\r\n                .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r\n                .show();\r\n    }\r\n\r\n    public String getFileName(Uri uri) {\r\n        String result = null;\r\n        if (uri.getScheme().equals(\"content\")) {\r\n            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {\r\n                if (cursor != null && cursor.moveToFirst()) {\r\n                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));\r\n                }\r\n            }\r\n        }\r\n        if (result == null) {\r\n            result = uri.getPath();\r\n            int cut = result.lastIndexOf('/');\r\n            if (cut != -1) {\r\n                result = result.substring(cut + 1);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    @SuppressLint(\"LogNotTimber\")\r\n    private void PetAddImageResponseCall() {\r\n        avi_indicator.setVisibility(View.VISIBLE);\r\n        avi_indicator.smoothToShow();\r\n        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);\r\n        Call<PetAddImageResponse> call = apiInterface.PetAddImageResponseCall(RestUtils.getContentType(), petAddImageRequest());\r\n        Log.w(TAG,\"PetAddImageResponse url  :%s\"+\" \"+ call.request().url().toString());\r\n\r\n        call.enqueue(new Callback<PetAddImageResponse>() {\r\n            @SuppressLint(\"LogNotTimber\")\r\n            @Override\r\n            public void onResponse(@NonNull Call<PetAddImageResponse> call, @NonNull Response<PetAddImageResponse> response) {\r\n\r\n                Log.w(TAG,\"PetAddImageResponse\"+ \"--->\" + new Gson().toJson(response.body()));\r\n\r\n                avi_indicator.smoothToHide();\r\n\r\n                if (response.body() != null) {\r\n                    if(response.body().getCode() == 200){\r\n                        gotoPetLoverProfileScreenActivity();\r\n                    }\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call<PetAddImageResponse> call, @NonNull Throwable t) {\r\n\r\n                avi_indicator.smoothToHide();\r\n                Log.w(TAG,\"PetAddImageResponse flr\"+\"--->\" + t.getMessage());\r\n            }\r\n        });\r\n\r\n    }\r\n    @SuppressLint(\"LogNotTimber\")\r\n    private PetAddImageRequest petAddImageRequest() {\r\n        /*\r\n         * _id : 603e098e2c2b43125f8cb7f8\r\n         * pet_img : [{\"pet_img\":\"http://54.212.108.156:3000/api/uploads/Pic_empty.jpg\"},{\"pet_img\":\"http://54.212.108.156:3000/api/uploads/Pic_empty.jpg\"}]\r\n         */\r\n\r\n        PetAddImageRequest petAddImageRequest = new PetAddImageRequest();\r\n\r\n        petAddImageRequest.set_id(petid);\r\n\r\n        petAddImageRequest.setPet_img(pet_img);\r\n\r\n        Log.w(TAG,\"petAddImageRequest\"+ \"--->\" + new Gson().toJson(petAddImageRequest));\r\n\r\n        return petAddImageRequest;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/petfolio/infinituss/petlover/AddYourPetImageOlduserActivity.java b/app/src/main/java/com/petfolio/infinituss/petlover/AddYourPetImageOlduserActivity.java
--- a/app/src/main/java/com/petfolio/infinituss/petlover/AddYourPetImageOlduserActivity.java	(revision f1734ca40ba206b2d8b7b0e5c5470841991c7822)
+++ b/app/src/main/java/com/petfolio/infinituss/petlover/AddYourPetImageOlduserActivity.java	(date 1632497726807)
@@ -12,8 +12,10 @@
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
+import android.os.Environment;
 import android.provider.MediaStore;
 import android.provider.OpenableColumns;
+import android.text.TextUtils;
 import android.util.Log;
 import android.view.View;
 import android.widget.Button;
@@ -29,6 +31,7 @@
 import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
 
+import com.google.android.gms.common.util.IOUtils;
 import com.google.gson.Gson;
 import com.petfolio.infinituss.R;
 import com.petfolio.infinituss.adapter.AddPetImageListAdapter;
@@ -40,11 +43,13 @@
 import com.petfolio.infinituss.responsepojo.PetAddImageResponse;
 import com.petfolio.infinituss.sessionmanager.SessionManager;
 import com.petfolio.infinituss.utils.RestUtils;
-import com.theartofdev.edmodo.cropper.CropImage;
+import com.canhub.cropper.CropImage;
 import com.wang.avi.AVLoadingIndicatorView;
 
 import java.io.File;
 import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
 import java.io.OutputStream;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
@@ -67,6 +72,7 @@
 import static android.Manifest.permission.CAMERA;
 import static android.Manifest.permission.READ_EXTERNAL_STORAGE;
 import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;
+import static android.os.Environment.DIRECTORY_DOCUMENTS;
 
 public class AddYourPetImageOlduserActivity extends AppCompatActivity implements View.OnClickListener {
     private  String TAG = "AddYourPetImageOlduserActivity";
@@ -333,7 +339,7 @@
                 CropImage.ActivityResult result = CropImage.getActivityResult(data);
                 if (resultCode == RESULT_OK) {
 
-                    Uri resultUri = result.getUri();
+                    Uri resultUri = result.getUriContent();
 
                     if(resultUri!=null){
 
@@ -428,7 +434,7 @@
 
                             Log.w("filename", " " + filename);
 
-                            String filePath = FileUtil.getPath(AddYourPetImageOlduserActivity.this,selectedImageUri);
+                            String filePath = getFilePathFromURI(AddYourPetImageOlduserActivity.this,selectedImageUri);
 
                             assert filePath != null;
 
@@ -689,24 +695,52 @@
                 .show();
     }
 
-    public String getFileName(Uri uri) {
-        String result = null;
-        if (uri.getScheme().equals("content")) {
-            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {
-                if (cursor != null && cursor.moveToFirst()) {
-                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));
-                }
-            }
-        }
-        if (result == null) {
-            result = uri.getPath();
-            int cut = result.lastIndexOf('/');
-            if (cut != -1) {
-                result = result.substring(cut + 1);
-            }
+    public static String getFilePathFromURI(Context context, Uri contentUri) {
+        //copy file and send new file path
+        String fileName = getFileName(contentUri);
+        if (!TextUtils.isEmpty(fileName)) {
+
+            String path = Environment.getExternalStoragePublicDirectory(DIRECTORY_DOCUMENTS).getPath() + "/" + "MyFirstApp/";
+            // Create the parent path
+            File dir = new File(path);
+            if (!dir.exists()) {
+                dir.mkdirs();
+            }
+
+            String fullName = path + "mylog";
+            File copyFile = new File (fullName);
+
+            /* File copyFile = new File(Environment.DIRECTORY_DOWNLOADS + File.separator + fileName);*/
+            copy(context, contentUri, copyFile);
+            return copyFile.getAbsolutePath();
+        }
+        return null;
+    }
+
+    public static String getFileName(Uri uri) {
+        if (uri == null) return null;
+        String fileName = null;
+        String path = uri.getPath();
+        int cut = path.lastIndexOf('/');
+        if (cut != -1) {
+            fileName = path.substring(cut + 1);
+        }
+        return fileName;
+    }
+
+    public static void copy(Context context, Uri srcUri, File dstFile) {
+        try {
+            InputStream inputStream = context.getContentResolver().openInputStream(srcUri);
+            if (inputStream == null) return;
+            OutputStream outputStream = new FileOutputStream(dstFile);
+            IOUtils.copyStream(inputStream, outputStream);
+            inputStream.close();
+            outputStream.close();
+        } catch (IOException e) {
+            e.printStackTrace();
         }
-        return result;
     }
+
 
 
     @SuppressLint("LogNotTimber")
Index: app/src/main/java/com/petfolio/infinituss/adapter/AddPhotoIDPdfAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.petfolio.infinituss.adapter;\r\n\r\n\r\nimport android.content.Context;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.petfolio.infinituss.R;\r\nimport com.petfolio.infinituss.requestpojo.DocBusInfoUploadRequest;\r\n\r\nimport java.util.List;\r\n\r\npublic class AddPhotoIDPdfAdapter extends RecyclerView.Adapter<AddPhotoIDPdfAdapter.AddImageListHolder> {\r\n    Context context;\r\n    List< DocBusInfoUploadRequest.PhotoIdPicBean> photoIdPicBeans;\r\n    View view;\r\n    String extension;\r\n\r\n    public AddPhotoIDPdfAdapter(Context context, List<DocBusInfoUploadRequest.PhotoIdPicBean> photoIdPicBeans) {\r\n        this.context = context;\r\n        this.photoIdPicBeans = photoIdPicBeans;\r\n\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public AddImageListHolder onCreateViewHolder(ViewGroup parent, int viewType) {\r\n        view = LayoutInflater.from(parent.getContext()).inflate(R.layout.adapter_pdf_upload, parent, false);\r\n        return new AddImageListHolder(view);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull AddImageListHolder holder, final int position) {\r\n        final DocBusInfoUploadRequest.PhotoIdPicBean photoIdPicBean = photoIdPicBeans.get(position);\r\n        if (photoIdPicBean.getPhoto_id_pic()!= null) {\r\n\r\n            String uri = photoIdPicBean.getPhoto_id_pic();\r\n            if(uri.contains(\".\")) {\r\n                extension = uri.substring(uri.lastIndexOf(\".\"));\r\n\r\n                Log.w(\"extension\",extension);\r\n            }\r\n\r\n        }\r\n\r\n        if(extension != null && !extension.isEmpty()) {\r\n            if (extension.equals(\".png\") || extension.equals(\".jpg\") || (extension.equals(\".jpeg\"))) {\r\n                Glide.with(context)\r\n                        .load(photoIdPicBean.getPhoto_id_pic())\r\n                        .into(holder.certificate_pics_1);\r\n\r\n            }\r\n        } else {\r\n\r\n            holder.certificate_pics_1.setImageResource(R.drawable.pdf_icon);\r\n        }\r\n\r\n        holder.removeImg.setOnClickListener(view -> {\r\n            photoIdPicBeans.remove(position);\r\n            notifyDataSetChanged();\r\n        });\r\n\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return photoIdPicBeans.size();\r\n    }\r\n\r\n    public static class AddImageListHolder extends RecyclerView.ViewHolder {\r\n        ImageView removeImg,certificate_pics_1;\r\n        public AddImageListHolder(View itemView) {\r\n            super(itemView);\r\n            certificate_pics_1 = itemView.findViewById(R.id.pdf_file);\r\n            removeImg = itemView.findViewById(R.id.close);\r\n        }\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/petfolio/infinituss/adapter/AddPhotoIDPdfAdapter.java b/app/src/main/java/com/petfolio/infinituss/adapter/AddPhotoIDPdfAdapter.java
--- a/app/src/main/java/com/petfolio/infinituss/adapter/AddPhotoIDPdfAdapter.java	(revision f1734ca40ba206b2d8b7b0e5c5470841991c7822)
+++ b/app/src/main/java/com/petfolio/infinituss/adapter/AddPhotoIDPdfAdapter.java	(date 1632582506045)
@@ -9,6 +9,7 @@
 import android.widget.ImageView;
 
 import androidx.annotation.NonNull;
+import androidx.cardview.widget.CardView;
 import androidx.recyclerview.widget.RecyclerView;
 
 import com.bumptech.glide.Glide;
@@ -39,29 +40,68 @@
     @Override
     public void onBindViewHolder(@NonNull AddImageListHolder holder, final int position) {
         final DocBusInfoUploadRequest.PhotoIdPicBean photoIdPicBean = photoIdPicBeans.get(position);
+/*        if (photoIdPicBean.getPhoto_id_pic()!= null) {
+
+            String uri = photoIdPicBean.getPhoto_id_pic();
+            if(uri.contains(".")) {
+                extension = uri.substring(uri.lastIndexOf("."));
+
+                Log.w("extension",extension);
+            }
+
+        }
+
+        if(extension != null && !extension.isEmpty()) {
+            if (extension.equals(".png") || extension.equals(".jpg") || (extension.equals(".jpeg"))) {
+                Glide.with(context)
+                        .load(photoIdPicBean.getPhoto_id_pic())
+                        .into(holder.certificate_pics_1);
+
+            }
+        } else {
+
+            holder.certificate_pics_1.setImageResource(R.drawable.pdf_icon);
+        }*/
+
         if (photoIdPicBean.getPhoto_id_pic()!= null) {
 
             String uri = photoIdPicBean.getPhoto_id_pic();
+
             if(uri.contains(".")) {
+
                 extension = uri.substring(uri.lastIndexOf("."));
 
                 Log.w("extension",extension);
             }
-
-        }
-
-        if(extension != null && !extension.isEmpty()) {
-            if (extension.equals(".png") || extension.equals(".jpg") || (extension.equals(".jpeg"))) {
-                Glide.with(context)
-                        .load(photoIdPicBean.getPhoto_id_pic())
-                        .into(holder.certificate_pics_1);
+            if(extension != null && !extension.isEmpty()) {
+
+                if (extension.equals(".png") || extension.equals(".jpg") || (extension.equals(".jpeg"))) {
+
+
+                    Glide.with(context)
+                            .load(photoIdPicBean.getPhoto_id_pic())
+                            .into(holder.certificate_pics_1);
 
-            }
-        } else {
+                } else {
 
-            holder.certificate_pics_1.setImageResource(R.drawable.pdf_icon);
-        }
+                    holder.certificate_pics_1.setImageResource(R.drawable.pdf_icon);
+                }
 
+            }
+
+            else {
+
+                holder.material_cardview_education_details.setVisibility(View.VISIBLE);
+            }
+
+        }
+
+        else {
+
+            holder.material_cardview_education_details.setVisibility(View.VISIBLE);
+        }
+
+
         holder.removeImg.setOnClickListener(view -> {
             photoIdPicBeans.remove(position);
             notifyDataSetChanged();
@@ -76,9 +116,11 @@
 
     public static class AddImageListHolder extends RecyclerView.ViewHolder {
         ImageView removeImg,certificate_pics_1;
+        CardView material_cardview_education_details;
         public AddImageListHolder(View itemView) {
             super(itemView);
             certificate_pics_1 = itemView.findViewById(R.id.pdf_file);
+            material_cardview_education_details = itemView.findViewById(R.id.material_cardview_education_details);
             removeImg = itemView.findViewById(R.id.close);
         }
     }
Index: app/src/main/java/com/petfolio/infinituss/petlover/EditYourPetImageActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.petfolio.infinituss.petlover;\r\n\r\nimport android.Manifest;\r\nimport android.annotation.SuppressLint;\r\nimport android.annotation.TargetApi;\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.database.Cursor;\r\nimport android.graphics.Bitmap;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.provider.MediaStore;\r\nimport android.provider.OpenableColumns;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.google.gson.Gson;\r\nimport com.petfolio.infinituss.R;\r\nimport com.petfolio.infinituss.adapter.AddPetImageListAdapter;\r\nimport com.petfolio.infinituss.api.APIClient;\r\nimport com.petfolio.infinituss.api.RestApiInterface;\r\nimport com.petfolio.infinituss.appUtils.FileUtil;\r\nimport com.petfolio.infinituss.requestpojo.PetAddImageRequest;\r\nimport com.petfolio.infinituss.responsepojo.FileUploadResponse;\r\nimport com.petfolio.infinituss.responsepojo.PetAddImageResponse;\r\nimport com.petfolio.infinituss.responsepojo.PetListResponse;\r\nimport com.petfolio.infinituss.sessionmanager.SessionManager;\r\nimport com.petfolio.infinituss.utils.RestUtils;\r\nimport com.theartofdev.edmodo.cropper.CropImage;\r\nimport com.wang.avi.AVLoadingIndicatorView;\r\n\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.OutputStream;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\nimport butterknife.BindView;\r\nimport butterknife.ButterKnife;\r\nimport cn.pedant.SweetAlert.SweetAlertDialog;\r\nimport es.dmoral.toasty.Toasty;\r\nimport okhttp3.MediaType;\r\nimport okhttp3.MultipartBody;\r\nimport okhttp3.RequestBody;\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.Manifest.permission.CAMERA;\r\nimport static android.Manifest.permission.READ_EXTERNAL_STORAGE;\r\nimport static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;\r\n\r\npublic class EditYourPetImageActivity extends AppCompatActivity implements View.OnClickListener {\r\n    private  String TAG = \"EditYourPetImageActivity\";\r\n    @BindView(R.id.img_back)\r\n    ImageView img_back;\r\n\r\n    @BindView(R.id.txt_skip)\r\n    TextView txt_skip;\r\n\r\n\r\n    @BindView(R.id.img_pet_imge)\r\n    ImageView img_pet_imge;\r\n\r\n\r\n    @BindView(R.id.avi_indicator)\r\n    AVLoadingIndicatorView avi_indicator;\r\n\r\n    @BindView(R.id.txt_change_petimage)\r\n    TextView txt_change_petimage;\r\n\r\n    @BindView(R.id.btn_continue)\r\n    Button btn_continue;\r\n\r\n    private String petid;\r\n    private String petimage;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.rc_uploaded_pet_images)\r\n    RecyclerView rc_uploaded_pet_images;\r\n\r\n    public final int REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS = 1;\r\n    private static final String CAMERA_PERMISSION = CAMERA ;\r\n    private static final String READ_EXTERNAL_STORAGE_PERMISSION = READ_EXTERNAL_STORAGE;\r\n    private static final String WRITE_EXTERNAL_STORAGE_PERMISSION = WRITE_EXTERNAL_STORAGE;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    private static final int REQUEST_READ_CLINIC_PIC_PERMISSION = 786;\r\n    private static final int REQUEST_CLINIC_CAMERA_PERMISSION_CODE = 785 ;\r\n\r\n\r\n\r\n\r\n    private static final int SELECT_CLINIC_CAMERA = 1000 ;\r\n\r\n    private static final int SELECT_CLINIC_PICTURE = 1001 ;\r\n    private MultipartBody.Part filePart;\r\n    private Object userid;\r\n    List<PetListResponse.DataBean.PetImgBean> petImgBeanList;\r\n    List<PetAddImageRequest.PetImgBean> pet_img = new ArrayList();\r\n    AddPetImageListAdapter addPetImageListAdapter;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_edit_your_pet_image);\r\n        Log.w(TAG,\"onCreate \");\r\n        ButterKnife.bind(this);\r\n        avi_indicator.setVisibility(View.GONE);\r\n        btn_continue.setVisibility(View.VISIBLE);\r\n        img_back.setOnClickListener(this);\r\n        txt_skip.setOnClickListener(this);\r\n        btn_continue.setOnClickListener(this);\r\n        txt_change_petimage.setOnClickListener(this);\r\n        img_pet_imge.setOnClickListener(this);\r\n\r\n        SessionManager  session = new SessionManager(getApplicationContext());\r\n        HashMap<String, String> user = session.getProfileDetails();\r\n\r\n        userid = user.get(SessionManager.KEY_ID);\r\n\r\n        Intent i = getIntent();\r\n\r\n        Bundle args = i.getBundleExtra(\"petimage\");\r\n\r\n        if(args!=null&&!args.isEmpty()){\r\n\r\n            petImgBeanList = (ArrayList<PetListResponse.DataBean.PetImgBean>) args.getSerializable(\"PETLIST\");\r\n        }\r\n\r\n        Log.w(TAG,petImgBeanList.toString());\r\n\r\n        Bundle extras = getIntent().getExtras();\r\n        if (extras != null) {\r\n            petid = extras.getString(\"petid\");\r\n        //    petimage = extras.getString(\"petimage\");\r\n        }\r\n\r\n        for(int j=0; j<petImgBeanList.size();j++){\r\n\r\n            PetAddImageRequest.PetImgBean petImgBean = new PetAddImageRequest.PetImgBean(petImgBeanList.get(j).getPet_img());\r\n\r\n            pet_img.add(petImgBean);\r\n\r\n        }\r\n\r\n//        if(petimage != null){\r\n//            Glide.with(EditYourPetImageActivity.this)\r\n//                    .load(petimage)\r\n//                    .into(img_pet_imge);\r\n//        }else{\r\n//            Glide.with(EditYourPetImageActivity.this)\r\n//                    .load(R.drawable.image_thumbnail)\r\n//                    .into(img_pet_imge);\r\n//\r\n//        }\r\n\r\n        setView();\r\n    }\r\n\r\n    private void setView() {\r\n\r\n        rc_uploaded_pet_images.setHasFixedSize(true);\r\n\r\n        rc_uploaded_pet_images.setNestedScrollingEnabled(false);\r\n\r\n        LinearLayoutManager layoutManager = new LinearLayoutManager(EditYourPetImageActivity.this, LinearLayoutManager.HORIZONTAL, false);\r\n\r\n        rc_uploaded_pet_images.setLayoutManager(layoutManager);\r\n\r\n        addPetImageListAdapter = new AddPetImageListAdapter(this, pet_img);\r\n\r\n        rc_uploaded_pet_images.setAdapter(addPetImageListAdapter);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onClick(View v) {\r\n        switch (v.getId()){\r\n            case R.id.img_back:\r\n                onBackPressed();\r\n                break;\r\n                case R.id.txt_skip:\r\n                    gotoPetLoverProfileScreenActivity();\r\n                break;\r\n                case R.id.txt_change_petimage:\r\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                        checkMultiplePermissions(REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS, EditYourPetImageActivity.this);\r\n                    }else{\r\n                        choosePetImage();\r\n\r\n                    }\r\n                break;\r\n                case R.id.img_pet_imge:\r\n                    changePetImage();\r\n                break;\r\n                case R.id.btn_continue:\r\n                    PetAddImageResponseCall();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private void changePetImage() {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n            checkMultiplePermissions(REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS, EditYourPetImageActivity.this);\r\n        }else{\r\n            choosePetImage();\r\n\r\n        }\r\n    }\r\n\r\n    private void gotoPetLoverProfileScreenActivity() {\r\n        Intent intent = new Intent(EditYourPetImageActivity.this,PetLoverProfileScreenActivity.class);\r\n        startActivity(intent);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        super.onBackPressed();\r\n        startActivity(new Intent(EditYourPetImageActivity.this, PetLoverProfileScreenActivity.class));\r\n        finish();\r\n    }\r\n\r\n\r\n\r\n\r\n    private void choosePetImage() {\r\n\r\n/*\r\n            final CharSequence[] items = {\"Take Photo\", \"Choose from Library\", \"Cancel\"};\r\n            //AlertDialog.Builder alert=new AlertDialog.Builder(this);\r\n            AlertDialog.Builder builder = new AlertDialog.Builder(EditYourPetImageActivity.this);\r\n            builder.setTitle(\"Choose option\");\r\n            builder.setItems(items, (dialog, item) -> {\r\n                if (items[item].equals(\"Take Photo\"))\r\n                {\r\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(EditYourPetImageActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r\n                    {\r\n                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\n                    }\r\n                    else\r\n                    {\r\n\r\n\r\n                        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\n\r\n                        startActivityForResult(intent, SELECT_CLINIC_CAMERA);\r\n                    }\r\n\r\n                }\r\n\r\n                else if (items[item].equals(\"Choose from Library\"))\r\n                {\r\n\r\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(EditYourPetImageActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r\n                    {\r\n                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r\n                    }\r\n\r\n                    else{\r\n\r\n                        Intent intent = new Intent();\r\n                        intent.setType(\"image/*\");\r\n                        intent.setAction(Intent.ACTION_GET_CONTENT);\r\n                        startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_CLINIC_PICTURE);\r\n\r\n\r\n                    }\r\n                }\r\n\r\n                else if (items[item].equals(\"Cancel\")) {\r\n                    dialog.dismiss();\r\n                }\r\n            });\r\n            builder.show();*/\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n\r\n\r\n        try {\r\n            if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {\r\n                CropImage.ActivityResult result = CropImage.getActivityResult(data);\r\n                if (resultCode == RESULT_OK) {\r\n                    Uri resultUri = result.getUri();\r\n\r\n                    if (resultUri != null) {\r\n\r\n                        Log.w(\"selectedImageUri\", \" \" + resultUri);\r\n\r\n                        String filename = getFileName(resultUri);\r\n\r\n                        Log.w(\"filename\", \" \" + filename);\r\n\r\n                        String filePath = FileUtil.getPath(EditYourPetImageActivity.this, resultUri);\r\n\r\n                        assert filePath != null;\r\n\r\n                        File file = new File(filePath); // initialize file here\r\n\r\n                        long length = file.length() / 1024; // Size in KB\r\n\r\n                        Log.w(\"filesize\", \" \" + length);\r\n\r\n                        if (length > 2000) {\r\n\r\n                            new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                                    .setTitleText(\"File Size\")\r\n                                    .setContentText(\"Please choose file size less than 2 MB \")\r\n                                    .setConfirmText(\"Ok\")\r\n                                    .show();\r\n                        } else {\r\n\r\n\r\n                            SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r\n                            String currentDateandTime = sdf.format(new Date());\r\n\r\n                            filePart = MultipartBody.Part.createFormData(\"sampleFile\", userid + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\n\r\n                            uploadPetImage();\r\n\r\n                        }\r\n\r\n\r\n                    } else {\r\n\r\n                        Toasty.warning(EditYourPetImageActivity.this, \"Image Error!!Please upload Some other image\", Toasty.LENGTH_LONG).show();\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n\r\n            if(requestCode== SELECT_CLINIC_PICTURE || requestCode == SELECT_CLINIC_CAMERA)\r\n            {\r\n\r\n                if(requestCode == SELECT_CLINIC_CAMERA)\r\n                {\r\n                    Bitmap photo = (Bitmap) data.getExtras().get(\"data\");\r\n\r\n                    File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\n\r\n                    OutputStream os;\r\n                    try {\r\n                        os = new FileOutputStream(file);\r\n                        photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r\n                        os.flush();\r\n                        os.close();\r\n                    } catch (Exception e) {\r\n                        Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r\n                    }\r\n                    SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r\n                    String currentDateandTime = sdf.format(new Date());\r\n\r\n                    RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\n\r\n                    filePart = MultipartBody.Part.createFormData(\"sampleFile\",  userid+currentDateandTime+file.getName(), requestFile);\r\n\r\n                    uploadPetImage();\r\n\r\n                }\r\n\r\n                else{\r\n\r\n                    try {\r\n                        if (resultCode == Activity.RESULT_OK)\r\n                        {\r\n\r\n                            Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\n\r\n                            Uri selectedImageUri = data.getData();\r\n\r\n                            Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\n\r\n                            String filename = getFileName(selectedImageUri);\r\n\r\n                            Log.w(\"filename\", \" \" + filename);\r\n\r\n                            String filePath = FileUtil.getPath(EditYourPetImageActivity.this,selectedImageUri);\r\n\r\n                            assert filePath != null;\r\n\r\n                            File file = new File(filePath); // initialize file here\r\n\r\n                            long length = file.length() / 1024; // Size in KB\r\n\r\n                            Log.w(\"filesize\", \" \" + length);\r\n\r\n                            SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r\n                            String currentDateandTime = sdf.format(new Date());\r\n\r\n                            filePart = MultipartBody.Part.createFormData(\"sampleFile\", userid+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\n\r\n                            uploadPetImage();\r\n\r\n\r\n                        }\r\n                    } catch (Exception e) {\r\n\r\n                        Log.w(\"Exception\", \" \" + e);\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n\r\n        catch (Exception e){\r\n            Log.w(TAG,\"onActivityResult exception\"+e.toString());\r\n        }\r\n\r\n\r\n        //\tToast.makeText(getActivity(),\"kk\",Toast.LENGTH_SHORT).show();\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    private void uploadPetImage() {\r\n\r\n        avi_indicator.show();\r\n\r\n        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\n\r\n\r\n        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(filePart);\r\n\r\n\r\n        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\n\r\n        call.enqueue(new Callback<FileUploadResponse>() {\r\n            @Override\r\n            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r\n                avi_indicator.smoothToHide();\r\n                Log.w(TAG,\"Profpic\"+ \"--->\" + new Gson().toJson(response.body()));\r\n\r\n                if (response.body() != null) {\r\n                    if (200 == response.body().getCode()) {\r\n\r\n                        petimage = response.body().getData();\r\n                        btn_continue.setVisibility(View.VISIBLE);\r\n\r\n                        Log.w(TAG, \"ServerUrlImagePath \" + petimage);\r\n\r\n                        if(pet_img.size()>=4){\r\n\r\n                            Toasty.warning(EditYourPetImageActivity.this,\"Sorry You can't Upload more than 4\", Toasty.LENGTH_LONG).show();\r\n\r\n                        }\r\n\r\n                        else {\r\n\r\n                            if (petimage != null && !petimage.isEmpty()) {\r\n\r\n                                pet_img.add(new PetAddImageRequest.PetImgBean(petimage));\r\n\r\n                            } else {\r\n\r\n                                pet_img.add(new PetAddImageRequest.PetImgBean(APIClient.PROFILE_IMAGE_URL));\r\n\r\n                            }\r\n\r\n                            setView();\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r\n                // avi_indicator.smoothToHide();\r\n                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r\n                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.M)\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode,\r\n                                           @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        if (requestCode == REQUEST_READ_CLINIC_PIC_PERMISSION) {\r\n\r\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                Intent intent = new Intent();\r\n                intent.setType(\"image/*\");\r\n                intent.setAction(Intent.ACTION_GET_CONTENT);\r\n                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_CLINIC_PICTURE);\r\n\r\n            } else {\r\n                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                        .setTitleText(\"Permisson Required\")\r\n                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r\n                        .setConfirmText(\"Ok\")\r\n                        .setConfirmClickListener(sDialog -> {\r\n\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                                requestPermissions(new String[]{READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r\n                            }\r\n\r\n\r\n                        })\r\n                        .setCancelButton(\"Cancel\", sDialog -> {\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            showWarning(REQUEST_READ_CLINIC_PIC_PERMISSION);\r\n                        })\r\n                        .show();\r\n\r\n            }\r\n\r\n        } else if (requestCode == REQUEST_CLINIC_CAMERA_PERMISSION_CODE) {\r\n\r\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n\r\n                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\n\r\n                startActivityForResult(intent, SELECT_CLINIC_CAMERA);\r\n\r\n            } else {\r\n                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                        .setTitleText(\"Permisson Required\")\r\n                        .setContentText(\"Please Allow Camera for taking picture\")\r\n                        .setConfirmText(\"Ok\")\r\n                        .setConfirmClickListener(sDialog -> {\r\n\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                                requestPermissions(new String[]{CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\n                            }\r\n\r\n\r\n                        })\r\n                        .setCancelButton(\"Cancel\", sDialog -> {\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            showWarning(REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\n                        })\r\n                        .show();\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    //check for camera and storage access permissions\r\n    @TargetApi(Build.VERSION_CODES.M)\r\n    private void checkMultiplePermissions(int permissionCode, Context context) {\r\n\r\n        String[] PERMISSIONS = {CAMERA_PERMISSION, READ_EXTERNAL_STORAGE_PERMISSION, WRITE_EXTERNAL_STORAGE_PERMISSION};\r\n        if (!hasPermissions(context, PERMISSIONS)) {\r\n            ActivityCompat.requestPermissions((Activity) context, PERMISSIONS, permissionCode);\r\n        } else {\r\n            choosePetImage();\r\n            // Open your camera here.\r\n        }\r\n    }\r\n    private boolean hasPermissions(Context context, String... permissions) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && context != null && permissions != null) {\r\n            for (String permission : permissions) {\r\n                if (ActivityCompat.checkSelfPermission(context, permission) != PackageManager.PERMISSION_GRANTED) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private void showWarning(int REQUEST_PERMISSION_CODE) {\r\n\r\n        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                .setTitleText(\"Sorry!!\")\r\n                .setContentText(\"You Can't proceed further unless you allow permission\")\r\n                .setConfirmText(\"Ok\")\r\n                .setConfirmClickListener(sDialog -> {\r\n\r\n                    sDialog.dismissWithAnimation();\r\n\r\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)\r\n                    {\r\n                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_PERMISSION_CODE);\r\n                    }\r\n\r\n\r\n                })\r\n                .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r\n                .show();\r\n    }\r\n\r\n    public String getFileName(Uri uri) {\r\n        String result = null;\r\n        if (uri.getScheme().equals(\"content\")) {\r\n            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {\r\n                if (cursor != null && cursor.moveToFirst()) {\r\n                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));\r\n                }\r\n            }\r\n        }\r\n        if (result == null) {\r\n            result = uri.getPath();\r\n            int cut = result.lastIndexOf('/');\r\n            if (cut != -1) {\r\n                result = result.substring(cut + 1);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    private void PetAddImageResponseCall() {\r\n        avi_indicator.setVisibility(View.VISIBLE);\r\n        avi_indicator.smoothToShow();\r\n        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);\r\n        Call<PetAddImageResponse> call = apiInterface.PetAddImageResponseCall(RestUtils.getContentType(), petAddImageRequest());\r\n        Log.w(TAG,\"PetAddImageResponse url  :%s\"+\" \"+ call.request().url().toString());\r\n\r\n        call.enqueue(new Callback<PetAddImageResponse>() {\r\n            @Override\r\n            public void onResponse(@NonNull Call<PetAddImageResponse> call, @NonNull Response<PetAddImageResponse> response) {\r\n\r\n                Log.w(TAG,\"PetAddImageResponse\"+ \"--->\" + new Gson().toJson(response.body()));\r\n\r\n                avi_indicator.smoothToHide();\r\n\r\n                if (response.body() != null) {\r\n                    if(response.body().getCode() == 200){\r\n                        gotoPetLoverProfileScreenActivity();\r\n                    }\r\n                    else{\r\n                        //showErrorLoading(response.body().getMessage());\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call<PetAddImageResponse> call, @NonNull Throwable t) {\r\n\r\n                avi_indicator.smoothToHide();\r\n                Log.w(TAG,\"PetAddImageResponse flr\"+\"--->\" + t.getMessage());\r\n            }\r\n        });\r\n\r\n    }\r\n    private PetAddImageRequest petAddImageRequest() {\r\n\r\n        PetAddImageRequest petAddImageRequest = new PetAddImageRequest();\r\n\r\n        petAddImageRequest.set_id(petid);\r\n\r\n        petAddImageRequest.setPet_img(pet_img);\r\n\r\n        Log.w(TAG,\"petAddImageRequest\"+ \"--->\" + new Gson().toJson(petAddImageRequest));\r\n        return petAddImageRequest;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/petfolio/infinituss/petlover/EditYourPetImageActivity.java b/app/src/main/java/com/petfolio/infinituss/petlover/EditYourPetImageActivity.java
--- a/app/src/main/java/com/petfolio/infinituss/petlover/EditYourPetImageActivity.java	(revision f1734ca40ba206b2d8b7b0e5c5470841991c7822)
+++ b/app/src/main/java/com/petfolio/infinituss/petlover/EditYourPetImageActivity.java	(date 1632498661282)
@@ -12,8 +12,10 @@
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
+import android.os.Environment;
 import android.provider.MediaStore;
 import android.provider.OpenableColumns;
+import android.text.TextUtils;
 import android.util.Log;
 import android.view.View;
 import android.widget.Button;
@@ -29,6 +31,7 @@
 import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
 
+import com.google.android.gms.common.util.IOUtils;
 import com.google.gson.Gson;
 import com.petfolio.infinituss.R;
 import com.petfolio.infinituss.adapter.AddPetImageListAdapter;
@@ -41,11 +44,13 @@
 import com.petfolio.infinituss.responsepojo.PetListResponse;
 import com.petfolio.infinituss.sessionmanager.SessionManager;
 import com.petfolio.infinituss.utils.RestUtils;
-import com.theartofdev.edmodo.cropper.CropImage;
+import com.canhub.cropper.CropImage;
 import com.wang.avi.AVLoadingIndicatorView;
 
 import java.io.File;
 import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
 import java.io.OutputStream;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
@@ -68,6 +73,7 @@
 import static android.Manifest.permission.CAMERA;
 import static android.Manifest.permission.READ_EXTERNAL_STORAGE;
 import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;
+import static android.os.Environment.DIRECTORY_DOCUMENTS;
 
 public class EditYourPetImageActivity extends AppCompatActivity implements View.OnClickListener {
     private  String TAG = "EditYourPetImageActivity";
@@ -312,7 +318,7 @@
             if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {
                 CropImage.ActivityResult result = CropImage.getActivityResult(data);
                 if (resultCode == RESULT_OK) {
-                    Uri resultUri = result.getUri();
+                    Uri resultUri = result.getUriContent();
 
                     if (resultUri != null) {
 
@@ -322,7 +328,7 @@
 
                         Log.w("filename", " " + filename);
 
-                        String filePath = FileUtil.getPath(EditYourPetImageActivity.this, resultUri);
+                        String filePath = getFilePathFromURI(EditYourPetImageActivity.this, resultUri);
 
                         assert filePath != null;
 
@@ -635,24 +641,52 @@
                 .show();
     }
 
-    public String getFileName(Uri uri) {
-        String result = null;
-        if (uri.getScheme().equals("content")) {
-            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {
-                if (cursor != null && cursor.moveToFirst()) {
-                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));
-                }
-            }
-        }
-        if (result == null) {
-            result = uri.getPath();
-            int cut = result.lastIndexOf('/');
-            if (cut != -1) {
-                result = result.substring(cut + 1);
-            }
+    public static String getFilePathFromURI(Context context, Uri contentUri) {
+        //copy file and send new file path
+        String fileName = getFileName(contentUri);
+        if (!TextUtils.isEmpty(fileName)) {
+
+            String path = Environment.getExternalStoragePublicDirectory(DIRECTORY_DOCUMENTS).getPath() + "/" + "MyFirstApp/";
+            // Create the parent path
+            File dir = new File(path);
+            if (!dir.exists()) {
+                dir.mkdirs();
+            }
+
+            String fullName = path + "mylog";
+            File copyFile = new File (fullName);
+
+            /* File copyFile = new File(Environment.DIRECTORY_DOWNLOADS + File.separator + fileName);*/
+            copy(context, contentUri, copyFile);
+            return copyFile.getAbsolutePath();
+        }
+        return null;
+    }
+
+    public static String getFileName(Uri uri) {
+        if (uri == null) return null;
+        String fileName = null;
+        String path = uri.getPath();
+        int cut = path.lastIndexOf('/');
+        if (cut != -1) {
+            fileName = path.substring(cut + 1);
+        }
+        return fileName;
+    }
+
+    public static void copy(Context context, Uri srcUri, File dstFile) {
+        try {
+            InputStream inputStream = context.getContentResolver().openInputStream(srcUri);
+            if (inputStream == null) return;
+            OutputStream outputStream = new FileOutputStream(dstFile);
+            IOUtils.copyStream(inputStream, outputStream);
+            inputStream.close();
+            outputStream.close();
+        } catch (IOException e) {
+            e.printStackTrace();
         }
-        return result;
     }
+
 
 
     private void PetAddImageResponseCall() {
Index: gradle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Project-wide Gradle settings.\r\n# IDE (e.g. Android Studio) users:\r\n# Gradle settings configured through the IDE *will override*\r\n# any settings specified in this file.\r\n# For more details on how to configure your build environment visit\r\n# http://www.gradle.org/docs/current/userguide/build_environment.html\r\n# Specifies the JVM arguments used for the daemon process.\r\n# The setting is particularly useful for tweaking memory settings.\r\norg.gradle.jvmargs=-Xmx2048m\r\n# When configured, Gradle will run in incubating parallel mode.\r\n# This option should only be used with decoupled projects. More details, visit\r\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\r\n# org.gradle.parallel=true\r\n# AndroidX package structure to make it clearer which packages are bundled with the\r\n# Android operating system, and which are packaged with your app\"s APK\r\n# https://developer.android.com/topic/libraries/support-library/androidx-rn\r\nandroid.useAndroidX=true\r\n# Automatically convert third-party libraries to use AndroidX\r\nandroid.enableJetifier=true
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
diff --git a/gradle.properties b/gradle.properties
--- a/gradle.properties	(revision f1734ca40ba206b2d8b7b0e5c5470841991c7822)
+++ b/gradle.properties	(date 1632494882126)
@@ -6,7 +6,7 @@
 # http://www.gradle.org/docs/current/userguide/build_environment.html
 # Specifies the JVM arguments used for the daemon process.
 # The setting is particularly useful for tweaking memory settings.
-org.gradle.jvmargs=-Xmx2048m
+org.gradle.jvmargs=-Xmx1024m
 # When configured, Gradle will run in incubating parallel mode.
 # This option should only be used with decoupled projects. More details, visit
 # http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
Index: app/src/main/java/com/petfolio/infinituss/petlover/PetLoverEditProfileImageActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.petfolio.infinituss.petlover;\r\n\r\nimport android.Manifest;\r\nimport android.annotation.SuppressLint;\r\nimport android.annotation.TargetApi;\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.database.Cursor;\r\nimport android.graphics.Bitmap;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.provider.MediaStore;\r\nimport android.provider.OpenableColumns;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.google.gson.Gson;\r\nimport com.petfolio.infinituss.R;\r\nimport com.petfolio.infinituss.api.APIClient;\r\nimport com.petfolio.infinituss.api.RestApiInterface;\r\nimport com.petfolio.infinituss.appUtils.FileUtil;\r\nimport com.petfolio.infinituss.requestpojo.DoctorUpdateProfileImageRequest;\r\nimport com.petfolio.infinituss.responsepojo.DoctorUpdateProfileImageResponse;\r\nimport com.petfolio.infinituss.responsepojo.FileUploadResponse;\r\nimport com.petfolio.infinituss.sessionmanager.SessionManager;\r\nimport com.petfolio.infinituss.utils.RestUtils;\r\nimport com.theartofdev.edmodo.cropper.CropImage;\r\nimport com.wang.avi.AVLoadingIndicatorView;\r\n\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.OutputStream;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Locale;\r\nimport java.util.Objects;\r\n\r\nimport butterknife.BindView;\r\nimport butterknife.ButterKnife;\r\nimport cn.pedant.SweetAlert.SweetAlertDialog;\r\nimport es.dmoral.toasty.Toasty;\r\nimport okhttp3.MediaType;\r\nimport okhttp3.MultipartBody;\r\nimport okhttp3.RequestBody;\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.Manifest.permission.CAMERA;\r\nimport static android.Manifest.permission.READ_EXTERNAL_STORAGE;\r\nimport static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;\r\n\r\npublic class PetLoverEditProfileImageActivity extends AppCompatActivity implements View.OnClickListener {\r\n    private  String TAG = \"PetLoverEditProfileImageActivity\";\r\n\r\n    @BindView(R.id.img_back)\r\n    ImageView img_back;\r\n\r\n\r\n\r\n\r\n    @BindView(R.id.img_pet_imge)\r\n    ImageView img_pet_imge;\r\n\r\n\r\n    @BindView(R.id.avi_indicator)\r\n    AVLoadingIndicatorView avi_indicator;\r\n\r\n    @BindView(R.id.txt_uploadpetimage)\r\n    TextView txt_uploadpetimage;\r\n\r\n    @BindView(R.id.btn_continue)\r\n    Button btn_continue;\r\n\r\n\r\n    public final int REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS = 1;\r\n    private static final String CAMERA_PERMISSION = CAMERA ;\r\n    private static final String READ_EXTERNAL_STORAGE_PERMISSION = READ_EXTERNAL_STORAGE;\r\n    private static final String WRITE_EXTERNAL_STORAGE_PERMISSION = WRITE_EXTERNAL_STORAGE;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    private static final int REQUEST_READ_CLINIC_PIC_PERMISSION = 786;\r\n    private static final int REQUEST_CLINIC_CAMERA_PERMISSION_CODE = 785 ;\r\n\r\n\r\n\r\n\r\n    private static final int SELECT_CLINIC_CAMERA = 1000 ;\r\n\r\n    private static final int SELECT_CLINIC_PICTURE = 1001 ;\r\n    private MultipartBody.Part filePart;\r\n    private String userid;\r\n    private String firstname,lastname,useremail;\r\n    private String phonenumber,usertype,userstatus,profileimage;\r\n    private String verifyemailstatus;\r\n    private String refcode;\r\n\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_pet_lover_edit_profile_image);\r\n        Log.w(TAG,\"onCreate \");\r\n        ButterKnife.bind(this);\r\n        avi_indicator.setVisibility(View.GONE);\r\n        btn_continue.setVisibility(View.GONE);\r\n        img_back.setOnClickListener(this);\r\n        btn_continue.setOnClickListener(this);\r\n        txt_uploadpetimage.setOnClickListener(this);\r\n        img_pet_imge.setOnClickListener(this);\r\n\r\n        SessionManager session = new SessionManager(getApplicationContext());\r\n        HashMap<String, String> user = session.getProfileDetails();\r\n        firstname = user.get(SessionManager.KEY_FIRST_NAME);\r\n        lastname = user.get(SessionManager.KEY_LAST_NAME);\r\n        useremail = user.get(SessionManager.KEY_EMAIL_ID);\r\n        phonenumber = user.get(SessionManager.KEY_MOBILE);\r\n        userid = user.get(SessionManager.KEY_ID);\r\n        usertype = user.get(SessionManager.KEY_TYPE);\r\n        userstatus = user.get(SessionManager.KEY_PROFILE_STATUS);\r\n        profileimage = user.get(SessionManager.KEY_PROFILE_IMAGE);\r\n        verifyemailstatus = user.get(SessionManager.KEY_VERIFY_EMAIL_STATUS);\r\n        refcode = user.get(SessionManager.KEY_REF_CODE);\r\n\r\n        if(profileimage != null && !profileimage.isEmpty()){\r\n            Glide.with(PetLoverEditProfileImageActivity.this)\r\n                    .load(profileimage)\r\n                    .into(img_pet_imge);\r\n            txt_uploadpetimage.setText(\"Change Image\");\r\n        }\r\n        else{\r\n            Glide.with(PetLoverEditProfileImageActivity.this)\r\n                    .load(R.drawable.image_thumbnail)\r\n                    .into(img_pet_imge);\r\n            txt_uploadpetimage.setText(\"Upload Image\");\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    @SuppressLint({\"NonConstantResourceId\", \"ObsoleteSdkInt\"})\r\n    @Override\r\n    public void onClick(View v) {\r\n        switch (v.getId()){\r\n            case R.id.img_back:\r\n                onBackPressed();\r\n                break;\r\n\r\n\r\n            case R.id.txt_uploadpetimage:\r\n                gotoUplodPetLoverImage();\r\n                break;\r\n\r\n            case R.id.img_pet_imge:\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                    checkMultiplePermissions(PetLoverEditProfileImageActivity.this);\r\n                }else{\r\n                    choosePetLoverImage();\r\n\r\n                }\r\n                break;\r\n\r\n            case R.id.btn_continue:\r\n                petLoverUpdateProfileImageResponseCall();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private void gotoUplodPetLoverImage() {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n            checkMultiplePermissions(PetLoverEditProfileImageActivity.this);\r\n        }else{\r\n            choosePetLoverImage();\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        super.onBackPressed();\r\n         startActivity(new Intent(PetLoverEditProfileImageActivity.this, PetLoverProfileScreenActivity.class));\r\n        finish();\r\n    }\r\n\r\n\r\n\r\n\r\n    private void choosePetLoverImage() {\r\n\r\n\r\n      /*  final CharSequence[] items = {\"Take Photo\", \"Choose from Library\", \"Cancel\"};\r\n        //AlertDialog.Builder alert=new AlertDialog.Builder(this);\r\n        AlertDialog.Builder builder = new AlertDialog.Builder(PetLoverEditProfileImageActivity.this);\r\n        builder.setTitle(\"Choose option\");\r\n        builder.setItems(items, (dialog, item) -> {\r\n            if (items[item].equals(\"Take Photo\"))\r\n            {\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(PetLoverEditProfileImageActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r\n                {\r\n                    requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\n                }\r\n                else\r\n                {\r\n\r\n\r\n                    Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\n\r\n                    startActivityForResult(intent, SELECT_CLINIC_CAMERA);\r\n                }\r\n\r\n            }\r\n\r\n            else if (items[item].equals(\"Choose from Library\"))\r\n            {\r\n\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(PetLoverEditProfileImageActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r\n                {\r\n                    requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r\n                }\r\n\r\n                else{\r\n\r\n                    Intent intent = new Intent();\r\n                    intent.setType(\"image/*\");\r\n                    intent.setAction(Intent.ACTION_GET_CONTENT);\r\n                    startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_CLINIC_PICTURE);\r\n\r\n\r\n                }\r\n            }\r\n\r\n            else if (items[item].equals(\"Cancel\")) {\r\n                dialog.dismiss();\r\n            }\r\n        });\r\n        builder.show();*/\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(PetLoverEditProfileImageActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r\n        {\r\n            requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\n        }\r\n\r\n        else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(PetLoverEditProfileImageActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r\n        {\r\n            requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r\n        }\r\n\r\n        else\r\n        {\r\n\r\n\r\n            CropImage.activity().start(PetLoverEditProfileImageActivity.this);\r\n\r\n            /*CropImage.activity().start(AddYourPetImageOlduserActivity.this);*/\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    @SuppressLint(\"LogNotTimber\")\r\n    @Override\r\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n\r\n\r\n        try {\r\n            if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {\r\n                CropImage.ActivityResult result = CropImage.getActivityResult(data);\r\n                if (resultCode == RESULT_OK) {\r\n                    Uri resultUri = result.getUri();\r\n\r\n                    if (resultUri != null) {\r\n\r\n                        Log.w(\"selectedImageUri\", \" \" + resultUri);\r\n\r\n                        String filename = getFileName(resultUri);\r\n\r\n                        Log.w(\"filename\", \" \" + filename);\r\n\r\n                        String filePath = FileUtil.getPath(PetLoverEditProfileImageActivity.this, resultUri);\r\n\r\n                        assert filePath != null;\r\n\r\n                        File file = new File(filePath); // initialize file here\r\n\r\n                        long length = file.length() / 1024; // Size in KB\r\n\r\n                        Log.w(\"filesize\", \" \" + length);\r\n\r\n                        if (length > 2000) {\r\n\r\n                            new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                                    .setTitleText(\"File Size\")\r\n                                    .setContentText(\"Please choose file size less than 2 MB \")\r\n                                    .setConfirmText(\"Ok\")\r\n                                    .show();\r\n                        } else {\r\n\r\n\r\n                            SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r\n                            String currentDateandTime = sdf.format(new Date());\r\n\r\n                            filePart = MultipartBody.Part.createFormData(\"sampleFile\", userid + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\n\r\n                            uploadProfileImage();\r\n\r\n                        }\r\n\r\n\r\n                    } else {\r\n\r\n                        Toasty.warning(PetLoverEditProfileImageActivity.this, \"Image Error!!Please upload Some other image\", Toasty.LENGTH_LONG).show();\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n            if(requestCode== SELECT_CLINIC_PICTURE || requestCode == SELECT_CLINIC_CAMERA)\r\n            {\r\n\r\n                if(requestCode == SELECT_CLINIC_CAMERA)\r\n                {\r\n                    Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get(\"data\");\r\n\r\n                    File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\n\r\n                    OutputStream os;\r\n                    try {\r\n                        os = new FileOutputStream(file);\r\n                        photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r\n                        os.flush();\r\n                        os.close();\r\n                    } catch (Exception e) {\r\n                        Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r\n                    }\r\n                    SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r\n                    String currentDateandTime = sdf.format(new Date());\r\n\r\n                    RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\n\r\n                    filePart = MultipartBody.Part.createFormData(\"sampleFile\",  userid+currentDateandTime+file.getName(), requestFile);\r\n\r\n                    uploadProfileImage();\r\n\r\n                }\r\n\r\n                else{\r\n\r\n                    try {\r\n                        if (resultCode == Activity.RESULT_OK)\r\n                        {\r\n\r\n                            Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\n\r\n                            Uri selectedImageUri = data.getData();\r\n\r\n                            Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\n\r\n                            String filename = getFileName(selectedImageUri);\r\n\r\n                            Log.w(\"filename\", \" \" + filename);\r\n\r\n                            String filePath = FileUtil.getPath(PetLoverEditProfileImageActivity.this,selectedImageUri);\r\n\r\n                            assert filePath != null;\r\n\r\n                            File file = new File(filePath); // initialize file here\r\n\r\n                            long length = file.length() / 1024; // Size in KB\r\n\r\n                            Log.w(\"filesize\", \" \" + length);\r\n\r\n                            SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r\n                            String currentDateandTime = sdf.format(new Date());\r\n\r\n                            filePart = MultipartBody.Part.createFormData(\"sampleFile\", userid+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\n\r\n                            uploadProfileImage();\r\n\r\n\r\n                        }\r\n                    } catch (Exception e) {\r\n\r\n                        Log.w(\"Exception\", \" \" + e);\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n            //\tToast.makeText(getActivity(),\"kk\",Toast.LENGTH_SHORT).show();\r\n\r\n          catch (Exception e){\r\n            Log.w(TAG,\"onActivityResult exception\"+e.toString());\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    private void uploadProfileImage() {\r\n\r\n        avi_indicator.show();\r\n\r\n        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\n\r\n\r\n        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(filePart);\r\n\r\n\r\n        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\n\r\n        call.enqueue(new Callback<FileUploadResponse>() {\r\n            @Override\r\n            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r\n                avi_indicator.smoothToHide();\r\n                Log.w(TAG,\"Profpic\"+ \"--->\" + new Gson().toJson(response.body()));\r\n\r\n                if (response.body() != null) {\r\n                    if (200 == response.body().getCode()) {\r\n\r\n                        profileimage = response.body().getData();\r\n                        btn_continue.setVisibility(View.VISIBLE);\r\n\r\n                        Log.w(TAG, \"ServerUrlImagePath \" + profileimage);\r\n\r\n                        if( response.body().getData() != null){\r\n                            Glide.with(PetLoverEditProfileImageActivity.this)\r\n                                    .load(profileimage)\r\n                                    .into(img_pet_imge);\r\n                            txt_uploadpetimage.setText(\"Change Image\");\r\n                        }else{\r\n                            Glide.with(PetLoverEditProfileImageActivity.this)\r\n                                    .load(R.drawable.image_thumbnail)\r\n                                    .into(img_pet_imge);\r\n                            txt_uploadpetimage.setText(\"Upload Image\");\r\n\r\n                        }\r\n\r\n\r\n\r\n                    }\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r\n                // avi_indicator.smoothToHide();\r\n                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r\n                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    @SuppressLint(\"MissingSuperCall\")\r\n    @RequiresApi(api = Build.VERSION_CODES.M)\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode,\r\n                                           @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        if (requestCode == REQUEST_READ_CLINIC_PIC_PERMISSION) {\r\n\r\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                Intent intent = new Intent();\r\n                intent.setType(\"image/*\");\r\n                intent.setAction(Intent.ACTION_GET_CONTENT);\r\n                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_CLINIC_PICTURE);\r\n\r\n            } else {\r\n                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                        .setTitleText(\"Permisson Required\")\r\n                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r\n                        .setConfirmText(\"Ok\")\r\n                        .setConfirmClickListener(sDialog -> {\r\n\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r\n                            }\r\n\r\n\r\n                        })\r\n                        .setCancelButton(\"Cancel\", sDialog -> {\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            showWarning(REQUEST_READ_CLINIC_PIC_PERMISSION);\r\n                        })\r\n                        .show();\r\n\r\n            }\r\n\r\n        }\r\n\r\n        else if (requestCode == REQUEST_CLINIC_CAMERA_PERMISSION_CODE) {\r\n\r\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n\r\n                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\n\r\n                startActivityForResult(intent, SELECT_CLINIC_CAMERA);\r\n\r\n            } else {\r\n                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                        .setTitleText(\"Permisson Required\")\r\n                        .setContentText(\"Please Allow Camera for taking picture\")\r\n                        .setConfirmText(\"Ok\")\r\n                        .setConfirmClickListener(sDialog -> {\r\n\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\n                            }\r\n\r\n\r\n                        })\r\n                        .setCancelButton(\"Cancel\", sDialog -> {\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            showWarning(REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\n                        })\r\n                        .show();\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    //check for camera and storage access permissions\r\n    @TargetApi(Build.VERSION_CODES.M)\r\n    private void checkMultiplePermissions(Context context) {\r\n\r\n        String[] PERMISSIONS = {CAMERA_PERMISSION, READ_EXTERNAL_STORAGE_PERMISSION, WRITE_EXTERNAL_STORAGE_PERMISSION};\r\n        if (!hasPermissions(context, PERMISSIONS)) {\r\n            ActivityCompat.requestPermissions((Activity) context, PERMISSIONS, 1);\r\n        } else {\r\n            choosePetLoverImage();\r\n            // Open your camera here.\r\n        }\r\n    }\r\n    private boolean hasPermissions(Context context, String... permissions) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && context != null && permissions != null) {\r\n            for (String permission : permissions) {\r\n                if (ActivityCompat.checkSelfPermission(context, permission) != PackageManager.PERMISSION_GRANTED) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private void showWarning(int REQUEST_PERMISSION_CODE) {\r\n\r\n        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                .setTitleText(\"Sorry!!\")\r\n                .setContentText(\"You Can't proceed further unless you allow permission\")\r\n                .setConfirmText(\"Ok\")\r\n                .setConfirmClickListener(sDialog -> {\r\n\r\n                    sDialog.dismissWithAnimation();\r\n\r\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)\r\n                    {\r\n                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_PERMISSION_CODE);\r\n                    }\r\n\r\n\r\n                })\r\n                .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r\n                .show();\r\n    }\r\n\r\n    public String getFileName(Uri uri) {\r\n        String result = null;\r\n        if (uri.getScheme().equals(\"content\")) {\r\n            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {\r\n                if (cursor != null && cursor.moveToFirst()) {\r\n                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));\r\n                }\r\n            }\r\n        }\r\n        if (result == null) {\r\n            result = uri.getPath();\r\n            int cut = result.lastIndexOf('/');\r\n            if (cut != -1) {\r\n                result = result.substring(cut + 1);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    private void petLoverUpdateProfileImageResponseCall() {\r\n        avi_indicator.setVisibility(View.VISIBLE);\r\n        avi_indicator.smoothToShow();\r\n        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);\r\n        Call<DoctorUpdateProfileImageResponse> call = apiInterface.DoctorUpdateProfileImageResponseCall(RestUtils.getContentType(), doctorUpdateProfileImageRequest());\r\n        Log.w(TAG,\"petLoverUpdateProfileImageResponseCall url  :%s\"+\" \"+ call.request().url().toString());\r\n\r\n        call.enqueue(new Callback<DoctorUpdateProfileImageResponse>() {\r\n            @Override\r\n            public void onResponse(@NonNull Call<DoctorUpdateProfileImageResponse> call, @NonNull Response<DoctorUpdateProfileImageResponse> response) {\r\n\r\n                Log.w(TAG,\"petLoverUpdateProfileImageResponse\"+ \"--->\" + new Gson().toJson(response.body()));\r\n                Log.w(TAG,\"profileimage\"+ \"--->\" + profileimage);\r\n\r\n                avi_indicator.smoothToHide();\r\n\r\n                if (response.body() != null) {\r\n                    if(response.body().getCode() == 200){\r\n                        SessionManager sessionManager = new SessionManager(getApplicationContext());\r\n                        sessionManager.setIsLogin(true);\r\n                        sessionManager.createLoginSession(\r\n                                userid,\r\n                                firstname,\r\n                                lastname,\r\n                                useremail,\r\n                                phonenumber,\r\n                                String.valueOf(usertype),\r\n                                userstatus,\r\n                                profileimage,\r\n                                verifyemailstatus,\r\n                                refcode\r\n\r\n                        );\r\n                        onBackPressed();\r\n                        //gotoDoctorProfileScreenActivity();\r\n                    } else{\r\n                        //showErrorLoading(response.body().getMessage());\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call<DoctorUpdateProfileImageResponse> call, @NonNull Throwable t) {\r\n\r\n                avi_indicator.smoothToHide();\r\n                Log.w(TAG,\"petLoverUpdateProfileImageResponse flr\"+\"--->\" + t.getMessage());\r\n            }\r\n        });\r\n\r\n    }\r\n    private DoctorUpdateProfileImageRequest doctorUpdateProfileImageRequest() {\r\n        DoctorUpdateProfileImageRequest  doctorUpdateProfileImageRequest = new DoctorUpdateProfileImageRequest();\r\n        doctorUpdateProfileImageRequest.setUser_id(userid);\r\n        if(profileimage != null && !profileimage.isEmpty()) {\r\n            doctorUpdateProfileImageRequest.setProfile_img(profileimage);\r\n        }else{\r\n            doctorUpdateProfileImageRequest.setProfile_img(APIClient.PROFILE_IMAGE_URL);\r\n\r\n        }\r\n        Log.w(TAG,\"doctorUpdateProfileImageRequest\"+ \"--->\" + new Gson().toJson(doctorUpdateProfileImageRequest));\r\n        return doctorUpdateProfileImageRequest;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/petfolio/infinituss/petlover/PetLoverEditProfileImageActivity.java b/app/src/main/java/com/petfolio/infinituss/petlover/PetLoverEditProfileImageActivity.java
--- a/app/src/main/java/com/petfolio/infinituss/petlover/PetLoverEditProfileImageActivity.java	(revision f1734ca40ba206b2d8b7b0e5c5470841991c7822)
+++ b/app/src/main/java/com/petfolio/infinituss/petlover/PetLoverEditProfileImageActivity.java	(date 1632498661151)
@@ -12,8 +12,10 @@
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
+import android.os.Environment;
 import android.provider.MediaStore;
 import android.provider.OpenableColumns;
+import android.text.TextUtils;
 import android.util.Log;
 import android.view.View;
 import android.widget.Button;
@@ -28,6 +30,7 @@
 import androidx.core.content.ContextCompat;
 
 import com.bumptech.glide.Glide;
+import com.google.android.gms.common.util.IOUtils;
 import com.google.gson.Gson;
 import com.petfolio.infinituss.R;
 import com.petfolio.infinituss.api.APIClient;
@@ -38,11 +41,13 @@
 import com.petfolio.infinituss.responsepojo.FileUploadResponse;
 import com.petfolio.infinituss.sessionmanager.SessionManager;
 import com.petfolio.infinituss.utils.RestUtils;
-import com.theartofdev.edmodo.cropper.CropImage;
+import com.canhub.cropper.CropImage;
 import com.wang.avi.AVLoadingIndicatorView;
 
 import java.io.File;
 import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
 import java.io.OutputStream;
 import java.text.SimpleDateFormat;
 import java.util.Date;
@@ -64,6 +69,7 @@
 import static android.Manifest.permission.CAMERA;
 import static android.Manifest.permission.READ_EXTERNAL_STORAGE;
 import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;
+import static android.os.Environment.DIRECTORY_DOCUMENTS;
 
 public class PetLoverEditProfileImageActivity extends AppCompatActivity implements View.OnClickListener {
     private  String TAG = "PetLoverEditProfileImageActivity";
@@ -299,7 +305,7 @@
             if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {
                 CropImage.ActivityResult result = CropImage.getActivityResult(data);
                 if (resultCode == RESULT_OK) {
-                    Uri resultUri = result.getUri();
+                    Uri resultUri = result.getUriContent();
 
                     if (resultUri != null) {
 
@@ -309,7 +315,7 @@
 
                         Log.w("filename", " " + filename);
 
-                        String filePath = FileUtil.getPath(PetLoverEditProfileImageActivity.this, resultUri);
+                        String filePath = getFilePathFromURI(PetLoverEditProfileImageActivity.this, resultUri);
 
                         assert filePath != null;
 
@@ -614,23 +620,50 @@
                 .show();
     }
 
-    public String getFileName(Uri uri) {
-        String result = null;
-        if (uri.getScheme().equals("content")) {
-            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {
-                if (cursor != null && cursor.moveToFirst()) {
-                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));
-                }
-            }
-        }
-        if (result == null) {
-            result = uri.getPath();
-            int cut = result.lastIndexOf('/');
-            if (cut != -1) {
-                result = result.substring(cut + 1);
-            }
+    public static String getFilePathFromURI(Context context, Uri contentUri) {
+        //copy file and send new file path
+        String fileName = getFileName(contentUri);
+        if (!TextUtils.isEmpty(fileName)) {
+
+            String path = Environment.getExternalStoragePublicDirectory(DIRECTORY_DOCUMENTS).getPath() + "/" + "MyFirstApp/";
+            // Create the parent path
+            File dir = new File(path);
+            if (!dir.exists()) {
+                dir.mkdirs();
+            }
+
+            String fullName = path + "mylog";
+            File copyFile = new File (fullName);
+
+            /* File copyFile = new File(Environment.DIRECTORY_DOWNLOADS + File.separator + fileName);*/
+            copy(context, contentUri, copyFile);
+            return copyFile.getAbsolutePath();
+        }
+        return null;
+    }
+
+    public static String getFileName(Uri uri) {
+        if (uri == null) return null;
+        String fileName = null;
+        String path = uri.getPath();
+        int cut = path.lastIndexOf('/');
+        if (cut != -1) {
+            fileName = path.substring(cut + 1);
+        }
+        return fileName;
+    }
+
+    public static void copy(Context context, Uri srcUri, File dstFile) {
+        try {
+            InputStream inputStream = context.getContentResolver().openInputStream(srcUri);
+            if (inputStream == null) return;
+            OutputStream outputStream = new FileOutputStream(dstFile);
+            IOUtils.copyStream(inputStream, outputStream);
+            inputStream.close();
+            outputStream.close();
+        } catch (IOException e) {
+            e.printStackTrace();
         }
-        return result;
     }
 
 
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"CompilerConfiguration\">\r\n    <bytecodeTargetLevel target=\"11\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
--- a/.idea/compiler.xml	(revision f1734ca40ba206b2d8b7b0e5c5470841991c7822)
+++ b/.idea/compiler.xml	(date 1632494895314)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="CompilerConfiguration">
-    <bytecodeTargetLevel target="11" />
+    <bytecodeTargetLevel target="1.8" />
   </component>
 </project>
\ No newline at end of file
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\r\n\r\nandroid {\r\n    compileSdkVersion 30\r\n    buildToolsVersion \"30.0.3\"\r\n\r\n    defaultConfig {\r\n        applicationId \"com.petfolio.infinituss\"\r\n        minSdkVersion 23\r\n        targetSdkVersion 30\r\n        versionCode 8\r\n        versionName \"8.0\"\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n        multiDexEnabled true\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n    android {\r\n        dataBinding {\r\n            enabled = true\r\n        }\r\n        compileOptions {\r\n            sourceCompatibility JavaVersion.VERSION_1_8\r\n            targetCompatibility JavaVersion.VERSION_1_8\r\n        }\r\n        lintOptions {\r\n            checkReleaseBuilds false\r\n            // Or, if you prefer, you can continue to check for errors in release builds,\r\n            // but continue the build even when errors are found:\r\n            abortOnError false\r\n        }\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\r\n    implementation 'androidx.appcompat:appcompat:1.3.1'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'\r\n    implementation 'androidx.cardview:cardview:1.0.0'\r\n    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'\r\n    implementation 'androidx.recyclerview:recyclerview:1.2.1'\r\n    implementation 'com.google.android.material:material:1.4.0'\r\n    implementation 'org.jetbrains:annotations:16.0.1'\r\n    implementation 'org.jetbrains:annotations:16.0.1'\r\n    testImplementation 'junit:junit:4.13.2'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.3'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'\r\n\r\n    implementation 'com.android.support:multidex:1.0.3'\r\n\r\n    /*Retrofit*/\r\n    implementation 'com.squareup.retrofit2:retrofit:2.9.0'\r\n    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'\r\n    implementation 'com.squareup.retrofit2:converter-scalars:2.7.1'\r\n    implementation 'com.google.code.gson:gson:2.8.6'\r\n    /* ButterKnife*/\r\n    implementation 'com.jakewharton:butterknife:10.2.1'\r\n    annotationProcessor  'com.jakewharton:butterknife-compiler:10.2.1'\r\n    /*AVI Indicator*/\r\n    implementation 'com.wang.avi:library:2.1.3'\r\n    /*Sweet Alert Dialog*/\r\n    implementation 'com.github.f0ris.sweetalert:library:1.5.6'\r\n    /*Glide*/\r\n    implementation 'com.github.bumptech.glide:glide:4.11.0'\r\n    /*Toasty*/\r\n    implementation 'com.github.GrenderG:Toasty:1.5.0'\r\n\r\n    implementation 'de.hdodenhof:circleimageview:3.1.0'\r\n\r\n    //noinspection GradleDynamicVersion\r\n    implementation 'com.github.siyamed:android-shape-imageview:0.9.+@aar'\r\n\r\n\r\n\r\n\r\n\r\n    implementation 'com.google.android.gms:play-services-maps:17.0.1'\r\n    implementation 'com.google.android.gms:play-services-location:18.0.0'\r\n    implementation 'com.google.android.gms:play-services-places:17.0.0'\r\n    implementation \"com.google.android.libraries.places:places:2.4.0\"\r\n\r\n\r\n\r\n\r\n    implementation 'com.google.firebase:firebase-messaging:22.0.0'\r\n    implementation 'com.google.firebase:firebase-core:19.0.1'\r\n    implementation 'com.google.firebase:firebase-auth:21.0.1'\r\n    implementation 'com.google.firebase:firebase-messaging-directboot:22.0.0'\r\n\r\n\r\n    // Import the BoM for the Firebase platform\r\n    implementation platform('com.google.firebase:firebase-bom:26.1.1')\r\n\r\n    // Declare the dependencies for the Crashlytics and Analytics libraries\r\n    // When using the BoM, you don't specify versions in Firebase library dependencies\r\n    implementation 'com.google.firebase:firebase-crashlytics'\r\n    implementation 'com.google.firebase:firebase-analytics'\r\n\r\n\r\n    implementation 'com.vivekkaushik.datepicker:datePickerTimeline:0.0.4'\r\n\r\n    /*Payment gateway razorpay*/\r\n    implementation 'com.razorpay:checkout:1.5.16'\r\n\r\n    /*Jitsi Video Call*/\r\n   // implementation ('org.jitsi.react:jitsi-meet-sdk:2.11.0') { transitive = true }\r\n    implementation ('org.jitsi.react:jitsi-meet-sdk:2.+') { transitive = true }\r\n\r\n\r\n    // Shimmer\r\n    implementation 'com.facebook.shimmer:shimmer:0.1.0@aar'\r\n\r\n    //pdf viewpager\r\n    implementation 'es.voghdev.pdfviewpager:library:1.1.2'\r\n\r\n    implementation 'com.squareup.picasso:picasso:2.71828'\r\n\r\n    /*Digital signature*/\r\n    implementation 'com.github.gcacace:signature-pad:1.2.1'\r\n\r\n\r\n    /* Pdf Library*/\r\n    implementation 'com.github.wwdablu:SimplyPDF:1.1.2'\r\n\r\n\r\n    implementation 'com.etebarian:meow-bottom-navigation-java:1.2.0'\r\n\r\n\r\n    // This library is used for crop image feature\r\n\r\n    api 'com.theartofdev.edmodo:android-image-cropper:2.8.+'\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n// Add the following line:\r\napply plugin: 'com.google.gms.google-services'  // Google Services plugin\r\n\r\n// Apply the Crashlytics Gradle plugin\r\napply plugin: 'com.google.firebase.crashlytics'
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	(revision f1734ca40ba206b2d8b7b0e5c5470841991c7822)
+++ b/app/build.gradle	(date 1632495250681)
@@ -131,9 +131,22 @@
     implementation 'com.etebarian:meow-bottom-navigation-java:1.2.0'
 
 
+/*
     // This library is used for crop image feature
 
     api 'com.theartofdev.edmodo:android-image-cropper:2.8.+'
+*/
+
+    // This library is used for crop image feature
+
+    // api 'com.theartofdev.edmodo:android-image-cropper:2.8.+'
+
+    implementation 'com.github.CanHub:Android-Image-Cropper:3.1.1'
+
+
+
+
+
 
 
 
Index: app/src/main/java/com/petfolio/infinituss/doctor/EditDoctorBusinessInfoActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.petfolio.infinituss.doctor;\r\rimport android.Manifest;\rimport android.annotation.SuppressLint;\rimport android.app.Activity;\rimport android.app.DatePickerDialog;\rimport android.app.Dialog;\rimport android.content.Context;\rimport android.content.Intent;\rimport android.content.IntentSender;\rimport android.content.pm.PackageManager;\rimport android.database.Cursor;\rimport android.graphics.Bitmap;\rimport android.graphics.Canvas;\rimport android.graphics.Color;\rimport android.graphics.drawable.ColorDrawable;\rimport android.location.Address;\rimport android.location.Geocoder;\rimport android.location.Location;\rimport android.location.LocationManager;\rimport android.net.Uri;\rimport android.os.Build;\rimport android.os.Bundle;\rimport android.os.Environment;\rimport android.os.Handler;\rimport android.provider.MediaStore;\rimport android.provider.OpenableColumns;\rimport android.util.Log;\rimport android.view.View;\rimport android.view.WindowManager;\rimport android.widget.AdapterView;\rimport android.widget.ArrayAdapter;\rimport android.widget.Button;\rimport android.widget.EditText;\rimport android.widget.ImageView;\rimport android.widget.LinearLayout;\rimport android.widget.Spinner;\rimport android.widget.TextView;\rimport android.widget.Toast;\r\rimport androidx.annotation.NonNull;\rimport androidx.annotation.Nullable;\rimport androidx.appcompat.app.AlertDialog;\rimport androidx.appcompat.app.AppCompatActivity;\rimport androidx.cardview.widget.CardView;\rimport androidx.core.app.ActivityCompat;\rimport androidx.core.content.ContextCompat;\rimport androidx.recyclerview.widget.DefaultItemAnimator;\rimport androidx.recyclerview.widget.GridLayoutManager;\rimport androidx.recyclerview.widget.LinearLayoutManager;\rimport androidx.recyclerview.widget.RecyclerView;\r\rimport com.bumptech.glide.Glide;\rimport com.bumptech.glide.load.engine.DiskCacheStrategy;\rimport com.bumptech.glide.request.RequestOptions;\rimport com.github.gcacace.signaturepad.views.SignaturePad;\rimport com.google.android.gms.common.ConnectionResult;\rimport com.google.android.gms.common.api.GoogleApiClient;\rimport com.google.android.gms.common.api.PendingResult;\rimport com.google.android.gms.common.api.Status;\rimport com.google.android.gms.location.LocationListener;\rimport com.google.android.gms.location.LocationRequest;\rimport com.google.android.gms.location.LocationServices;\rimport com.google.android.gms.location.LocationSettingsRequest;\rimport com.google.android.gms.location.LocationSettingsResult;\rimport com.google.android.gms.location.LocationSettingsStatusCodes;\rimport com.google.android.gms.maps.GoogleMap;\rimport com.google.android.gms.maps.OnMapReadyCallback;\rimport com.google.android.gms.maps.SupportMapFragment;\rimport com.google.gson.Gson;\rimport com.petfolio.infinituss.R;\rimport com.petfolio.infinituss.activity.location.SetLocationDoctorOldActivity;\rimport com.petfolio.infinituss.adapter.DoctorAddEducAdapter;\rimport com.petfolio.infinituss.adapter.DoctorAddExpAdapter;\rimport com.petfolio.infinituss.adapter.DoctorEditCertificateListAdapter;\rimport com.petfolio.infinituss.adapter.DoctorEditClinicImageListAdapter;\rimport com.petfolio.infinituss.adapter.DoctorEditGovtIDListAdapter;\rimport com.petfolio.infinituss.adapter.DoctorEditPhotoIDListAdapter;\rimport com.petfolio.infinituss.adapter.DoctorSpecialzationListAdapter;\rimport com.petfolio.infinituss.adapter.PetsHandledListEditAdapter;\rimport com.petfolio.infinituss.api.APIClient;\rimport com.petfolio.infinituss.api.RestApiInterface;\rimport com.petfolio.infinituss.appUtils.FileUtil;\rimport com.petfolio.infinituss.interfaces.DoctorPetHandledTypeCheckedListener;\rimport com.petfolio.infinituss.interfaces.DoctorSpecialzationChckedListener;\rimport com.petfolio.infinituss.requestpojo.DoctorBusinessInfoUpdateRequest;\rimport com.petfolio.infinituss.requestpojo.DoctorDetailsByUserIdRequest;\rimport com.petfolio.infinituss.responsepojo.DocBusInfoUploadResponse;\rimport com.petfolio.infinituss.responsepojo.DoctorDetailsByUserIdResponse;\rimport com.petfolio.infinituss.responsepojo.DropDownListResponse;\rimport com.petfolio.infinituss.responsepojo.FileUploadResponse;\rimport com.petfolio.infinituss.service.GPSTracker;\rimport com.petfolio.infinituss.sessionmanager.SessionManager;\rimport com.petfolio.infinituss.utils.ConnectionDetector;\rimport com.petfolio.infinituss.utils.RestUtils;\rimport com.petfolio.infinituss.utils.ScalingUtilities;\rimport com.theartofdev.edmodo.cropper.CropImage;\rimport com.wang.avi.AVLoadingIndicatorView;\r\rimport java.io.File;\rimport java.io.FileNotFoundException;\rimport java.io.FileOutputStream;\rimport java.io.IOException;\rimport java.io.OutputStream;\rimport java.text.SimpleDateFormat;\rimport java.util.ArrayList;\rimport java.util.Arrays;\rimport java.util.Calendar;\rimport java.util.Date;\rimport java.util.HashMap;\rimport java.util.List;\rimport java.util.Locale;\rimport java.util.Objects;\r\rimport butterknife.BindView;\rimport butterknife.ButterKnife;\rimport cn.pedant.SweetAlert.SweetAlertDialog;\rimport es.dmoral.toasty.Toasty;\rimport okhttp3.MediaType;\rimport okhttp3.MultipartBody;\rimport okhttp3.RequestBody;\rimport retrofit2.Call;\rimport retrofit2.Callback;\rimport retrofit2.Response;\r\rpublic class EditDoctorBusinessInfoActivity extends AppCompatActivity implements View.OnClickListener, DoctorSpecialzationChckedListener, DoctorPetHandledTypeCheckedListener,\r        OnMapReadyCallback, GoogleApiClient.ConnectionCallbacks,\r        GoogleApiClient.OnConnectionFailedListener, LocationListener {\r\r    private String TAG = \"EditDoctorBusinessInfoActivity\";\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edtx_clinic_name)\r    EditText edittext_clinic_name;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edtx_educ_nme)\r    EditText edittext_education_name;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edtx_edu_yr)\r    EditText edittext_education_year;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edtx_comp_nme)\r    EditText edittext_company_name;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edtx_from)\r    EditText edittext_from;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edtx_to)\r    EditText edittext_to;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.txt_clinic_addr)\r    TextView txt_clinic_addr;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edtx_clinic_pic_choose)\r    EditText edtx_clinic_pic_choose;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edtx_clinic_certif_choose)\r    EditText edtx_cert_pic_choose;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edtx_clinic_govtid_choose)\r    EditText edtx_govt_pic_choose;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edtx_clinic_photoid_choose)\r    EditText edtx_photo_pic_choose;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.buttonAddedu)\r    Button buttonAddedu;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.buttonAddexpr)\r    Button buttonAddexpr;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.buttonsubmit)\r    Button buttonsubmit;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcyrl_added_edu)\r    RecyclerView recylerView_added_education;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_added_expr)\r    RecyclerView recylerView_added_experience;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_speclist)\r    RecyclerView recylerView_specializationlist;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_pettypelist)\r    RecyclerView recylerView_pettypelist;\r\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_choosen_clinic_img)\r    RecyclerView recylerView_choosen_clinic_images;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_choosen_certificate_img)\r    RecyclerView recylerView_choosen_certificate_images;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_choosen_govtid_images)\r    RecyclerView recylerView_choosen_govtid_images;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_choosen_photoid_img)\r    RecyclerView recylerView_choosen_photo_id_images;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.cdvw_certificate)\r    CardView material_cardview_certificate;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.img_bck)\r    ImageView img_bck;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.avi_indicator)\r    AVLoadingIndicatorView avi_indicator;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.spr_communicationtype)\r    Spinner spr_communicationtype;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edtx_service_charge_amount)\r    EditText edtx_service_charge_amount;\r\r\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.lldigitalsignature)\r    LinearLayout lldigitalsignature;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edtx_clinic_number)\r    EditText edtx_clinic_number;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edtx_doctor_id)\r    EditText edtx_doctor_id;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edtx_about_doctor)\r    EditText edtx_about_doctor;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.llheaderdigitalsignature)\r    LinearLayout llheaderdigitalsignature;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.ivdigitalsignature)\r    ImageView ivdigitalsignature;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.signaturePad)\r    SignaturePad mSignaturePad;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.clear_button)\r    Button mClearButton;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.save_button)\r    Button mSaveButton;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.txt_location_change)\r    TextView txt_location_change;\r\r\r\r    public static String digitalSignatureServerUrlImagePath = \"\";\r    String StoredPathDigitalSignature =\"\";\r\r\r    HashMap<Integer,String> hashMap_Communicationvalue = new HashMap<>();\r\r    String clinic_name,education_name,education_yr,cmpynm,from,to,clinic_addr;\r    int consultancy_fees;\r\r\r\r\r\r    ArrayList<FileUploadResponse> certificatePicResponse = new ArrayList<>();\r\r    ArrayList<FileUploadResponse>  govtIdPicResponse = new ArrayList<>();\r\r    ArrayList<FileUploadResponse> photoIdPicResponse = new ArrayList<>();\r\r    private List<DropDownListResponse.DataBean.PetHandleBean> pethandleList;\r\r    private List<DropDownListResponse.DataBean.SpecialzationBean> petSpecilaziationList;\r\r\r\r    DoctorEditClinicImageListAdapter doctorEditClinicImageListAdapter;\r    DoctorEditCertificateListAdapter doctorEditCertificateListAdapter;\r    DoctorEditGovtIDListAdapter doctorEditGovtIDListAdapter;\r    DoctorEditPhotoIDListAdapter doctorEditPhotoIDListAdapter;\r\r\r\r    PetsHandledListEditAdapter petsHandledListEditAdapter;\r\r\r\r\r\r\r    MultipartBody.Part filePart,certPart,govIdPart,photIDPart,siganaturePart;\r\r    private static final int REQUEST_CLINIC_CAMERA_PERMISSION_CODE = 785 ;\r\r    private static final int REQUEST_READ_CLINIC_PDF_PERMISSION = 787 ;\r\r    private static final int REQUEST_READ_GOVT_ID_PDF_PERMISSION = 788;\r\r    private static final int REQUEST_READ_PHOTO_ID_PDF_PERMISSION = 789;\r\r    private static final int REQUEST_READ_CLINIC_PIC_PERMISSION = 786;\r\r    private static final int REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE = 790;\r\r    private static final int REQUEST_READ_CERTIFICATE_PIC_PERMISSION = 791;\r\r    private static final int REQUEST_GOVTID_CAMERA_PERMISSION_CODE = 792;\r\r    private static final int REQUEST_READ_GOVTID_PIC_PERMISSION = 793;\r\r    private static final int REQUEST_PHOTOID_CAMERA_PERMISSION_CODE = 794;\r\r    private static final int REQUEST_READ_PHOTOID_PIC_PERMISSION = 795;\r\r\r\r\r    private static final int SELECT_CLINIC_CAMERA = 1000 ;\r\r    private static final int SELECT_CLINIC_PICTURE = 1001 ;\r\r    private static final int SELECT_CERT_PDF = 1002;\r\r    private static final int SELECT_GOVTID_PDF = 1003;\r\r    private static final int SELECT_PHOTOID_PDF = 1004;\r\r    private static final int SELECT_CERTIFICATE_CAMERA = 1005;\r\r    private static final int SELECT_CERTIFICATE_PICTURE = 1006;\r\r    private static final int SELECT_GOVTID_CAMERA = 1007;\r\r    private static final int SELECT_GOVTID_PICTURE = 1008;\r\r    private static final int SELECT_PHOTOID_CAMERA = 1009;\r\r    private static final int SELECT_PHOTOID_PICTURE = 1010;\r\r\r\r    String start_date,dr_title, dr_name,user_id,currentDateandTime,clinic_about_dr,clinic_dr_id,clinic_number;\r    private String getfromdate;\r\r    private static final int REQUEST_CHECK_SETTINGS_GPS = 0x1;\r\r\r\r    private GoogleApiClient googleApiClient;\r    Location mLastLocation;\r    public static final int MY_PERMISSIONS_REQUEST_LOCATION = 99;\r    private SupportMapFragment mapFragment;\r    private double latitude;\r    private double longitude;\r\r    private List<DropDownListResponse.DataBean.CommunicationTypeBean> communicationtypList;\r    private String strcommunicationtype;\r    private List<DoctorDetailsByUserIdResponse.DataBean.ClinicPicBean> doctorclinicdetailsResponseList;\r    private List<DoctorDetailsByUserIdResponse.DataBean.EducationDetailsBean> education_detailsList = new ArrayList<>();\r    private List<DoctorDetailsByUserIdResponse.DataBean.ExperienceDetailsBean> experience_detailsList = new ArrayList<>();\r    private List<DoctorDetailsByUserIdResponse.DataBean.SpecializationBean> specialzationListEdit;\r    private List<DoctorDetailsByUserIdResponse.DataBean.PetHandledBean> pethandleListEdit;\r\r\r    private List<DoctorBusinessInfoUpdateRequest.EducationDetailsBean> education_details = new ArrayList<>();\r    private List<DoctorBusinessInfoUpdateRequest.ExperienceDetailsBean> experience_details = new ArrayList<>();\r    private List<DoctorBusinessInfoUpdateRequest.SpecializationBean> specialization  = new ArrayList<>();\r    private List<DoctorBusinessInfoUpdateRequest.PetHandledBean> pet_handled = new ArrayList<>();\r    private List<DoctorBusinessInfoUpdateRequest.ClinicPicBean> clinic_pic = new ArrayList<>();\r    private List<DoctorBusinessInfoUpdateRequest.CertificatePicBean> certificate_pic = new ArrayList<>();\r    private List<DoctorBusinessInfoUpdateRequest.GovtIdPicBean> govt_id_pic = new ArrayList<>();\r    private List<DoctorBusinessInfoUpdateRequest.PhotoIdPicBean> photo_id_pic = new ArrayList<>();\r    private Dialog alertDialog;\r    private List<DoctorDetailsByUserIdResponse.DataBean.ClinicPicBean> clinicPicBeansEdit;\r    private List<DoctorDetailsByUserIdResponse.DataBean.CertificatePicBean> certificatePicBeansEdit;\r    private List<DoctorDetailsByUserIdResponse.DataBean.GovtIdPicBean> govtIdPicBeansEdit;\r    private List<DoctorDetailsByUserIdResponse.DataBean.PhotoIdPicBean> photoIdPicBeansEdit;\r    private String id;\r    private String Dr_title,Dr_name;\r    private double Clinic_lat,Clinic_long;\r    private String Clinic_loc;\r    private String strMyImagePath;\r    private String latlng;\r    private String CityName;\r    private String AddressLine;\r    private boolean isSetAddress = false;\r    private Dialog dialog;\r\r    /*Crop Functonality */\r\r    private boolean isAddClinicPic = false;\r    private boolean isAddCertfProof = false;\r    private boolean isAddGovtIdproof = false;\r    private boolean isAddPhotoIDproof = false;\r\r\r\r\r    @SuppressLint(\"LogNotTimber\")\r    @Override\r    protected void onCreate(Bundle savedInstanceState) {\r        super.onCreate(savedInstanceState);\r        setContentView(R.layout.activity_edit_doctor_business_info);\r        ButterKnife.bind(this);\r        SessionManager session = new SessionManager(getApplicationContext());\r        HashMap<String, String> user = session.getProfileDetails();\r        dr_name = user.get(SessionManager.KEY_FIRST_NAME);\r        user_id = user.get(SessionManager.KEY_ID);\r        dr_title = \"Dr\";\r        Log.w(TAG,\"dr_name : \"+dr_name+\" dr_title : \"+dr_title);\r\r\r\r        Bundle extras = getIntent().getExtras();\r        if (extras != null) {\r            latlng = String.valueOf(getIntent().getSerializableExtra(\"latlng\"));\r            Log.w(TAG,\"latlng-->\"+ latlng);\r            if(latlng != null && !latlng.equalsIgnoreCase(\"null\")){\r                String newString = latlng.replace(\"lat/lng:\", \"\");\r                Log.w(TAG,\"latlng==\"+newString);\r\r                String latlngs = newString.trim().replaceAll(\"\\\\(\", \"\").replaceAll(\"\\\\)\",\"\").trim();\r                Log.w(TAG,\"latlngs==\"+latlngs);\r                String[] separated = latlngs.split(\",\");\r                String lat = separated[0];\r                String lon = separated[1];\r\r                latitude = Double.parseDouble(lat);\r                longitude = Double.parseDouble(lon);\r            }\r\r\r\r            CityName = extras.getString(\"cityname\");\r            AddressLine = extras.getString(\"address\");\r            String postalCode = extras.getString(\"PostalCode\");\r\r            Log.w(TAG,\"Clinic_lat : \"+Clinic_lat+\" \"+\"Clinic_long : \"+Clinic_long+\" CityName : \"+CityName+\" AddressLine : \"+AddressLine);\r\r            if(AddressLine != null) {\r                txt_clinic_addr.setText(AddressLine);\r                isSetAddress = true;\r            }\r\r\r\r\r\r        }\r\r\r        if (new ConnectionDetector(getApplicationContext()).isNetworkAvailable(getApplicationContext())) {\r            doctorDetailsByUserIdResponseCall();\r        }\r\r\r        if (mapFragment == null) {\r            mapFragment = SupportMapFragment.newInstance();\r            mapFragment.getMapAsync(this);\r        }\r        googleApiConnected();\r        LocationRequest locationRequest = LocationRequest.create();\r        locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);\r        locationRequest.setInterval(1000); // 10 seconds\r        locationRequest.setFastestInterval(1000); // 5 seconds\r\r\r\r\r        avi_indicator.setVisibility(View.GONE);\r\r        buttonAddedu.setOnClickListener(this);\r\r        buttonAddexpr.setOnClickListener(this);\r\r        buttonsubmit.setOnClickListener(this);\r\r        edittext_from.setOnClickListener(this);\r\r        edittext_to.setOnClickListener(this);\r\r        edittext_education_year.setOnClickListener(this);\r\r        edtx_clinic_pic_choose.setOnClickListener(this);\r\r        edtx_cert_pic_choose.setOnClickListener(this);\r\r        edtx_govt_pic_choose.setOnClickListener(this);\r\r        edtx_photo_pic_choose.setOnClickListener(this);\r        img_bck.setOnClickListener(this);\r        txt_location_change.setOnClickListener(this);\r\r        /* ************ Adding Images ************** */\r\r        recylerView_choosen_clinic_images.setHasFixedSize(true);\r\r        recylerView_choosen_clinic_images.setNestedScrollingEnabled(false);\r\r        LinearLayoutManager layoutManager2 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);\r\r        recylerView_choosen_clinic_images.setLayoutManager(layoutManager2);\r\r\r        /* ************ Adding Certificate ************** */\r\r        recylerView_choosen_certificate_images.setHasFixedSize(true);\r\r        recylerView_choosen_certificate_images.setNestedScrollingEnabled(false);\r\r        LinearLayoutManager layoutManager3 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);\r\r        recylerView_choosen_certificate_images.setLayoutManager(layoutManager3);\r\r\r        /* ************ Adding GovtID ************** */\r\r        recylerView_choosen_govtid_images.setHasFixedSize(true);\r\r        recylerView_choosen_govtid_images.setNestedScrollingEnabled(false);\r\r        LinearLayoutManager layoutManager4 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);\r\r        recylerView_choosen_govtid_images.setLayoutManager(layoutManager4);\r\r\r\r        /* ************ Adding PhotoID ************** */\r\r        recylerView_choosen_photo_id_images.setHasFixedSize(true);\r\r        recylerView_choosen_photo_id_images.setNestedScrollingEnabled(false);\r\r        LinearLayoutManager layoutManager5 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);\r\r        recylerView_choosen_photo_id_images.setLayoutManager(layoutManager5);\r\r\r        /* *************** Get Current Date and Time ************************ */\r\r        SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r         currentDateandTime = sdf.format(new Date());\r\r\r        spr_communicationtype.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r            @Override\r            public void onItemSelected(AdapterView<?> parent, View view, int arg2, long arg3) {\r                ((TextView) parent.getChildAt(0)).setTextColor(getResources().getColor(R.color.green));\r                 strcommunicationtype = spr_communicationtype.getSelectedItem().toString();\r                 Log.w(TAG,\"communicationtype : \"+strcommunicationtype);\r\r\r            }\r\r            @Override\r            public void onNothingSelected(AdapterView<?> arg0) {\r                // TODO Auto-generated method stub\r\r            }\r        });\r\r\r        mSignaturePad.setOnSignedListener(new SignaturePad.OnSignedListener() {\r            @Override\r            public void onStartSigning() {\r                //Toast.makeText(EditDoctorBusinessInfoActivity.this, \"OnStartSigning\", Toast.LENGTH_SHORT).show();\r            }\r\r            @Override\r            public void onSigned() {\r                mSaveButton.setEnabled(true);\r                mClearButton.setEnabled(true);\r            }\r\r            @Override\r            public void onClear() {\r                mSaveButton.setEnabled(false);\r                mClearButton.setEnabled(false);\r            }\r        });\r        mClearButton.setOnClickListener(new View.OnClickListener() {\r            @Override\r            public void onClick(View view) {\r                mSignaturePad.clear();\r            }\r        });\r        mSaveButton.setOnClickListener(new View.OnClickListener() {\r            @Override\r            public void onClick(View view) {\r                Bitmap signatureBitmap = mSignaturePad.getSignatureBitmap();\r                Log.w(TAG,\"signatureBitmap\"+signatureBitmap);\r                // Bitmap getTransparentSignatureBitmap = mSignaturePad.getTransparentSignatureBitmap();\r                // Log.w(TAG,\"getTransparentSignatureBitmap\"+getTransparentSignatureBitmap);\r\r\r\r                // Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get(\"data\");\r\r                File file = new File(getFilesDir(), \"DoctorSignature\" + \".jpg\");\r\r                OutputStream os;\r                try {\r                    os = new FileOutputStream(file);\r                    if (signatureBitmap != null) {\r                        signatureBitmap.compress(Bitmap.CompressFormat.JPEG, 100, os);\r                    }\r                    os.flush();\r                    os.close();\r                } catch (Exception e) {\r                    Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r                }\r\r                RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\r                siganaturePart = MultipartBody.Part.createFormData(\"sampleFile\",  user_id+currentDateandTime+file.getName(), requestFile);\r\r                uploadDigitalSignatureImageRequest();\r\r\r\r/*\r                if (addJpgSignatureToGallery(signatureBitmap)) {\r                    //Toast.makeText(Doctor_Profile_Activity.this, \"Signature saved into the Gallery\", Toast.LENGTH_SHORT).show();\r                } else {\r                   // Toast.makeText(Doctor_Profile_Activity.this, \"Unable to store the signature\", Toast.LENGTH_SHORT).show();\r                }*/\r\r            }\r        });\r        llheaderdigitalsignature.setVisibility(View.GONE);\r        lldigitalsignature.setOnClickListener(new View.OnClickListener() {\r            @Override\r            public void onClick(View v) {\r                llheaderdigitalsignature.setVisibility(View.VISIBLE);\r\r            }\r        });\r\r\r\r\r    }\r    @SuppressLint(\"LogNotTimber\")\r    public void dropDownListResponseCall(){\r\r        avi_indicator.setVisibility(View.VISIBLE);\r        avi_indicator.smoothToShow();\r        //Creating an object of our api interface\r        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);\r        Call<DropDownListResponse> call = apiInterface.dropDownListResponseCall(RestUtils.getContentType());\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\r        call.enqueue(new Callback<DropDownListResponse>() {\r            @Override\r            public void onResponse(@NonNull Call<DropDownListResponse> call, @NonNull Response<DropDownListResponse> response) {\r                avi_indicator.smoothToHide();\r\r\r                if (response.body() != null) {\r                    if(200 == response.body().getCode()){\r\r                        Log.w(TAG,\"DropDownListResponse\" + new Gson().toJson(response.body()));\r\r                        if(response.body().getData().getPet_handle() != null) {\r                            pethandleList = response.body().getData().getPet_handle();\r                        }\r                        if(response.body().getData().getSpecialzation() != null) {\r                            petSpecilaziationList = response.body().getData().getSpecialzation();\r                        }\r                        if(response.body().getData().getCommunication_type() != null) {\r                            communicationtypList = response.body().getData().getCommunication_type();\r                        }\r\r                        if(communicationtypList != null && communicationtypList.size()>0){\r                            setCommunicationtype(communicationtypList);\r                        }\r\r\r\r                        if(specialzationListEdit != null && specialzationListEdit.size()>0 && petSpecilaziationList != null && petSpecilaziationList.size()>0){\r                            for(int i=0;i<specialzationListEdit.size();i++){\r                                for(int j=0; j<petSpecilaziationList.size();j++){\r                                    if(specialzationListEdit.get(i).getSpecialization().equalsIgnoreCase(petSpecilaziationList.get(j).getSpecialzation())){\r                                        DoctorBusinessInfoUpdateRequest.SpecializationBean specializationBean = new DoctorBusinessInfoUpdateRequest.SpecializationBean();\r                                        specializationBean.setSpecialization(petSpecilaziationList.get(j).getSpecialzation());\r                                        specialization.add(specializationBean);\r                                    }\r                                }\r\r\r                            }\r                        }\r\r\r                        if(pethandleListEdit != null && pethandleListEdit.size()>0 && pethandleList != null && pethandleList.size()>0) {\r                            for (int i = 0; i < pethandleListEdit.size(); i++) {\r                            for (int j = 0; j < pethandleList.size(); j++) {\r                                if (pethandleListEdit.get(i).getPet_handled().equalsIgnoreCase(pethandleList.get(j).getPet_handle())) {\r                                    DoctorBusinessInfoUpdateRequest.PetHandledBean petHandledBean = new DoctorBusinessInfoUpdateRequest.PetHandledBean();\r                                    petHandledBean.setPet_handled(pethandleList.get(j).getPet_handle());\r                                    pet_handled.add(petHandledBean);\r                                }\r                            }\r\r\r                        }\r                        }\r\r\r                        Log.w(TAG,\"petSpecilaziationList : \"+new Gson().toJson(petSpecilaziationList));\r                        if(petSpecilaziationList != null && petSpecilaziationList.size()>0){\r                            setSpecList(petSpecilaziationList,specialzationListEdit);\r\r                        }\r\r                        if(pethandleList != null && pethandleList.size()>0){\r                            setPetHandle(pethandleList,pethandleListEdit);\r                        }\r\r\r\r\r                    }\r\r                }\r\r            }\r\r            @Override\r            public void onFailure(@NonNull Call<DropDownListResponse> call, @NonNull  Throwable t) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"DropDownListResponse flr\"+t.getMessage());\r            }\r        });\r\r    }\r    private void setCommunicationtype(List<DropDownListResponse.DataBean.CommunicationTypeBean> communicationtypList) {\r        ArrayList<String> pettypeArrayList = new ArrayList<>();\r        pettypeArrayList.add(\"Select Communication Type\");\r        for (int i = 0; i < communicationtypList.size(); i++) {\r\r            String petType = communicationtypList.get(i).getCom_type();\r            hashMap_Communicationvalue.put(communicationtypList.get(i).getValue(), communicationtypList.get(i).getCom_type());\r\r            Log.w(TAG,\"Communication Type-->\"+petType);\r            pettypeArrayList.add(petType);\r\r            ArrayAdapter<String> spinnerArrayAdapter = new ArrayAdapter<>(EditDoctorBusinessInfoActivity.this, R.layout.spinner_item, pettypeArrayList);\r            spinnerArrayAdapter.setDropDownViewResource(R.layout.spinner_item); // The drop down view\r            spr_communicationtype.setAdapter(spinnerArrayAdapter);\r\r            if (strcommunicationtype != null) {\r                int spinnerPosition = spinnerArrayAdapter.getPosition(strcommunicationtype);\r                spr_communicationtype.setSelection(spinnerPosition);\r            }\r\r\r        }\r    }\r    private void setPetHandle(List<DropDownListResponse.DataBean.PetHandleBean> petHandle, List<DoctorDetailsByUserIdResponse.DataBean.PetHandledBean> pethandleListEdit) {\r        recylerView_pettypelist.setLayoutManager(new GridLayoutManager(this, 2));\r        recylerView_pettypelist.setItemAnimator(new DefaultItemAnimator());\r        petsHandledListEditAdapter = new PetsHandledListEditAdapter(getApplicationContext(), petHandle,pethandleListEdit,this);\r        recylerView_pettypelist.setAdapter(petsHandledListEditAdapter);\r\r\r    }\r    private void setSpecList(List<DropDownListResponse.DataBean.SpecialzationBean> petSpecilaziationList, List<DoctorDetailsByUserIdResponse.DataBean.SpecializationBean> specialzationListEdit) {\r        recylerView_specializationlist.setLayoutManager(new GridLayoutManager(this, 2));\r        recylerView_specializationlist.setItemAnimator(new DefaultItemAnimator());\r        DoctorSpecialzationListAdapter doctorSpecialzationListAdapter = new DoctorSpecialzationListAdapter(getApplicationContext(), petSpecilaziationList,specialzationListEdit,this);\r        recylerView_specializationlist.setAdapter(doctorSpecialzationListAdapter);\r\r\r    }\r    private void getEndDate(){\r\r        String[] getfrom = getfromdate.split(\"-\");\r\r        Log.w(\"split_date\", Arrays.toString(getfrom));\r\r        int year,month,day;\r\r        year= Integer.parseInt(getfrom[0]);\r\r        month = Integer.parseInt(getfrom[1]);\r\r        int month1 = month -1 ;\r\r        day = Integer.parseInt(getfrom[2]);\r\r        Calendar c = Calendar.getInstance();\r\r        c.set(year,month1,day+1);\r\r        DatePickerDialog datePickerDialog = new DatePickerDialog(this,\r                (view, year1, month2, dayOfMonth) -> {\r\r                    //String date = year1 + \"-\" + (month2 + 1) + \"-\" + dayOfMonth;\r                    String date = year1+\"\";\r\r                    setEndDate(date);\r\r                },\r        year,\r        month1,\r        day);\r\r        datePickerDialog.getDatePicker().setMinDate(c.getTimeInMillis());\r        datePickerDialog.getDatePicker().setMaxDate(new Date().getTime());\r\r        datePickerDialog.show();\r\r\r    }\r    private void setEndDate(String date) {\r\r        edittext_to.setText(date.trim());\r\r    }\r    private void getStartDate() {\r\r        Calendar c = Calendar.getInstance();\r        int mYear = c.get(Calendar.YEAR);\r        int mMonth = c.get(Calendar.MONTH);\r        int mDay = c.get(Calendar.DAY_OF_MONTH);\r\r\r        DatePickerDialog datePickerDialog = new DatePickerDialog(this,\r                (view, year, monthOfYear, dayOfMonth) -> {\r\r                    getfromdate = year + \"-\" + (monthOfYear + 1) + \"-\" + dayOfMonth;\r\r                  start_date = year+\"\";\r\r                  setStartDate(start_date);\r\r                }, mYear, mMonth, mDay);\r\r        datePickerDialog.getDatePicker().setMaxDate(System.currentTimeMillis());\r\r        datePickerDialog.show();\r    }\r    private void setStartDate(String date) {\r\r        edittext_from.setText(date.trim());\r\r    }\r    private void getEduYear() {\r\r\r        // Get Current Date\r        final Calendar c = Calendar.getInstance();\r        int mYear = c.get(Calendar.YEAR);\r        int mMonth = c.get(Calendar.MONTH);\r        int mDay = c.get(Calendar.DAY_OF_MONTH);\r\r\r        DatePickerDialog datePickerDialog = new DatePickerDialog(this,\r                (view, year, monthOfYear, dayOfMonth) -> {\r\r                    String  date = String.valueOf(year);\r\r                    setEduYr(date);\r\r                }, mYear, mMonth, mDay);\r\r        datePickerDialog.getDatePicker().setMaxDate(System.currentTimeMillis());\r\r        datePickerDialog.show();\r\r\r\r    }\r    private void setEduYr(String date) {\r\r        edittext_education_year.setText(date);\r    }\r    private void addExpr() {\r\r        cmpynm = edittext_company_name.getText().toString().trim();\r\r        from = edittext_from.getText().toString().trim();\r\r        to = edittext_to.getText().toString().trim();\r\r        int cmpynmlength = cmpynm.trim().length();\r\r        if(cmpynm.isEmpty()){\r\r            // edittext_company_name.setError(\"Please fill the Company name\");\r            Toasty.warning(getApplicationContext(), \"Please fill the Company name\", Toast.LENGTH_SHORT).show();\r\r\r        }\r\r        else if(from.isEmpty()){\r\r            //txt_edu_yr.setError(\"Please fill the Start Date\");\r\r            Toasty.warning(getApplicationContext(), \"Please fill the experience from year\", Toast.LENGTH_SHORT).show();\r\r\r        }\r\r        else if(to.isEmpty()){\r\r            //txt_edu_yr.setError(\"Please fill the End Date\");\r\r            Toasty.warning(getApplicationContext(), \"Please fill the experience to year\", Toast.LENGTH_SHORT).show();\r\r\r        }\r\r        else if(cmpynmlength>25){\r            //edittext_company_name.setError(\"The maximum length for an Company name is 25 characters \");\r            Toasty.warning(getApplicationContext(), \"The maximum length for an Company name is 25 characters\", Toast.LENGTH_SHORT).show();\r\r\r        }\r\r\r        else{\r            insertExpr(cmpynm,from,to);\r            edittext_company_name.setText(\"\");\r            edittext_from.setText(\"\");\r            edittext_to.setText(\"\");\r\r            int start,end,yearsofexp =0;\r            start = Integer.parseInt(from);\r            end = Integer.parseInt(to);\r            yearsofexp = end-start;\r            if(yearsofexp == 0){\r                yearsofexp = 1;\r            }\r            DoctorBusinessInfoUpdateRequest.ExperienceDetailsBean experienceDetailsBean1 = new DoctorBusinessInfoUpdateRequest.ExperienceDetailsBean();\r            experienceDetailsBean1.setCompany(cmpynm);\r            experienceDetailsBean1.setFrom(from);\r            experienceDetailsBean1.setTo(to);\r            experienceDetailsBean1.setYearsofexperience(yearsofexp);\r            experience_details.add(experienceDetailsBean1);\r\r        }\r\r\r\r    }\r\r    private void insertExpr(String cmpynm, String from, String to) {\r\r        if(experience_detailsList != null && experience_detailsList.size()>=3){\r\r            Toasty.warning(getApplicationContext(),\"Sorry you cannot add more than 3\",Toast.LENGTH_SHORT).show();\r\r        }\r\r        else {\r            Toasty.success(getApplicationContext(),\"Experience added successfully\",Toast.LENGTH_SHORT).show();\r            DoctorDetailsByUserIdResponse.DataBean.ExperienceDetailsBean experienceDetailsBean = new DoctorDetailsByUserIdResponse.DataBean.ExperienceDetailsBean();\r            experienceDetailsBean.setCompany(cmpynm);\r            experienceDetailsBean.setFrom(from);\r            experienceDetailsBean.setTo(to);\r            experience_detailsList.add(experienceDetailsBean);\r            setDoctorExperience(experience_detailsList);\r\r\r\r\r\r        }\r\r    }\r    private void addEduc() {\r\r        education_name = edittext_education_name.getText().toString().trim();\r\r        education_yr = edittext_education_year.getText().toString().trim();\r\r        int edunmlength = education_name.trim().length();\r\r        int eduyrlength = education_yr.trim().length();\r\r        if(education_name.isEmpty()){\r           /* edittext_education_name.setError(\"Please fill the Education name\");\r            edittext_education_name.requestFocus();*/\r            Toasty.warning(getApplicationContext(),\"Please fill the Education name\",Toast.LENGTH_SHORT).show();\r\r\r        }\r        else if(education_yr.isEmpty()){\r           /* txt_edu_yr.setError(\"Please fill the Education year\");\r            txt_edu_yr.setFocusableInTouchMode(true);\r            txt_edu_yr.requestFocus();*/\r\r            Toasty.warning(getApplicationContext(),\"Please fill the Education year\",Toast.LENGTH_SHORT).show();\r\r\r        }\r\r        else if(edunmlength>25){\r            Toasty.warning(getApplicationContext(),\"The maximum length for an Education name is 25 characters\",Toast.LENGTH_SHORT).show();\r\r            /*edittext_education_name.setError(\"The maximum length for an Education name is 25 characters \");\r            edittext_education_name.requestFocus();*/\r\r        }\r\r        else if(eduyrlength>25){\r            Toasty.warning(getApplicationContext(),\"The maximum length for an Education year is 25 characters\",Toast.LENGTH_SHORT).show();\r\r          /*  txt_edu_yr.setError(\"The maximum length for an Education year is 25 characters \");\r            txt_edu_yr.requestFocus();*/\r\r        }\r\r        else{\r            insertEdu(education_name,education_yr);\r            edittext_education_name.setText(\"\");\r            edittext_education_year.setText(\"\");\r\r            DoctorBusinessInfoUpdateRequest.EducationDetailsBean educationDetailsBean = new DoctorBusinessInfoUpdateRequest.EducationDetailsBean();\r            educationDetailsBean.setEducation(education_name);\r            educationDetailsBean.setYear(education_yr);\r            education_details.add(educationDetailsBean);\r\r        }\r\r\r\r    }\r\r    private void insertEdu(String education_name, String education_yr) {\r\r        if(education_detailsList != null && education_detailsList.size()>=3){\r            Toasty.warning(getApplicationContext(),\"Sorry you cannot add more than 3\",Toast.LENGTH_SHORT).show();\r        } else {\r            Toasty.success(getApplicationContext(),\"Eductation added successfully\",Toast.LENGTH_SHORT).show();\r\r            DoctorDetailsByUserIdResponse.DataBean.EducationDetailsBean educationDetailsBean = new DoctorDetailsByUserIdResponse.DataBean.EducationDetailsBean();\r            educationDetailsBean.setEducation(education_name);\r            educationDetailsBean.setYear(education_yr);\r            education_detailsList.add(educationDetailsBean);\r            setDoctorEducations(education_detailsList);\r\r        }\r    }\r    @SuppressLint({\"LongLogTag\", \"LogNotTimber\"})\r    @Override\r    public void onItemDrSpecialzationCheck(int position, String specValue) {\r\r        Log.w(TAG,\"onItemSPSpecialzationCheck specValue : \"+specValue);\r        DropDownListResponse.DataBean.SpecialzationBean specialzationBean = new DropDownListResponse.DataBean.SpecialzationBean();\r        specialzationBean.setSpecialzation(specValue);\r        petSpecilaziationList.add(specialzationBean);\r\r        DoctorBusinessInfoUpdateRequest.SpecializationBean specializationBean = new DoctorBusinessInfoUpdateRequest.SpecializationBean();\r        specializationBean.setSpecialization(specValue);\r        specialization.add(specializationBean);\r\r        Log.w(TAG + \"added_specialzation_list\",new Gson().toJson(specialization));\r    }\r    @SuppressLint(\"LogNotTimber\")\r    @Override\r    public void onItemDrSpecialzationUnCheck(int position, String specValue) {\r        if(specValue != null){\r            if(specialization != null){\r                for (int i = 0; i < specialization.size(); i++)\r                    if (specialization.get(i).getSpecialization().equalsIgnoreCase(specValue)) {\r                        specialization.remove(i);\r                        Log.w(TAG, \"after removing list if\" + new Gson().toJson(specialization));\r\r                    }\r\r            }\r\r\r\r        }\r\r    }\r    @SuppressLint(\"LongLogTag\")\r    @Override\r    public void onItemPetCheck(int position, String pethandleValue) {\r        Log.w(TAG,\"onItemPetCheck pethandleValue : \"+pethandleValue);\r        DropDownListResponse.DataBean.PetHandleBean petHandleBean = new DropDownListResponse.DataBean.PetHandleBean();\r        petHandleBean.setPet_handle(pethandleValue);\r        pethandleList.add(petHandleBean);\r\r        DoctorBusinessInfoUpdateRequest.PetHandledBean petHandledBean1 = new DoctorBusinessInfoUpdateRequest.PetHandledBean();\r        petHandledBean1.setPet_handled(pethandleValue);\r        pet_handled.add(petHandledBean1);\r\r        Log.w(TAG + \"added_pethandled_list\",new Gson().toJson(pet_handled));\r\r\r\r    }\r    @Override\r    public void onItemPetUnCheck(int position, String pethandleValue) {\r        if(pethandleValue != null){\r            if(pet_handled != null){\r                for (int i = 0; i < pet_handled.size(); i++)\r                    if (pet_handled.get(i).getPet_handled().equalsIgnoreCase(pethandleValue)) {\r                        pet_handled.remove(i);\r                        Log.w(TAG, \"after removing list if\" + new Gson().toJson(pet_handled));\r\r                    }\r\r            }\r\r\r\r        }\r    }\r\r    private void chooseClinicImage() {\r\r        if(clinic_pic!=null&&clinic_pic.size()>=1){\r\r            Toasty.warning(getApplicationContext(), \"Sorry you can't Add more than 1\", Toast.LENGTH_SHORT).show();\r\r        }\r\r        else {\r\r            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(EditDoctorBusinessInfoActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {\r\r                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\r            }\r\r            else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(EditDoctorBusinessInfoActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\r\r                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r\r            }\r\r            else {\r\r                isAddClinicPic = true;\r\r                isAddCertfProof = false;\r\r                isAddGovtIdproof = false;\r\r                isAddPhotoIDproof = false;\r\r                CropImage.activity().start(EditDoctorBusinessInfoActivity.this);\r\r            }\r\r        }\r\r    }\r    private void uploadClinicImage() {\r\r        avi_indicator.show();\r\r        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\r        //RestApiInterface ApiService = RetrofitClient.getApiService();\r\r        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(filePart);\r\r//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());\r\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\r        call.enqueue(new Callback<FileUploadResponse>() {\r            @Override\r            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"Profpic\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                if (response.body() != null) {\r                    if (200 == response.body().getCode()) {\r\r                        isAddClinicPic = false;\r\r                        DoctorBusinessInfoUpdateRequest.ClinicPicBean clinicPicBean = new DoctorBusinessInfoUpdateRequest.ClinicPicBean();\r                        clinicPicBean.setClinic_pic(response.body().getData());\r                        clinic_pic.add(clinicPicBean);\r\r                        DoctorDetailsByUserIdResponse.DataBean.ClinicPicBean clinicPicBean1 = new DoctorDetailsByUserIdResponse.DataBean.ClinicPicBean();\r                        clinicPicBean1.setClinic_pic(response.body().getData());\r                        clinicPicBeansEdit.add(clinicPicBean1);\r\r                        doctorEditClinicImageListAdapter = new DoctorEditClinicImageListAdapter(getApplicationContext(), clinicPicBeansEdit,clinic_pic);\r                        recylerView_choosen_clinic_images.setAdapter(doctorEditClinicImageListAdapter);\r\r                    }\r\r                }\r\r\r            }\r\r            @Override\r            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r                // avi_indicator.smoothToHide();\r                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r            }\r        });\r\r\r    }\r    private void chooseCertPdf() {\r\r        if(certificatePicResponse!=null&&certificatePicResponse.size()>=1){\r\r            Toasty.warning(getApplicationContext(), \"Sorry you can't Add more than 1\", Toast.LENGTH_SHORT).show();\r\r        }\r\r        else {\r\r            final CharSequence[] items = {\"Select Image\", \"Select File\",\"Cancel\"};\r            //AlertDialog.Builder alert=new AlertDialog.Builder(this);\r            AlertDialog.Builder builder = new AlertDialog.Builder(EditDoctorBusinessInfoActivity.this);\r            builder.setTitle(\"Choose option\");\r            builder.setItems(items, (dialog, item) -> {\r                if (items[item].equals(\"Select Image\"))\r                {\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(EditDoctorBusinessInfoActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE);\r                    }\r\r                    else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CERTIFICATE_PIC_PERMISSION);\r                    }\r\r                    else{\r\r                        isAddCertfProof = true;\r\r                        isAddClinicPic = false;\r\r                        isAddGovtIdproof = false;\r\r                        isAddPhotoIDproof = false;\r\r                        CropImage.activity().start(EditDoctorBusinessInfoActivity.this);\r\r                    }\r                }\r\r                else if (items[item].equals(\"Select File\")){\r\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M   && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PDF_PERMISSION);\r                    }\r\r                    else{\r\r                        Intent intent = new Intent();\r                        intent.setType(\"application/pdf\");\r                        intent.setAction(Intent.ACTION_GET_CONTENT);\r                        startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_CERT_PDF);\r\r\r                    }\r\r\r                }\r\r                else if (items[item].equals(\"Cancel\")) {\r                    dialog.dismiss();\r                }\r            });\r            builder.show();\r\r        }\r    }\r    private void uploadCertPdf() {\r\r        avi_indicator.show();\r\r        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\r        //RestApiInterface ApiService = RetrofitClient.getApiService();\r\r        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(certPart);\r\r//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());\r\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\r        call.enqueue(new Callback<FileUploadResponse>() {\r            @Override\r            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"PdfFileLink\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                if (response.body() != null) {\r\r                    if (200 == response.body().getCode()) {\r\r                        isAddCertfProof=false;\r\r                        DoctorBusinessInfoUpdateRequest.CertificatePicBean certificatePicBean = new DoctorBusinessInfoUpdateRequest.CertificatePicBean();\r                        certificatePicBean.setCertificate_pic(response.body().getData());\r                        certificate_pic.add(certificatePicBean);\r\r                        DoctorDetailsByUserIdResponse.DataBean.CertificatePicBean certificatePicBean1 = new DoctorDetailsByUserIdResponse.DataBean.CertificatePicBean();\r                        certificatePicBean1.setCertificate_pic(response.body().getData());\r                        certificatePicBeansEdit.add(certificatePicBean1);\r\r                        doctorEditCertificateListAdapter = new DoctorEditCertificateListAdapter(getApplicationContext(), certificatePicBeansEdit,certificate_pic);\r                        recylerView_choosen_certificate_images.setAdapter(doctorEditCertificateListAdapter);\r\r\r\r                    }\r\r                }\r\r\r            }\r\r            @Override\r            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r                // avi_indicator.smoothToHide();\r                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r            }\r        });\r\r\r    }\r\r\r    private void chooseGovIDPdf() {\r\r        if(govtIdPicResponse!=null&&govtIdPicResponse.size()>=1){\r\r            Toasty.warning(getApplicationContext(), \"Sorry you can't Add more than 1\", Toast.LENGTH_SHORT).show();\r\r        }\r\r        else {\r\r\r            final CharSequence[] items = {\"Select Image\", \"Select File\",\"Cancel\"};\r            //AlertDialog.Builder alert=new AlertDialog.Builder(this);\r            AlertDialog.Builder builder = new AlertDialog.Builder(EditDoctorBusinessInfoActivity.this);\r            builder.setTitle(\"Choose option\");\r            builder.setItems(items, (dialog, item) -> {\r                if (items[item].equals(\"Select Image\"))\r                {\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(EditDoctorBusinessInfoActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_GOVTID_CAMERA_PERMISSION_CODE);\r                    }\r                    else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVTID_PIC_PERMISSION);\r                    }\r\r                    else {\r\r                        isAddGovtIdproof = true;\r\r                        isAddClinicPic = false;\r\r                        isAddCertfProof = false;\r\r                        isAddPhotoIDproof = false;\r\r                        CropImage.activity().start(EditDoctorBusinessInfoActivity.this);\r\r                    }\r\r\r                }\r\r                else if (items[item].equals(\"Select File\")){\r\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M   && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVT_ID_PDF_PERMISSION);\r                    }\r\r                    else{\r\r                        Intent intent = new Intent();\r                        intent.setType(\"application/pdf\");\r                        intent.setAction(Intent.ACTION_GET_CONTENT);\r                        startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_GOVTID_PDF);\r\r\r                    }\r\r\r                }\r\r                else if (items[item].equals(\"Cancel\")) {\r                    dialog.dismiss();\r                }\r            });\r            builder.show();\r\r\r        }\r\r\r    }\r    @SuppressLint(\"LogNotTimber\")\r    private void uploadGovtIDPdf() {\r\r        avi_indicator.show();\r\r        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\r        //RestApiInterface ApiService = RetrofitClient.getApiService();\r\r        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(govIdPart);\r\r//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());\r\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\r        call.enqueue(new Callback<FileUploadResponse>() {\r            @Override\r            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"PdfFileLink\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                if (response.body() != null) {\r\r                    if (200 == response.body().getCode()) {\r\r                        isAddGovtIdproof = false;\r\r                        DoctorBusinessInfoUpdateRequest.GovtIdPicBean govtIdPicBean = new DoctorBusinessInfoUpdateRequest.GovtIdPicBean();\r                        govtIdPicBean.setGovt_id_pic(response.body().getData());\r                        govt_id_pic.add(govtIdPicBean);\r\r                        DoctorDetailsByUserIdResponse.DataBean.GovtIdPicBean govtIdPicBean1 = new DoctorDetailsByUserIdResponse.DataBean.GovtIdPicBean();\r                        govtIdPicBean1.setGovt_id_pic(response.body().getData());\r                        govtIdPicBeansEdit.add(govtIdPicBean1);\r\r                        doctorEditGovtIDListAdapter = new DoctorEditGovtIDListAdapter(getApplicationContext(), govtIdPicBeansEdit,govt_id_pic);\r                        recylerView_choosen_govtid_images.setAdapter(doctorEditGovtIDListAdapter);\r\r\r                    }\r\r                }\r\r\r            }\r\r            @Override\r            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r                // avi_indicator.smoothToHide();\r                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r            }\r        });\r\r\r    }\r\r    private void choosePhotoIDPdf() {\r\r        if(photoIdPicResponse!=null&&photoIdPicResponse.size()>=1){\r\r            Toasty.warning(getApplicationContext(), \"Sorry you can't Add more than 1\", Toast.LENGTH_SHORT).show();\r\r        }\r\r        else {\r\r            final CharSequence[] items = {\"Select Image\", \"Select File\",\"Cancel\"};\r            //AlertDialog.Builder alert=new AlertDialog.Builder(this);\r            AlertDialog.Builder builder = new AlertDialog.Builder(EditDoctorBusinessInfoActivity.this);\r            builder.setTitle(\"Choose option\");\r            builder.setItems(items, (dialog, item) -> {\r                if (items[item].equals(\"Select Image\"))\r                {\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(EditDoctorBusinessInfoActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_PHOTOID_CAMERA_PERMISSION_CODE);\r                    }\r                    else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTOID_PIC_PERMISSION);\r                    }\r                    {\r                        isAddPhotoIDproof=true;\r\r                        isAddClinicPic = false;\r\r                        isAddCertfProof = false;\r\r                        isAddGovtIdproof = false;\r\r\r                        CropImage.activity().start(EditDoctorBusinessInfoActivity.this);\r\r                    }\r\r                }\r\r                else if (items[item].equals(\"Select File\")){\r\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M   && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTO_ID_PDF_PERMISSION);\r                    }\r\r                    else{\r\r                        Intent intent = new Intent();\r                        intent.setType(\"application/pdf\");\r                        intent.setAction(Intent.ACTION_GET_CONTENT);\r                        startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_PHOTOID_PDF);\r\r\r                    }\r\r\r                }\r\r                else if (items[item].equals(\"Cancel\")) {\r                    dialog.dismiss();\r                }\r            });\r            builder.show();\r\r\r        }\r\r\r\r    }\r\r    private void uploadPhotoIDPdf() {\r\r        avi_indicator.show();\r\r        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\r        //RestApiInterface ApiService = RetrofitClient.getApiService();\r\r        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(photIDPart);\r\r//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());\r\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\r        call.enqueue(new Callback<FileUploadResponse>() {\r            @Override\r            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"PdfFileLink\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                if (response.body() != null) {\r\r                    if (200 == response.body().getCode()) {\r\r                        isAddPhotoIDproof = false;\r\r                        DoctorBusinessInfoUpdateRequest.PhotoIdPicBean photoIdPicBean = new DoctorBusinessInfoUpdateRequest.PhotoIdPicBean();\r                        photoIdPicBean.setPhoto_id_pic(response.body().getData());\r                        photo_id_pic.add(photoIdPicBean);\r\r                        DoctorDetailsByUserIdResponse.DataBean.PhotoIdPicBean photoIdPicBean1 = new DoctorDetailsByUserIdResponse.DataBean.PhotoIdPicBean();\r                        photoIdPicBean1.setPhoto_id_pic(response.body().getData());\r                        photoIdPicBeansEdit.add(photoIdPicBean1);\r\r                        doctorEditPhotoIDListAdapter = new DoctorEditPhotoIDListAdapter(getApplicationContext(), photoIdPicBeansEdit,photo_id_pic);\r                        recylerView_choosen_photo_id_images.setAdapter(doctorEditPhotoIDListAdapter);\r\r\r                    }\r\r                }\r\r\r\r\r            }\r\r            @Override\r            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r                // avi_indicator.smoothToHide();\r                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r            }\r        });\r\r\r    }\r\r    private void checkValidation() {\r\r        if (ContextCompat.checkSelfPermission(this,\r                Manifest.permission.ACCESS_FINE_LOCATION)\r                != PackageManager.PERMISSION_GRANTED) {\r\r            ActivityCompat.requestPermissions(this,\r                    new String[]{Manifest.permission.ACCESS_FINE_LOCATION},\r                    MY_PERMISSIONS_REQUEST_LOCATION);\r        }\r\r        else {\r\r\r\r                clinic_name = edittext_clinic_name.getText().toString().trim();\r\r                clinic_addr = txt_clinic_addr.getText().toString().trim();\r\r            clinic_dr_id = edtx_doctor_id.getText().toString().trim();\r\r            clinic_about_dr = edtx_about_doctor.getText().toString().trim();\r\r            clinic_number = edtx_clinic_number.getText().toString().trim();\r\r                int clnnmlength = clinic_name.trim().length();\r\r                int clncaddrlength = clinic_addr.trim().length();\r\r            int clncnumlength = clinic_number.trim().length();\r\r            int clncdrIDlength = clinic_dr_id.trim().length();\r\r            int clncabtdrlength = clinic_about_dr.trim().length();\r\r                boolean can_proceed = true;\r\r                if(clinic_name.isEmpty()){\r\r                    edittext_clinic_name.setError(\"Please fill the clinic name\");\r                    edittext_clinic_name.requestFocus();\r\r                   // Toasty.warning(getApplicationContext(), \"Please Enter the clinic name\", Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r                }\r\r                else if(clnnmlength>25){\r                    edittext_education_name.setError(\"The maximum length for an Clinic name is 25 characters \");\r                    edittext_education_name.requestFocus();\r                    can_proceed = false;\r                }\r                else if(!validdCommunicationType()){\r\r                }\r\r                else if(education_detailsList!=null&&education_detailsList.size()<1){\r\r                    Toasty.warning(getApplicationContext(),\"Please Add minimum 1 Education\",Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r                }\r                else if(experience_detailsList!=null&&experience_detailsList.size()<1){\r\r                    Toasty.warning(getApplicationContext(),\"Please Add minimum 1 Experience\",Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r                }\r                else if(specialization!=null&&specialization.size()<1){\r\r                    Toasty.warning(getApplicationContext(),\"Please Choose minimum 1 Specialization\",Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r\r                }\r\r\r                else if(clinic_dr_id.isEmpty()){\r\r                    edtx_doctor_id.setError(\"Please fill the doctor id\");\r                    edtx_doctor_id.requestFocus();\r\r                    // Toasty.warning(getApplicationContext(), \"Please Enter the clinic name\", Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r                }\r\r                else if(clncdrIDlength>25){\r\r                    edtx_doctor_id.setError(\"The maximum length for an Clinic ID is 25 characters \");\r                    edtx_doctor_id.requestFocus();\r                    can_proceed = false;\r                }\r\r\r                else if(clinic_number.isEmpty()){\r\r                    edtx_clinic_number.setError(\"Please fill the clinic number\");\r                    edtx_clinic_number.requestFocus();\r\r                    // Toasty.warning(getApplicationContext(), \"Please Enter the clinic name\", Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r                }\r\r                else if(clncnumlength>25){\r\r                    edtx_clinic_number.setError(\"The maximum length for an Clinic Number is 25 characters \");\r                    edtx_clinic_number.requestFocus();\r                    can_proceed = false;\r                }\r\r\r                else if(clinic_about_dr.isEmpty()){\r\r                    edtx_about_doctor.setError(\"Please fill the about doctor\");\r                    edtx_about_doctor.requestFocus();\r\r                    // Toasty.warning(getApplicationContext(), \"Please Enter the clinic name\", Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r                }\r\r                else if(clncabtdrlength>252){\r\r                    edtx_about_doctor.setError(\"The maximum length for an About Doctor is 252 characters \");\r                    edtx_about_doctor.requestFocus();\r                    can_proceed = false;\r                }\r\r\r                else if(pet_handled!=null&&pet_handled.size()<1){\r\r                    Toasty.warning(getApplicationContext(),\"Please Choose minimum 1 pet handle\",Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r                }\r\r                else if(txt_clinic_addr.getText().toString() != null && txt_clinic_addr.getText().toString().isEmpty()){\r                    txt_clinic_addr.setError(\"Please fill the clinic address\");\r                    txt_clinic_addr.requestFocus();\r\r                   // Toasty.warning(getApplicationContext(), \"Please Enter the clinic address\", Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r                }\r\r                else if(clncaddrlength>252){\r\r                    edittext_education_name.setError(\"The maximum length for an Clinic Address is 252 characters \");\r                    edittext_education_name.requestFocus();\r                }\r\r                else if(clinic_pic!=null&&clinic_pic.size()<1){\r\r                    Toasty.warning(getApplicationContext(), \"Please Choose minimum 1 Clinic Image\", Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r                }\r\r                else if(certificate_pic!=null&&certificate_pic.size()<1){\r\r                    Toasty.warning(getApplicationContext(), \"Please Choose Certificate File\", Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r                }\r\r                else if(govt_id_pic!=null&&govt_id_pic.size()<1){\r\r                    Toasty.warning(getApplicationContext(), \"Please Choose GovtID File\", Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r                }\r\r                else if(photo_id_pic!=null&&photo_id_pic.size()<1){\r\r                    Toasty.warning(getApplicationContext(), \"Please Choose PhotoID File\", Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r                }else if(edtx_service_charge_amount.getText().toString().isEmpty()){\r                    edtx_service_charge_amount.setError(\"Please fill the service charge amount\");\r                    edtx_service_charge_amount.requestFocus();\r                    can_proceed = false;\r                }\r                else if (digitalSignatureServerUrlImagePath.isEmpty()) {\r                    showErrorLoading(\"Please draw your signature\");\r                    can_proceed = false;\r                }\r\r                if(can_proceed){\r                    if(validdCommunicationType()){\r                        consultancy_fees = Integer.parseInt(edtx_service_charge_amount.getText().toString().trim());\r\r                        if (new ConnectionDetector(getApplicationContext()).isNetworkAvailable(getApplicationContext())) {\r                            doctorBusinessInfoUpdateResponseCall();\r                        }\r                    }\r\r                }\r\r\r        }\r\r\r    }\r\r\r\r    @Override\r    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r        super.onActivityResult(requestCode, resultCode, data);\r\r        try {\r\r            if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {\r                CropImage.ActivityResult result = CropImage.getActivityResult(data);\r                if (resultCode == RESULT_OK) {\r                    Uri resultUri = result.getUri();\r\r                    if (resultUri != null) {\r\r                        Log.w(\"selectedImageUri\", \" \" + resultUri);\r\r                        String filename = getFileName(resultUri);\r\r                        Log.w(\"filename\", \" \" + filename);\r\r                        String filePath = FileUtil.getPath(EditDoctorBusinessInfoActivity.this, resultUri);\r\r                        assert filePath != null;\r\r                        File file = new File(filePath); // initialize file here\r\r                        long length = file.length() / 1024; // Size in KB\r\r                        Log.w(\"filesize\", \" \" + length);\r\r                        if (length > 2000) {\r\r                            new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                                    .setTitleText(\"File Size\")\r                                    .setContentText(\"Please choose file size less than 2 MB \")\r                                    .setConfirmText(\"Ok\")\r                                    .show();\r                        } else {\r\r\r                            SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r                            String currentDateandTime = sdf.format(new Date());\r\r                            if(isAddClinicPic){\r\r                                filePart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                                uploadClinicImage();\r                            }\r\r                            else if(isAddCertfProof){\r\r                                certPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                                uploadCertPdf();\r                            }\r\r                            else if(isAddGovtIdproof){\r\r                                govIdPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                                uploadGovtIDPdf();\r                            }\r                            else if(isAddPhotoIDproof){\r\r                                photIDPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                                uploadPhotoIDPdf();\r                            }\r                        }\r\r\r                    } else {\r\r                        Toasty.warning(EditDoctorBusinessInfoActivity.this, \"Image Error!!Please upload Some other image\", Toasty.LENGTH_LONG).show();\r                    }\r\r\r                }\r            }\r            switch (requestCode) {\r                case REQUEST_CHECK_SETTINGS_GPS:\r                    switch (resultCode) {\r                        case Activity.RESULT_OK:\r                            getMyLocation();\r                            break;\r                        case Activity.RESULT_CANCELED:\r                            getMyLocation();\r                            break;\r                    }\r                    break;\r            }\r            //\tToast.makeText(getActivity(),\"kk\",Toast.LENGTH_SHORT).show();\r            if(requestCode== SELECT_CLINIC_PICTURE || requestCode == SELECT_CLINIC_CAMERA)\r            {\r\r                if(requestCode == SELECT_CLINIC_CAMERA)\r                {\r                    Bitmap photo = (Bitmap) data.getExtras().get(\"data\");\r\r                    File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\r                    OutputStream os;\r                    try {\r                        os = new FileOutputStream(file);\r                        photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r                        os.flush();\r                        os.close();\r                    } catch (Exception e) {\r                        Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r                    }\r\r                    RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\r                    filePart = MultipartBody.Part.createFormData(\"sampleFile\",  user_id+currentDateandTime+file.getName(), requestFile);\r\r                    uploadClinicImage();\r\r                }\r\r                else{\r\r                    try {\r                        if (resultCode == Activity.RESULT_OK)\r                        {\r\r                            Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\r                            Uri selectedImageUri = data.getData();\r\r                            Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\r                            String filename = getFileName(selectedImageUri);\r\r                            Log.w(\"filename\", \" \" + filename);\r\r                            String filePath = FileUtil.getPath(EditDoctorBusinessInfoActivity.this,selectedImageUri);\r\r                            assert filePath != null;\r\r                            File file = new File(filePath); // initialize file here\r\r                            long length = file.length() / 1024; // Size in KB\r\r                            Log.w(\"filesize\", \" \" + length);\r\r//                        if(length>200){\r//\r//                            new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r//                                    .setTitleText(\"File Size\")\r//                                    .setContentText(\"Please choose file size less than 2 MB\")\r//                                    .setConfirmText(\"Ok\")\r//                                    .show();\r//                        }\r//\r//                        else{\r\r                            filePart = MultipartBody.Part.createFormData(\"sampleFile\", user_id+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                            uploadClinicImage();\r                            //}\r\r                        }\r                    } catch (Exception e) {\r\r                        Log.w(\"Exception\", \" \" + e);\r                    }\r\r                }\r\r            }\r\r            else if(requestCode == SELECT_CERTIFICATE_CAMERA)\r            {\r                Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get(\"data\");\r\r                File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\r                OutputStream os;\r                try {\r                    os = new FileOutputStream(file);\r                    if (photo != null) {\r                        photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r                    }\r                    os.flush();\r                    os.close();\r                } catch (Exception e) {\r                    Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r                }\r\r                RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\r                certPart = MultipartBody.Part.createFormData(\"sampleFile\",  user_id+currentDateandTime+file.getName(), requestFile);\r\r                uploadCertPdf();\r\r            }\r\r            else if(requestCode == SELECT_CERTIFICATE_PICTURE){\r\r                try {\r                    if (resultCode == Activity.RESULT_OK) {\r\r                        Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\r                        Uri selectedImageUri = data.getData();\r\r                        Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\r                        String filename = null;\r                        if (selectedImageUri != null) {\r                            filename = getFileName(selectedImageUri);\r                        }\r\r                        Log.w(\"filename\", \" \" + filename);\r\r                        String filePath = FileUtil.getPath(EditDoctorBusinessInfoActivity.this,selectedImageUri);\r\r                        assert filePath != null;\r\r                        File file = new File(filePath); // initialize file here\r\r                        long length = file.length() / 1024; // Size in KB\r\r                        Log.w(\"filesize\", \" \" + length);\r\r                        certPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                        uploadCertPdf();\r\r\r                    }\r                } catch (Exception e) {\r\r                    Log.w(\"Exception\", \" \" + e);\r                }\r\r            }\r\r            else if(requestCode== SELECT_CERT_PDF){\r\r                try {\r                    if (resultCode == Activity.RESULT_OK)\r                    {\r\r\r                        if(data!=null){\r\r\r                            Log.w(\"URI\", \" \" + data);\r\r                            Uri selectedFileUri = data.getData();\r\r                            if(selectedFileUri!=null){\r\r                                Log.w(\"selectedFileUri\", \" \" + selectedFileUri);\r\r                                String filename = getFileName(selectedFileUri);\r\r                                Log.w(\"filename\", \" \" + filename);\r\r                                String filePath = FileUtil.getPath(EditDoctorBusinessInfoActivity.this,selectedFileUri);\r\r                                assert filePath != null;\r\r                                File file = new File(filePath); // initialize file here\r\r                                long length = file.length() / 1024; // Size in KB\r\r                                Log.w(\"filesize\", \" \" + length);\r\r                                if(length>2000){\r\r                                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                                            .setTitleText(\"File Size\")\r                                            .setContentText(\"Please choose file size less than 2 MB \")\r                                            .setConfirmText(\"Ok\")\r                                            .show();\r                                }\r\r                                else{\r\r                                    certPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"pdf/*\"), file));\r\r                                    uploadCertPdf();\r                                }\r                            }\r\r                            else {\r\r                                Toasty.warning(EditDoctorBusinessInfoActivity.this, \"File Error!!Please upload Some other File\", Toasty.LENGTH_LONG).show();\r\r                            }\r                        }\r\r                        else {\r\r                            Toasty.warning(EditDoctorBusinessInfoActivity.this, \"File Error!!Please upload Some other File\", Toasty.LENGTH_LONG).show();\r                        }\r\r                    }\r                } catch (Exception e) {\r\r                    Log.w(\"Exception\", \" \" + e);\r                }\r            }\r\r            else if(requestCode == SELECT_GOVTID_CAMERA)\r            {\r                Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get(\"data\");\r\r                File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\r                OutputStream os;\r                try {\r                    os = new FileOutputStream(file);\r                    if (photo != null) {\r                        photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r                    }\r                    os.flush();\r                    os.close();\r                } catch (Exception e) {\r                    Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r                }\r\r                RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\r                govIdPart = MultipartBody.Part.createFormData(\"sampleFile\",  user_id+currentDateandTime+file.getName(), requestFile);\r\r                uploadGovtIDPdf();\r\r            }\r\r            else if(requestCode == SELECT_GOVTID_PICTURE){\r\r                try {\r                    if (resultCode == Activity.RESULT_OK) {\r\r                        Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\r                        Uri selectedImageUri = data.getData();\r\r                        Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\r                        String filename = null;\r                        if (selectedImageUri != null) {\r                            filename = getFileName(selectedImageUri);\r                        }\r\r                        Log.w(\"filename\", \" \" + filename);\r\r                        String filePath = FileUtil.getPath(EditDoctorBusinessInfoActivity.this,selectedImageUri);\r\r                        assert filePath != null;\r\r                        File file = new File(filePath); // initialize file here\r\r                        long length = file.length() / 1024; // Size in KB\r\r                        Log.w(\"filesize\", \" \" + length);\r\r                        govIdPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                        uploadGovtIDPdf();\r\r\r                    }\r                } catch (Exception e) {\r\r                    Log.w(\"Exception\", \" \" + e);\r                }\r\r            }\r\r            else if(requestCode== SELECT_GOVTID_PDF){\r\r                try {\r                    if (resultCode == Activity.RESULT_OK)\r                    {\r\r\r                        if(data!=null){\r\r\r                            Log.w(\"URI\", \" \" + data);\r\r                            Uri selectedFileUri = data.getData();\r\r                            if(selectedFileUri!=null){\r\r                                Log.w(\"selectedFileUri\", \" \" + selectedFileUri);\r\r                                String filename = getFileName(selectedFileUri);\r\r                                Log.w(\"filename\", \" \" + filename);\r\r                                String filePath = FileUtil.getPath(EditDoctorBusinessInfoActivity.this,selectedFileUri);\r\r                                assert filePath != null;\r\r                                File file = new File(filePath); // initialize file here\r\r                                long length = file.length() / 1024; // Size in KB\r\r                                Log.w(\"filesize\", \" \" + length);\r\r                                if(length>2000){\r\r                                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                                            .setTitleText(\"File Size\")\r                                            .setContentText(\"Please choose file size less than 2 MB \")\r                                            .setConfirmText(\"Ok\")\r                                            .show();\r                                }\r\r                                else{\r\r                                    govIdPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"pdf/*\"), file));\r\r                                    uploadGovtIDPdf();\r\r                                }\r                            }\r\r                            else {\r\r                                Toasty.warning(EditDoctorBusinessInfoActivity.this, \"File Error!!Please upload Some other File\", Toasty.LENGTH_LONG).show();\r\r                            }\r                        }\r\r                        else {\r\r                            Toasty.warning(EditDoctorBusinessInfoActivity.this, \"File Error!!Please upload Some other File\", Toasty.LENGTH_LONG).show();\r                        }\r\r                    }\r                } catch (Exception e) {\r\r                    Log.w(\"Exception\", \" \" + e);\r                }\r            }\r\r            else if(requestCode == SELECT_PHOTOID_CAMERA)\r            {\r                Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get(\"data\");\r\r                File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\r                OutputStream os;\r                try {\r                    os = new FileOutputStream(file);\r                    if (photo != null) {\r                        photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r                    }\r                    os.flush();\r                    os.close();\r                } catch (Exception e) {\r                    Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r                }\r\r                RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\r                photIDPart = MultipartBody.Part.createFormData(\"sampleFile\",  user_id+currentDateandTime+file.getName(), requestFile);\r\r                uploadPhotoIDPdf();\r\r            }\r\r            else if(requestCode == SELECT_PHOTOID_PICTURE){\r\r                try {\r                    if (resultCode == Activity.RESULT_OK) {\r\r                        Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\r                        Uri selectedImageUri = data.getData();\r\r                        Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\r                        String filename = null;\r                        if (selectedImageUri != null) {\r                            filename = getFileName(selectedImageUri);\r                        }\r\r                        Log.w(\"filename\", \" \" + filename);\r\r                        String filePath = FileUtil.getPath(EditDoctorBusinessInfoActivity.this,selectedImageUri);\r\r                        assert filePath != null;\r\r                        File file = new File(filePath); // initialize file here\r\r                        long length = file.length() / 1024; // Size in KB\r\r                        Log.w(\"filesize\", \" \" + length);\r\r                        photIDPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                        uploadPhotoIDPdf();\r\r\r                    }\r                } catch (Exception e) {\r\r                    Log.w(\"Exception\", \" \" + e);\r                }\r\r            }\r\r            else if(requestCode== SELECT_PHOTOID_PDF){\r                try {\r                    if (resultCode == Activity.RESULT_OK)\r                    {\r\r                        if(data!=null){\r\r\r                            Log.w(\"URI\", \" \" + data);\r\r                            Uri selectedFileUri = data.getData();\r\r                            if(selectedFileUri!=null){\r\r                                Log.w(\"selectedFileUri\", \" \" + selectedFileUri);\r\r                                String filename = getFileName(selectedFileUri);\r\r                                Log.w(\"filename\", \" \" + filename);\r\r                                String filePath = FileUtil.getPath(EditDoctorBusinessInfoActivity.this,selectedFileUri);\r\r                                assert filePath != null;\r\r                                File file = new File(filePath); // initialize file here\r\r                                long length = file.length() / 1024; // Size in KB\r\r                                Log.w(\"filesize\", \" \" + length);\r\r                                if(length>2000){\r\r                                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                                            .setTitleText(\"File Size\")\r                                            .setContentText(\"Please choose file size less than 2 MB \")\r                                            .setConfirmText(\"Ok\")\r                                            .show();\r                                }\r\r                                else{\r\r                                    photIDPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"pdf/*\"), file));\r\r                                    uploadPhotoIDPdf();\r\r                                }\r                            }\r\r                            else {\r\r                                Toasty.warning(EditDoctorBusinessInfoActivity.this, \"File Error!!Please upload Some other File\", Toasty.LENGTH_LONG).show();\r\r                            }\r                        }\r\r                        else {\r\r                            Toasty.warning(EditDoctorBusinessInfoActivity.this, \"File Error!!Please upload Some other File\", Toasty.LENGTH_LONG).show();\r                        }\r\r                    }\r                } catch (Exception e) {\r\r                    Log.w(\"Exception\", \" \" + e);\r                }\r            }\r\r        }\r\r        catch (Exception e){\r            Log.w(TAG,\"onActivityResult exception\"+e.toString());\r        }\r\r\r\r    }\r\r    @Override\r    public void onBackPressed() {\r        super.onBackPressed();\r        startActivity(new Intent(getApplicationContext(),DoctorProfileScreenActivity.class));\r        finish();\r    }\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @Override\r    public void onClick(View v) {\r\r        switch (v.getId()){\r\r            case R.id.buttonsubmit:\r                checkValidation();\r                break;\r\r            case R.id.img_bck:\r                onBackPressed();\r                break;\r\r            case R.id.buttonAddedu:\r                addEduc();\r                break;\r\r            case R.id.buttonAddexpr:\r                addExpr();\r                break;\r\r            case R.id.edtx_from:\r                getStartDate();\r                break;\r\r            case R.id.edtx_to:\r                if(edittext_from.getText().toString().equals(\"\")){\r\r                    Toasty.warning(getApplicationContext(), \"Please Choose Start Date\", Toast.LENGTH_SHORT).show();\r\r                }\r                else{\r\r                    getEndDate();\r                }\r\r                break;\r\r            case R.id.edtx_clinic_pic_choose:\r                chooseClinicImage();\r                break;\r\r            case R.id.edtx_clinic_certif_choose:\r                chooseCertPdf();\r                break;\r\r            case R.id.edtx_clinic_govtid_choose:\r                chooseGovIDPdf();\r                break;\r\r            case R.id.edtx_clinic_photoid_choose:\r                choosePhotoIDPdf();\r                break;\r\r            case R.id.edtx_edu_yr:\r                getEduYear();\r                break;\r\r                case R.id.txt_location_change:\r                gotoSetlocation();\r                break;\r\r\r        }\r\r    }\r\r    private void gotoSetlocation() {\r        Intent intent = new Intent(getApplicationContext(), SetLocationDoctorOldActivity.class);\r        intent.putExtra(\"fromactivity\",TAG);\r        startActivity(intent);\r    }\r\r    @Override\r    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\r        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r        if (requestCode == MY_PERMISSIONS_REQUEST_LOCATION) {\r            if (grantResults.length > 0\r                    && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r                if (ContextCompat.checkSelfPermission(getApplicationContext(),\r                        Manifest.permission.ACCESS_FINE_LOCATION)\r                        == PackageManager.PERMISSION_GRANTED) {\r\r\r                }\r            } else {\r                Toast.makeText(getApplicationContext(), \"permission denied\", Toast.LENGTH_LONG).show();\r            }\r        }\r\r        if (requestCode == REQUEST_READ_CLINIC_PIC_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r                chooseClinicImage();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_READ_CLINIC_PIC_PERMISSION);\r                        })\r                        .show();\r\r            }\r\r        } else if (requestCode == REQUEST_CLINIC_CAMERA_PERMISSION_CODE) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r                chooseClinicImage();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Camera for taking picture\")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r                        })\r                        .show();\r\r            }\r\r        } else if (requestCode == REQUEST_READ_CLINIC_PDF_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r                Intent intent = new Intent();\r                intent.setType(\"application/pdf\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_CERT_PDF);\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Pdf files \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PDF_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_READ_CLINIC_PDF_PERMISSION);\r                        })\r                        .show();\r\r            }\r\r        } else if (requestCode == REQUEST_READ_GOVT_ID_PDF_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r                Intent intent = new Intent();\r                intent.setType(\"application/pdf\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_GOVTID_PDF);\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Pdf Files \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVT_ID_PDF_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", new SweetAlertDialog.OnSweetClickListener() {\r                            @Override\r                            public void onClick(SweetAlertDialog sDialog) {\r                                sDialog.dismissWithAnimation();\r\r                                showWarning(REQUEST_READ_GOVT_ID_PDF_PERMISSION);\r                            }\r                        })\r                        .show();\r\r            }\r\r        } else if (requestCode == REQUEST_READ_PHOTO_ID_PDF_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r                Intent intent = new Intent();\r                intent.setType(\"application/pdf\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_PHOTOID_PDF);\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Pdf files \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTO_ID_PDF_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_READ_PHOTO_ID_PDF_PERMISSION);\r                        })\r                        .show();\r\r            }\r\r        } else if (requestCode == MY_PERMISSIONS_REQUEST_LOCATION) {\r            // If request is cancelled, the result arrays are empty.\r            if (grantResults.length > 0\r                    && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r                // permission was granted, yay! Do the\r                // location-related task you need to do.\r\r//                if(locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)){\r\r                checkValidation();\r\r\r                //\r\r//                else {\r//\r//                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r//                            .setTitleText(\"Permission Required\")\r//                            .setContentText(\"Please Turn on Gps \")\r//                            .setConfirmText(\"Ok\")\r//                            .setConfirmClickListener(sDialog -> {\r//\r//                                sDialog.dismissWithAnimation();\r//\r//                                startActivity(new Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS));\r//\r//                            })\r//                            .setCancelButton(\"Cancel\", sDialog -> {\r//                                sDialog.dismissWithAnimation();\r//\r//                                checkValidation();\r//                            })\r//                            .show();\r//                }\r\r\r            } else {\r\r                // permission denied\r                showWarning(MY_PERMISSIONS_REQUEST_LOCATION);\r\r\r            }\r\r        } else if (requestCode == REQUEST_READ_CERTIFICATE_PIC_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r                chooseCertPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CERTIFICATE_PIC_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_READ_CERTIFICATE_PIC_PERMISSION);\r                        })\r                        .show();\r\r            }\r\r        } else if (requestCode == REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r              chooseCertPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Camera for taking picture\")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE);\r                        })\r                        .show();\r\r            }\r\r        } else if (requestCode == REQUEST_READ_GOVTID_PIC_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r//                Intent intent = new Intent();\r//                intent.setType(\"image/*\");\r//                intent.setAction(Intent.ACTION_GET_CONTENT);\r//                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_GOVTID_PICTURE);\r\r                chooseGovIDPdf();\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVTID_PIC_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_READ_GOVTID_PIC_PERMISSION);\r                        })\r                        .show();\r\r            }\r\r        } else if (requestCode == REQUEST_GOVTID_CAMERA_PERMISSION_CODE) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r            /*    Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\r                //    intent.putExtra(MediaStore.EXTRA_SCREEN_ORIENTATION, ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\r\r                startActivityForResult(intent, SELECT_GOVTID_CAMERA);*/\r\r                chooseGovIDPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Camera for taking picture\")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_GOVTID_CAMERA_PERMISSION_CODE);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_GOVTID_CAMERA_PERMISSION_CODE);\r                        })\r                        .show();\r\r            }\r\r        } else if (requestCode == REQUEST_READ_PHOTOID_PIC_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r//                Intent intent = new Intent();\r//                intent.setType(\"image/*\");\r//                intent.setAction(Intent.ACTION_GET_CONTENT);\r//                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_PHOTOID_PICTURE);\r\r                choosePhotoIDPdf();\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTOID_PIC_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_READ_PHOTOID_PIC_PERMISSION);\r                        })\r                        .show();\r\r            }\r\r        } else if (requestCode == REQUEST_PHOTOID_CAMERA_PERMISSION_CODE) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r//                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r//\r//                //    intent.putExtra(MediaStore.EXTRA_SCREEN_ORIENTATION, ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\r//\r//                startActivityForResult(intent, SELECT_PHOTOID_CAMERA);\r\r                choosePhotoIDPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Camera for taking picture\")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_PHOTOID_CAMERA_PERMISSION_CODE);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", sDialog -> {\r                            sDialog.dismissWithAnimation();\r\r                            showWarning(REQUEST_PHOTOID_CAMERA_PERMISSION_CODE);\r                        })\r                        .show();\r\r            }\r\r        }\r\r\r    }\r\r\r    private void showWarning(int REQUEST_PERMISSION_CODE) {\r\r        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                .setTitleText(\"Sorry!!\")\r                .setContentText(\"You Can't proceed further unless you allow permission\")\r                .setConfirmText(\"Ok\")\r                .setConfirmClickListener(sDialog -> {\r\r                    sDialog.dismissWithAnimation();\r\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_PERMISSION_CODE);\r                    }\r\r\r                })\r                .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                .show();\r    }\r\r    public String getFileName(Uri uri) {\r        String result = null;\r        if (uri.getScheme().equals(\"content\")) {\r            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {\r                if (cursor != null && cursor.moveToFirst()) {\r                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));\r                }\r            }\r        }\r        if (result == null) {\r            result = uri.getPath();\r            int cut = result.lastIndexOf('/');\r            if (cut != -1) {\r                result = result.substring(cut + 1);\r            }\r        }\r        return result;\r    }\r\r\r    private void googleApiConnected() {\r\r        googleApiClient = new GoogleApiClient.Builder(Objects.requireNonNull(getApplicationContext())).\r                addConnectionCallbacks(this).\r                addOnConnectionFailedListener(this).\r                addApi(LocationServices.API).build();\r        googleApiClient.connect();\r\r    }\r    private void checkLocation() {\r        try {\r            LocationManager lm = (LocationManager) getApplicationContext().getSystemService(Context.LOCATION_SERVICE);\r            boolean gps_enabled = false;\r            boolean network_enabled = false;\r\r            try {\r                gps_enabled = lm.isProviderEnabled(LocationManager.GPS_PROVIDER);\r            } catch (Exception ignored) {\r            }\r\r            try {\r                network_enabled = lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER);\r            } catch (Exception ignored) {\r            }\r\r            if (!gps_enabled && !network_enabled) {\r\r                if (!lm.isProviderEnabled(LocationManager.GPS_PROVIDER)) {\r                    getMyLocation();\r                }\r\r            } else {\r                getLatandLong();\r            }\r        } catch (Exception e) {\r            e.printStackTrace();\r        }\r\r    }\r    @Override\r    public void onLocationChanged(Location location) {\r        mLastLocation = location;\r       /* latitude = mLastLocation.getLatitude();\r        longitude = mLastLocation.getLongitude();\r        Log.w(TAG,\"onLocationChanged : \"+\" latitude : \"+latitude+ \" longitude : \"+longitude);\r*/\r\r\r\r\r\r    }\r    @Override\r    public void onConnected(@Nullable Bundle bundle) {\r        permissionChecking();\r    }\r    @Override\r    public void onConnectionSuspended(int i) {\r\r    }\r    @Override\r    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {\r\r    }\r    @SuppressLint(\"LongLogTag\")\r    @Override\r    public void onMapReady(GoogleMap googleMap) {\r\r\r    }\r    private void permissionChecking() {\r        if (getApplicationContext() != null) {\r            if (Build.VERSION.SDK_INT >= 23 && (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) &&\r                    (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED)) {\r\r                ActivityCompat.requestPermissions(Objects.requireNonNull(this), new String[]{Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION}, 5);\r\r            } else {\r\r                checkLocation();\r            }\r        }\r    }\r    public void getMyLocation() {\r\r        if (googleApiClient != null) {\r\r            if (googleApiClient.isConnected()) {\r                if(getApplicationContext() != null){\r                    if (ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r                        // TODO: Consider calling\r                        //    ActivityCompat#requestPermissions\r                        // here to request the missing permissions, and then overriding\r                        //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\r                        //                                          int[] grantResults)\r                        // to handle the case where the user grants the permission. See the documentation\r                        // for ActivityCompat#requestPermissions for more details.\r\r                        return;\r                    }\r\r                }\r\r                mLastLocation = LocationServices.FusedLocationApi.getLastLocation(googleApiClient);\r                LocationRequest locationRequest = new LocationRequest();\r                locationRequest.setInterval(2000);\r                locationRequest.setFastestInterval(2000);\r                locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);\r                LocationSettingsRequest.Builder builder = new LocationSettingsRequest.Builder().addLocationRequest(locationRequest);\r                builder.setAlwaysShow(true);\r                LocationServices.FusedLocationApi.requestLocationUpdates(googleApiClient, locationRequest, this);\r                PendingResult<LocationSettingsResult> result = LocationServices.SettingsApi.checkLocationSettings(googleApiClient, builder.build());\r                result.setResultCallback(result1 -> {\r                    Status status = result1.getStatus();\r                    switch (status.getStatusCode()) {\r                        case LocationSettingsStatusCodes.SUCCESS:\r                            // All location settings are satisfied.\r                            // You can initialize location requests here.\r                            mLastLocation = LocationServices.FusedLocationApi.getLastLocation(googleApiClient);\r\r\r\r\r\r\r                            Handler handler = new Handler();\r                            int delay = 1000; //milliseconds\r\r                            handler.postDelayed(new Runnable() {\r                                @SuppressLint(\"LongLogTag\")\r                                public void run() {\r                                    //do something\r                                    Log.w(TAG, \"getMyLocation-->\");\r                                    if (new ConnectionDetector(getApplicationContext()).isNetworkAvailable(getApplicationContext())) {\r                                        doctorDetailsByUserIdResponseCall();\r                                    }\r\r                                    //parkingListResponseCall(checkinhours,checkouthours,requestCheckinDate,requestCheckoutDate, selectedVehicleTypeId);\r\r\r                                }\r                            }, delay);\r\r\r                            break;\r                        case LocationSettingsStatusCodes.RESOLUTION_REQUIRED:\r                            try {\r                                status.startResolutionForResult(this, REQUEST_CHECK_SETTINGS_GPS);\r                            } catch (IntentSender.SendIntentException e) {\r                                // Ignore the error.\r                            }\r                            break;\r                        case LocationSettingsStatusCodes.SETTINGS_CHANGE_UNAVAILABLE:\r                            break;\r                    }\r                });\r            }\r\r\r        }\r    }\r    private void getLatandLong() {\r        try {\r            if (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 1);\r\r            } else {\r                GPSTracker gps = new GPSTracker(getApplicationContext());\r                // Check if GPS enabled\r                if (gps.canGetLocation()) {\r                    latitude = gps.getLatitude();\r                    longitude = gps.getLongitude();\r\r                    Log.w(TAG, \"getLatandLong--->\" + \"latitude\" + \" \" + latitude + \"longitude\" + \" \" + longitude);\r\r\r\r\r                }\r            }\r\r\r\r\r        } catch (Exception e) {\r            e.printStackTrace();\r        }\r    }\r    public boolean validdCommunicationType() {\r        if(strcommunicationtype.equalsIgnoreCase(\"Select Communication Type\")){\r            final AlertDialog alertDialog = new AlertDialog.Builder(EditDoctorBusinessInfoActivity.this).create();\r            alertDialog.setMessage(getString(R.string.err_msg_type_of_communicationtype));\r            alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, \"Ok\",\r                    (dialog, which) -> alertDialog.cancel());\r            alertDialog.show();\r\r            return false;\r        }\r\r        return true;\r    }\r\r\r    @SuppressLint(\"LogNotTimber\")\r    private void doctorDetailsByUserIdResponseCall() {\r        avi_indicator.setVisibility(View.VISIBLE);\r        avi_indicator.smoothToShow();\r        RestApiInterface ApiService = APIClient.getClient().create(RestApiInterface.class);\r        Call<DoctorDetailsByUserIdResponse> call = ApiService.doctorDetailsByUserIdResponseCall(RestUtils.getContentType(),doctorDetailsByUserIdRequest());\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\r        call.enqueue(new Callback<DoctorDetailsByUserIdResponse>() {\r            @SuppressLint({\"SetTextI18n\", \"LogNotTimber\"})\r            @Override\r            public void onResponse(@NonNull Call<DoctorDetailsByUserIdResponse> call, @NonNull Response<DoctorDetailsByUserIdResponse> response) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"DoctorDetailsByUserIdResponse\"+ \"--->\" + new Gson().toJson(response.body()));\r                if (response.body() != null) {\r                    if(200 == response.body().getCode()){\r\r                        if(response.body().getData().getClinic_pic() != null) {\r                            doctorclinicdetailsResponseList = response.body().getData().getClinic_pic();\r                        }\r                        if(response.body().getData() != null) {\r                            id = response.body().getData().get_id();\r                            Dr_title = response.body().getData().getDr_title();\r                            Dr_name = response.body().getData().getDr_name();\r                            strcommunicationtype = response.body().getData().getCommunication_type();\r                        }\r                        if(response.body().getData().getClinic_name() != null){\r                            edittext_clinic_name.setText(response.body().getData().getClinic_name());\r                        } if(response.body().getData().getConsultancy_fees() != 0){\r                            edtx_service_charge_amount.setText(response.body().getData().getConsultancy_fees()+\"\");\r                        }\r                        if(!isSetAddress){\r                             if(response.body().getData().getClinic_loc() != null){\r                                 Clinic_loc = response.body().getData().getClinic_loc();\r                                 txt_clinic_addr.setText(response.body().getData().getClinic_loc()+\"\");\r                             }\r                            Clinic_lat = response.body().getData().getClinic_lat();\r                            Clinic_long = response.body().getData().getClinic_long();\r                            Log.w(TAG, \"Clinic_lat : \" + Clinic_lat + \" Clinic_long : \" + Clinic_long);\r                        }\r\r\r                        if (response.body().getData().getEducation_details() != null){\r                            education_detailsList= response.body().getData().getEducation_details();\r\r                            for(int i=0;i<education_detailsList.size();i++) {\r                                DoctorBusinessInfoUpdateRequest.EducationDetailsBean educationDetailsBean = new DoctorBusinessInfoUpdateRequest.EducationDetailsBean();\r                                educationDetailsBean.setEducation(education_detailsList.get(i).getEducation());\r                                educationDetailsBean.setYear(education_detailsList.get(i).getYear());\r                                education_details.add(educationDetailsBean);\r                            }\r\r                        }if (response.body().getData().getExperience_details() != null){\r                            experience_detailsList= response.body().getData().getExperience_details();\r                            for(int i=0;i<experience_detailsList.size();i++) {\r                                DoctorBusinessInfoUpdateRequest.ExperienceDetailsBean experienceDetailsBean = new DoctorBusinessInfoUpdateRequest.ExperienceDetailsBean();\r                                experienceDetailsBean.setCompany(experience_detailsList.get(i).getCompany());\r                                experienceDetailsBean.setFrom(experience_detailsList.get(i).getFrom());\r                                experienceDetailsBean.setTo(experience_detailsList.get(i).getTo());\r                                experienceDetailsBean.setYearsofexperience(experience_detailsList.get(i).getYearsofexperience());\r                                experience_details.add(experienceDetailsBean);\r                            }\r\r                        }if (response.body().getData().getSpecialization() != null){\r                            specialzationListEdit = response.body().getData().getSpecialization();\r\r                        }if (response.body().getData().getPet_handled() != null){\r                            pethandleListEdit = response.body().getData().getPet_handled();\r\r                        }\r\r                        if(education_detailsList != null && education_detailsList.size()>0){\r                            recylerView_added_education.setVisibility(View.VISIBLE);\r                            setDoctorEducations(education_detailsList);\r                        }else{\r                            recylerView_added_education.setVisibility(View.GONE);\r\r                        }\r                        if(experience_detailsList != null && experience_detailsList.size()>0){\r                            recylerView_added_experience.setVisibility(View.VISIBLE);\r                            setDoctorExperience(experience_detailsList);\r                        }else{\r                            recylerView_added_experience.setVisibility(View.GONE);\r\r                        }\r\r                        if(response.body().getData().getClinic_pic() != null){\r                            clinicPicBeansEdit = response.body().getData().getClinic_pic();\r                           for(int i=0;i<clinicPicBeansEdit.size();i++){\r                                DoctorBusinessInfoUpdateRequest.ClinicPicBean clinicPicBean = new DoctorBusinessInfoUpdateRequest.ClinicPicBean();\r                                clinicPicBean.setClinic_pic(clinicPicBeansEdit.get(i).getClinic_pic());\r                                clinic_pic.add(clinicPicBean);\r                            }\r\r                           if(clinic_pic!=null&&clinic_pic.size()>0){\r\r                               doctorEditClinicImageListAdapter = new DoctorEditClinicImageListAdapter(getApplicationContext(), clinicPicBeansEdit,clinic_pic);\r                               recylerView_choosen_clinic_images.setAdapter(doctorEditClinicImageListAdapter);\r\r                           }\r                           else {\r\r                               recylerView_choosen_clinic_images.setVisibility(View.GONE);\r                           }\r\r\r                        }\r                        if(response.body().getData().getCertificate_pic() != null){\r                            certificatePicBeansEdit = response.body().getData().getCertificate_pic();\r                            for(int i=0;i<certificatePicBeansEdit.size();i++){\r                                DoctorBusinessInfoUpdateRequest.CertificatePicBean certificatePicBean = new DoctorBusinessInfoUpdateRequest.CertificatePicBean();\r                                certificatePicBean.setCertificate_pic(certificatePicBeansEdit.get(i).getCertificate_pic());\r                                certificate_pic.add(certificatePicBean);\r                            }\r\r                            if(clinic_pic!=null&&clinic_pic.size()>0){\r\r\r                                doctorEditCertificateListAdapter = new DoctorEditCertificateListAdapter(getApplicationContext(), certificatePicBeansEdit,certificate_pic);\r                                recylerView_choosen_certificate_images.setAdapter(doctorEditCertificateListAdapter);\r\r                            }\r\r                            else {\r\r                                recylerView_choosen_certificate_images.setVisibility(View.GONE);\r                            }\r\r                        }\r                        if(response.body().getData().getGovt_id_pic() != null){\r                            govtIdPicBeansEdit = response.body().getData().getGovt_id_pic();\r                            for(int i=0;i<govtIdPicBeansEdit.size();i++){\r                                DoctorBusinessInfoUpdateRequest.GovtIdPicBean govtIdPicBean = new DoctorBusinessInfoUpdateRequest.GovtIdPicBean();\r                                govtIdPicBean.setGovt_id_pic(govtIdPicBeansEdit.get(i).getGovt_id_pic());\r                                govt_id_pic.add(govtIdPicBean);\r                            }\r\r                            if(govt_id_pic!=null&&govt_id_pic.size()>0){\r\r                                doctorEditGovtIDListAdapter = new DoctorEditGovtIDListAdapter(getApplicationContext(), govtIdPicBeansEdit,govt_id_pic);\r                                recylerView_choosen_govtid_images.setAdapter(doctorEditGovtIDListAdapter);\r\r                            }\r\r                            else {\r\r                                recylerView_choosen_govtid_images.setVisibility(View.GONE);\r                            }\r\r                        }\r                        if(response.body().getData().getPhoto_id_pic() != null){\r                            photoIdPicBeansEdit = response.body().getData().getPhoto_id_pic();\r                            for(int i=0;i<photoIdPicBeansEdit.size();i++){\r                                DoctorBusinessInfoUpdateRequest.PhotoIdPicBean photoIdPicBean = new DoctorBusinessInfoUpdateRequest.PhotoIdPicBean();\r                                photoIdPicBean.setPhoto_id_pic(photoIdPicBeansEdit.get(i).getPhoto_id_pic());\r                                photo_id_pic.add(photoIdPicBean);\r                            }\r\r                            if(photo_id_pic!=null&&photo_id_pic.size()>0){\r\r                                doctorEditPhotoIDListAdapter = new DoctorEditPhotoIDListAdapter(getApplicationContext(), photoIdPicBeansEdit,photo_id_pic);\r                                recylerView_choosen_photo_id_images.setAdapter(doctorEditPhotoIDListAdapter);\r\r                            }\r\r                            else {\r\r                                recylerView_choosen_photo_id_images.setVisibility(View.GONE);\r                            }\r\r\r                        }\r\r                        if(response.body().getData().getSignature() != null && !response.body().getData().getSignature().isEmpty()){\r                            Log.w(TAG,\"getSignature : \"+response.body().getData().getSignature());\r                            digitalSignatureServerUrlImagePath = response.body().getData().getSignature();\r                            Log.w(TAG,\"digitalSignatureServerUrlImagePath : \"+digitalSignatureServerUrlImagePath);\r                            if (digitalSignatureServerUrlImagePath != null && !digitalSignatureServerUrlImagePath.isEmpty()) {\r                                Glide.with(getApplicationContext())\r                                        .load(digitalSignatureServerUrlImagePath)\r                                        .into(ivdigitalsignature);\r                            }\r                        }\r\r\r                        clinic_about_dr = response.body().getData().getDoctor_info();\r\r                        clinic_dr_id = response.body().getData().getDoctor_id();\r\r                        clinic_number = response.body().getData().getClinic_no();\r\r                        if(clinic_about_dr!=null&&!clinic_about_dr.isEmpty()){\r\r                            edtx_about_doctor.setText(clinic_about_dr+\"\");\r                        }\r                        else {\r\r                            edtx_about_doctor.setText(\"\");\r                        }\r\r                        if(clinic_dr_id!=null&&!clinic_dr_id.isEmpty()){\r\r                            edtx_doctor_id.setText(clinic_dr_id+\"\");\r                        }\r                        else {\r\r                            edtx_doctor_id.setText(\"\");\r                        }\r\r                        if(clinic_number!=null&&!clinic_number.isEmpty()){\r\r                            edtx_clinic_number.setText(clinic_number+\"\");\r                        }\r                        else {\r\r                            edtx_clinic_number.setText(\"\");\r                        }\r                   \r                        if (new ConnectionDetector(EditDoctorBusinessInfoActivity.this).isNetworkAvailable(EditDoctorBusinessInfoActivity.this)) {\r                            dropDownListResponseCall();\r\r                        }\r\r\r                    }else{\r\r                    }\r\r\r                }\r            }\r\r            @Override\r            public void onFailure(@NonNull Call<DoctorDetailsByUserIdResponse> call, @NonNull Throwable t) {\r                avi_indicator.smoothToHide();\r\r                Log.w(TAG,\"DoctorDetailsResponse flr\"+\"--->\" + t.getMessage());\r            }\r        });\r\r    }\r    private void setDoctorExperience(List<DoctorDetailsByUserIdResponse.DataBean.ExperienceDetailsBean> experience_detailsList) {\r        recylerView_added_experience.setLayoutManager(new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.VERTICAL, false));\r        recylerView_added_experience.setItemAnimator(new DefaultItemAnimator());\r        DoctorAddExpAdapter doctorAddExpAdapter = new DoctorAddExpAdapter(getApplicationContext(),experience_detailsList,experience_details);\r        recylerView_added_experience.setAdapter(doctorAddExpAdapter);\r    }\r\r    private void setDoctorEducations(List<DoctorDetailsByUserIdResponse.DataBean.EducationDetailsBean> education_detailsList) {\r        recylerView_added_education.setLayoutManager(new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.VERTICAL, false));\r        recylerView_added_education.setItemAnimator(new DefaultItemAnimator());\r        DoctorAddEducAdapter doctorAddEducAdapter = new DoctorAddEducAdapter(getApplicationContext(),education_detailsList,education_details);\r        recylerView_added_education.setAdapter(doctorAddEducAdapter);\r    }\r\r    private DoctorDetailsByUserIdRequest doctorDetailsByUserIdRequest() {\r        DoctorDetailsByUserIdRequest doctorDetailsByUserIdRequest = new DoctorDetailsByUserIdRequest();\r        doctorDetailsByUserIdRequest.setUser_id(user_id);\r        Log.w(TAG,\"doctorDetailsByUserIdRequest\"+ \"--->\" + new Gson().toJson(doctorDetailsByUserIdRequest));\r        return doctorDetailsByUserIdRequest;\r    }\r\r\r\r    @SuppressLint({\"LongLogTag\", \"LogNotTimber\"})\r    private void doctorBusinessInfoUpdateResponseCall() {\r        avi_indicator.setVisibility(View.VISIBLE);\r        avi_indicator.smoothToShow();\r        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);\r        Call<DocBusInfoUploadResponse> call = apiInterface.doctorBusinessInfoUpdateResponseCall(RestUtils.getContentType(), doctorBusinessInfoUpdateRequest());\r        Log.w(TAG,\"doctorBusinessInfoUpdateResponseCall url  :%s\"+\" \"+ call.request().url().toString());\r\r        call.enqueue(new Callback<DocBusInfoUploadResponse>() {\r            @SuppressLint({\"LongLogTag\", \"LogNotTimber\"})\r            @Override\r            public void onResponse(@NonNull Call<DocBusInfoUploadResponse> call, @NonNull Response<DocBusInfoUploadResponse> response) {\r\r                Log.w(TAG,\"doctorBusinessInfoUpdateResponseCall\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                avi_indicator.smoothToHide();\r\r                if (response.body() != null) {\r                    if(response.body().getCode() == 200){\r                        if(response.body().getMessage() != null){\r                            showRegisterSuccessalert(response.body().getMessage());\r                        }\r\r                    }\r                    else{\r                        showErrorLoading(response.body().getMessage());\r                    }\r                }\r\r\r            }\r\r            @SuppressLint(\"LongLogTag\")\r            @Override\r            public void onFailure(@NonNull Call<DocBusInfoUploadResponse> call, @NonNull Throwable t) {\r\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"doctorBusinessInfoUpdateResponseCall flr\"+\"--->\" + t.getMessage());\r            }\r        });\r\r    }\r    @SuppressLint(\"LongLogTag\")\r    private DoctorBusinessInfoUpdateRequest doctorBusinessInfoUpdateRequest() {\r        /*\r         * _id : 5fb3bde8fda8295ba10a72fe\r         * user_id : 5fb22773e70b0d3cc5b2c19d\r         * dr_title : Dr\r         * dr_name : mohammed\r         * clinic_name : Mohammed Clinic\r         * clinic_loc : Muthamil nager Kodugaiyur\r         * clinic_lat : 18.12\r         * clinic_long : 80.0987\r         * education_details : [{\"education\":\"10 th pass\",\"year\":\"2020\"},{\"education\":\"10 th pass\",\"year\":\"2020\"}]\r         * experience_details : [{\"company\":\"triton it slotuions\",\"from\":\"22-10-2020\",\"to\":\"22-10-2021\"},{\"company\":\"triton it slotuions\",\"from\":\"22-10-2020\",\"to\":\"22-10-2021\"},{\"company\":\"triton it slotuions\",\"from\":\"22-10-2020\",\"to\":\"22-10-2021\"}]\r         * specialization : [{\"specialization\":\"Spec - 1\"},{\"specialization\":\"Spec - 1\"},{\"specialization\":\"Spec - 1\"}]\r         * pet_handled : [{\"pet_handled\":\"Pet - 1\"},{\"pet_handled\":\"Pet - 1\"}]\r         * clinic_pic :\r         * certificate_pic : [{\"certificate_pic\":\"\"},{\"certificate_pic\":\"\"}]\r         * govt_id_pic : [{\"govt_id_pic\":\"\"},{\"govt_id_pic\":\"\"}]\r         * photo_id_pic : [{\"photo_id_pic\":\"\"},{\"photo_id_pic\":\"\"}]\r         * profile_status : 0\r         * profile_verification_status : Not verified\r         * date_and_time : 23-10-2020 11:10 AM\r         */\r\r        if(Clinic_lat == 0){\r            Clinic_lat = latitude;\r        }if(Clinic_long == 0){\r            Clinic_long = longitude;\r        }\r\r        SimpleDateFormat sdf = new SimpleDateFormat(\"dd/MM/yyyy hh:mm aa\", Locale.getDefault());\r        String currentDateandTime = sdf.format(new Date());\r        DoctorBusinessInfoUpdateRequest doctorBusinessInfoUpdateRequest = new DoctorBusinessInfoUpdateRequest();\r        doctorBusinessInfoUpdateRequest.set_id(id);\r        doctorBusinessInfoUpdateRequest.setUser_id(user_id);\r        doctorBusinessInfoUpdateRequest.setDr_title(Dr_title);\r        doctorBusinessInfoUpdateRequest.setDr_name(Dr_name);\r        doctorBusinessInfoUpdateRequest.setClinic_name(edittext_clinic_name.getText().toString());\r        doctorBusinessInfoUpdateRequest.setClinic_loc(txt_clinic_addr.getText().toString());\r        doctorBusinessInfoUpdateRequest.setCommunication_type(strcommunicationtype);\r        doctorBusinessInfoUpdateRequest.setClinic_lat(Clinic_lat);\r        doctorBusinessInfoUpdateRequest.setClinic_long(Clinic_long);\r        doctorBusinessInfoUpdateRequest.setEducation_details(education_details);\r        doctorBusinessInfoUpdateRequest.setExperience_details(experience_details);\r        doctorBusinessInfoUpdateRequest.setSpecialization(specialization);\r        doctorBusinessInfoUpdateRequest.setPet_handled(pet_handled);\r        doctorBusinessInfoUpdateRequest.setClinic_pic(clinic_pic);\r        doctorBusinessInfoUpdateRequest.setCertificate_pic(certificate_pic);\r        doctorBusinessInfoUpdateRequest.setGovt_id_pic(govt_id_pic);\r        doctorBusinessInfoUpdateRequest.setPhoto_id_pic(photo_id_pic);\r        doctorBusinessInfoUpdateRequest.setProfile_status(true);\r        doctorBusinessInfoUpdateRequest.setProfile_verification_status(\"Last update not verified\");\r        doctorBusinessInfoUpdateRequest.setDate_and_time(currentDateandTime);\r        doctorBusinessInfoUpdateRequest.setDoctor_exp(0);\r        doctorBusinessInfoUpdateRequest.setConsultancy_fees(consultancy_fees);\r        doctorBusinessInfoUpdateRequest.setMobile_type(\"Android\");\r        doctorBusinessInfoUpdateRequest.setSignature(digitalSignatureServerUrlImagePath);\r        doctorBusinessInfoUpdateRequest.setDoctor_id(clinic_dr_id);\r        doctorBusinessInfoUpdateRequest.setClinic_no(clinic_number);\r        doctorBusinessInfoUpdateRequest.setDoctor_info(clinic_about_dr);\r\r        if(Clinic_lat!=0&&Clinic_long!=0){\r            String city = getCity(Clinic_lat,Clinic_long);\r            if(city!=null&&!city.isEmpty()){\r\r                doctorBusinessInfoUpdateRequest.setCity_name(city);\r            }\r        }\r\r        Log.w(TAG,\"doctorBusinessInfoUpdateRequest Request\"+ \"--->\" + new Gson().toJson(doctorBusinessInfoUpdateRequest));\r        return doctorBusinessInfoUpdateRequest;\r    }\r\r    private String getCity(double clinic_lat, double clinic_long) {\r\r        Geocoder geocoder = new Geocoder(this, Locale.getDefault());\r        List<Address> addresses = null;\r        try {\r            addresses = geocoder.getFromLocation(clinic_lat, clinic_long, 1);\r        } catch (IOException e) {\r            e.printStackTrace();\r        }\r\r        Log.w(TAG,\"addresses \" + new Gson().toJson(addresses));\r        String cityName = addresses.get(0).getLocality();\r        String stateName = addresses.get(0).getSubLocality();\r        String countryName = addresses.get(0).getSubAdminArea();\r\r        return cityName;\r    }\r\r    public void showErrorLoading(String errormesage){\r        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);\r        alertDialogBuilder.setMessage(errormesage);\r        alertDialogBuilder.setPositiveButton(\"ok\",\r                (arg0, arg1) -> hideLoading());\r\r\r\r\r        AlertDialog alertDialog = alertDialogBuilder.create();\r        alertDialog.show();\r    }\r    public void hideLoading(){\r        try {\r            alertDialog.dismiss();\r        }catch (Exception ignored){\r\r        }\r    }\r\r    public boolean addJpgSignatureToGallery(Bitmap signature) {\r        boolean result = false;\r        try {\r            File photo = new File(getAlbumStorageDir(\"SignaturePad\"), String.format(\"Signature_%d.jpg\", System.currentTimeMillis()));\r            saveBitmapToJPG(signature, photo);\r            scanMediaFile(photo);\r            Log.w(TAG,\"signature :\"+signature+\"  \"+\"photo:\"+photo);\r            StoredPathDigitalSignature = String.valueOf(photo);\r            Log.w(TAG,\"StoredPathDigitalSignature--->\"+StoredPathDigitalSignature);\r\r            uploadDigitalSignatureImageRequest();\r            result = true;\r        } catch (IOException e) {\r            e.printStackTrace();\r        }\r        return result;\r    }\r    public File getAlbumStorageDir(String albumName) {\r        // Get the directory for the user's public pictures directory.\r        File file = new File(Environment.getExternalStoragePublicDirectory(\r                Environment.DIRECTORY_PICTURES), albumName);\r        Log.w(TAG,\"file:\"+file);\r        if (!file.mkdirs()) {\r            Log.e(\"SignaturePad\", \"Directory not created\");\r        }\r        return file;\r    }\r    public void saveBitmapToJPG(Bitmap bitmap, File photo) throws IOException {\r        Bitmap newBitmap = Bitmap.createBitmap(bitmap.getWidth(), bitmap.getHeight(), Bitmap.Config.ARGB_8888);\r        Canvas canvas = new Canvas(newBitmap);\r        canvas.drawColor(Color.WHITE);\r        canvas.drawBitmap(bitmap, 0, 0, null);\r        OutputStream stream = new FileOutputStream(photo);\r        newBitmap.compress(Bitmap.CompressFormat.JPEG, 80, stream);\r        Log.w(TAG,\"bitmap :\"+bitmap+\"  \"+\"photo:\"+photo);\r\r        stream.close();\r    }\r    private void scanMediaFile(File photo) {\r        Intent mediaScanIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);\r        Uri contentUri = Uri.fromFile(photo);\r        mediaScanIntent.setData(contentUri);\r        Log.w(TAG,\"contentUri\"+contentUri);\r        EditDoctorBusinessInfoActivity.this.sendBroadcast(mediaScanIntent);\r    }\r    @SuppressLint(\"LogNotTimber\")\r    private void uploadDigitalSignatureImageRequest1() {\r        avi_indicator.show();\r        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(getdigitalSignaturePicMultipart());\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r        call.enqueue(new Callback<FileUploadResponse>() {\r            @Override\r            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"Profpic\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                llheaderdigitalsignature.setVisibility(View.GONE);\r                mSignaturePad.clear();\r                Log.w(TAG,\"DigitalSignaturepic\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                // Log.w(TAG,\"Profile\"+ \"status \" + status);\r                if (response.body() != null && response.body().getCode() == 200) {\r                    if (response.body() != null) {\r                        digitalSignatureServerUrlImagePath = response.body().getData();\r                        Log.w(TAG, \"digitalSignatureServerUrlImagePath \" + digitalSignatureServerUrlImagePath);\r                        Calendar c = Calendar.getInstance();\r                        Log.w(TAG, \"Current time => \" + c.getTime());\r\r\r                        if (digitalSignatureServerUrlImagePath != null && !digitalSignatureServerUrlImagePath.isEmpty()) {\r\r                            Log.w(TAG,\"digitalSignatureServerUrlImagePath--->\"+digitalSignatureServerUrlImagePath);\r\r                            Glide\r                                    .with(getApplicationContext())\r                                    .load(digitalSignatureServerUrlImagePath)\r                                    .apply(new RequestOptions().override(600, 200))\r                                    .diskCacheStrategy(DiskCacheStrategy.ALL)\r                                    .into(ivdigitalsignature);\r\r\r\r                        }\r                        else{\r                            Glide.with(getApplicationContext())\r                                    .load(R.drawable.digital_signature)\r                                    .into(ivdigitalsignature);\r\r                        }\r\r\r\r                    } else {\r                        Log.w(TAG, \"digitalSignatureServerUrlImagePath \" + \"response body null part wotking \");\r                    }\r\r                }\r\r\r\r\r            }\r\r            @Override\r            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r                avi_indicator.smoothToHide();\r                mSignaturePad.clear();\r                llheaderdigitalsignature.setVisibility(View.GONE);\r                Log.w(TAG,\"digitalSignatureServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r            }\r        });\r\r\r    }\r    private MultipartBody.Part getdigitalSignaturePicMultipart() {\r        StoredPathDigitalSignature = decodeFile(StoredPathDigitalSignature, 500, 500);\r        RequestBody requestFile = RequestBody.create(MediaType.parse(\"text/plain\"), \"\");\r        if (StoredPathDigitalSignature != null && !StoredPathDigitalSignature.isEmpty()) {\r            File file = new File(StoredPathDigitalSignature);\r            requestFile = RequestBody.create(MediaType.parse(\"image/*\"), file);\r        }\r        Log.w(TAG,\"getdigitalSignaturePicMultipart--->\"+\"StoredPathDigitalSignature :\"+ StoredPathDigitalSignature +\" \"+\"requestFile :\"+requestFile);\r        MultipartBody.Part filePart = MultipartBody.Part.createFormData(\"sampleFile\",StoredPathDigitalSignature, requestFile);\r        Log.w(TAG,\"ImageStorepath\"+ \"getdigitalSignaturePicMultipart: \" + new Gson().toJson(filePart));\r\r        return filePart;\r    }\r\r\r    private void uploadDigitalSignatureImageRequest() {\r        avi_indicator.show();\r        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(siganaturePart);\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r        call.enqueue(new Callback<FileUploadResponse>() {\r            @SuppressLint(\"LogNotTimber\")\r            @Override\r            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"Profpic\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                llheaderdigitalsignature.setVisibility(View.GONE);\r                mSignaturePad.clear();\r                Log.w(TAG,\"DigitalSignaturepic\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                // Log.w(TAG,\"Profile\"+ \"status \" + status);\r                if (response.body() != null && response.body().getCode() == 200) {\r                    if (response.body() != null) {\r                        digitalSignatureServerUrlImagePath = response.body().getData();\r                        Log.w(TAG, \"digitalSignatureServerUrlImagePath \" + digitalSignatureServerUrlImagePath);\r                        Calendar c = Calendar.getInstance();\r\r\r                        if (digitalSignatureServerUrlImagePath != null && !digitalSignatureServerUrlImagePath.isEmpty()) {\r\r                            Log.w(TAG,\"digitalSignatureServerUrlImagePath--->\"+digitalSignatureServerUrlImagePath);\r\r                            Glide\r                                    .with(getApplicationContext())\r                                    .load(digitalSignatureServerUrlImagePath)\r                                    .apply(new RequestOptions().override(600, 200))\r                                    .diskCacheStrategy(DiskCacheStrategy.ALL)\r                                    .into(ivdigitalsignature);\r\r\r\r                        }\r                        else{\r                            Glide.with(getApplicationContext())\r                                    .load(R.drawable.digital_signature)\r                                    .into(ivdigitalsignature);\r\r                        }\r\r\r\r                    } else {\r                        Log.w(TAG, \"digitalSignatureServerUrlImagePath \" + \"response body null part wotking \");\r                    }\r\r                }\r\r\r\r            }\r\r            @Override\r            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r                // avi_indicator.smoothToHide();\r                Log.w(TAG,\"DigitalSignaturepic\"+ \"On failure working\"+ t.getMessage());\r                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r            }\r        });\r\r\r    }\r\r\r    private String decodeFile(String path, int DESIREDWIDTH, int DESIREDHEIGHT) {\r\r        Bitmap scaledBitmap = null;\r\r        try {\r            // Part 1: Decode image\r            Bitmap unscaledBitmap = ScalingUtilities.decodeFile(path, DESIREDWIDTH, DESIREDHEIGHT, ScalingUtilities.ScalingLogic.FIT);\r\r            if (!(unscaledBitmap.getWidth() <= DESIREDWIDTH && unscaledBitmap.getHeight() <= DESIREDHEIGHT)) {\r                // Part 2: Scale image\r                scaledBitmap = ScalingUtilities.createScaledBitmap(unscaledBitmap, DESIREDWIDTH, DESIREDHEIGHT, ScalingUtilities.ScalingLogic.FIT);\r            } else {\r                unscaledBitmap.recycle();\r                return path;\r            }\r\r            // Store to tmp file\r\r            String extr = Environment.getExternalStorageDirectory().toString();\r            File mFolder = new File(extr + \"/Petfolio\");\r            if (!mFolder.exists()) {\r                mFolder.mkdir();\r            }\r\r\r            Long tsLong = System.currentTimeMillis()/1000;\r            String ts = tsLong.toString();\r\r            String s = ts+\",\"+\"tmp.png\";\r\r            Log.w(TAG,\"Test\"+ extr + s);\r\r            File f = new File(mFolder.getAbsolutePath(), s);\r\r            strMyImagePath = f.getAbsolutePath();\r            Log.w(TAG,\"strMyImagePath\"+ strMyImagePath);\r\r            FileOutputStream fos = null;\r            try {\r                fos = new FileOutputStream(f);\r                scaledBitmap.compress(Bitmap.CompressFormat.JPEG, 75, fos);\r                fos.flush();\r                fos.close();\r            } catch (FileNotFoundException e) {\r\r                e.printStackTrace();\r            } catch (Exception e) {\r\r                e.printStackTrace();\r            }\r\r            scaledBitmap.recycle();\r        } catch (Throwable e) {\r        }\r\r        if (strMyImagePath == null) {\r\r            Log.w(TAG,\"profile \"+ \"Image path null\");\r            return path;\r        }\r        return strMyImagePath;\r\r    }\r\r\r    private void showRegisterSuccessalert(String message) {\r        try {\r\r            dialog = new Dialog(EditDoctorBusinessInfoActivity.this);\r            dialog.setCancelable(false);\r            dialog.setContentView(R.layout.alert_register_update);\r            TextView txt_success_msg = dialog.findViewById(R.id.txt_success_msg);\r            Button btn_back_to_profile = dialog.findViewById(R.id.btn_back_to_profile);\r            txt_success_msg.setText(message);\r\r            btn_back_to_profile.setOnClickListener(new View.OnClickListener() {\r                @Override\r                public void onClick(View view) {\r                    startActivity(new Intent(EditDoctorBusinessInfoActivity.this,DoctorProfileScreenActivity.class));\r                    finish();\r                    dialog.dismiss();\r\r                }\r            });\r            Objects.requireNonNull(dialog.getWindow()).setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r            dialog.show();\r\r        } catch (WindowManager.BadTokenException e) {\r            e.printStackTrace();\r        }\r\r\r\r\r    }\r\r\r\r}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/petfolio/infinituss/doctor/EditDoctorBusinessInfoActivity.java b/app/src/main/java/com/petfolio/infinituss/doctor/EditDoctorBusinessInfoActivity.java
--- a/app/src/main/java/com/petfolio/infinituss/doctor/EditDoctorBusinessInfoActivity.java	(revision f1734ca40ba206b2d8b7b0e5c5470841991c7822)
+++ b/app/src/main/java/com/petfolio/infinituss/doctor/EditDoctorBusinessInfoActivity.java	(date 1632497726791)
@@ -1,5 +1,7 @@
 package com.petfolio.infinituss.doctor;
 
+import static android.os.Environment.DIRECTORY_DOCUMENTS;
+
 import android.Manifest;
 import android.annotation.SuppressLint;
 import android.app.Activity;
@@ -25,6 +27,7 @@
 import android.os.Handler;
 import android.provider.MediaStore;
 import android.provider.OpenableColumns;
+import android.text.TextUtils;
 import android.util.Log;
 import android.view.View;
 import android.view.WindowManager;
@@ -58,6 +61,7 @@
 import com.google.android.gms.common.api.GoogleApiClient;
 import com.google.android.gms.common.api.PendingResult;
 import com.google.android.gms.common.api.Status;
+import com.google.android.gms.common.util.IOUtils;
 import com.google.android.gms.location.LocationListener;
 import com.google.android.gms.location.LocationRequest;
 import com.google.android.gms.location.LocationServices;
@@ -94,13 +98,14 @@
 import com.petfolio.infinituss.utils.ConnectionDetector;
 import com.petfolio.infinituss.utils.RestUtils;
 import com.petfolio.infinituss.utils.ScalingUtilities;
-import com.theartofdev.edmodo.cropper.CropImage;
+import com.canhub.cropper.CropImage;
 import com.wang.avi.AVLoadingIndicatorView;
 
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.OutputStream;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
@@ -1860,7 +1865,7 @@
             if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {
                 CropImage.ActivityResult result = CropImage.getActivityResult(data);
                 if (resultCode == RESULT_OK) {
-                    Uri resultUri = result.getUri();
+                    Uri resultUri = result.getUriContent();
 
                     if (resultUri != null) {
 
@@ -1870,9 +1875,12 @@
 
                         Log.w("filename", " " + filename);
 
-                        String filePath = FileUtil.getPath(EditDoctorBusinessInfoActivity.this, resultUri);
+                     /*   String filePath = FileUtil.getPath(EditDoctorBusinessInfoActivity.this, resultUri);*/
+
+                         String filePath = getFilePathFromURI(EditDoctorBusinessInfoActivity.this, resultUri);
+
 
-                        assert filePath != null;
+                          assert filePath != null;
 
                         File file = new File(filePath); // initialize file here
 
@@ -2968,24 +2976,52 @@
                 .show();
     }
 
-    public String getFileName(Uri uri) {
-        String result = null;
-        if (uri.getScheme().equals("content")) {
-            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {
-                if (cursor != null && cursor.moveToFirst()) {
-                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));
-                }
-            }
-        }
-        if (result == null) {
-            result = uri.getPath();
-            int cut = result.lastIndexOf('/');
-            if (cut != -1) {
-                result = result.substring(cut + 1);
-            }
+    public static String getFilePathFromURI(Context context, Uri contentUri) {
+        //copy file and send new file path
+        String fileName = getFileName(contentUri);
+        if (!TextUtils.isEmpty(fileName)) {
+
+            String path = Environment.getExternalStoragePublicDirectory(DIRECTORY_DOCUMENTS).getPath() + "/" + "MyFirstApp/";
+            // Create the parent path
+            File dir = new File(path);
+            if (!dir.exists()) {
+                dir.mkdirs();
+            }
+
+            String fullName = path + "mylog";
+            File copyFile = new File (fullName);
+
+            /* File copyFile = new File(Environment.DIRECTORY_DOWNLOADS + File.separator + fileName);*/
+            copy(context, contentUri, copyFile);
+            return copyFile.getAbsolutePath();
+        }
+        return null;
+    }
+
+    public static String getFileName(Uri uri) {
+        if (uri == null) return null;
+        String fileName = null;
+        String path = uri.getPath();
+        int cut = path.lastIndexOf('/');
+        if (cut != -1) {
+            fileName = path.substring(cut + 1);
+        }
+        return fileName;
+    }
+
+    public static void copy(Context context, Uri srcUri, File dstFile) {
+        try {
+            InputStream inputStream = context.getContentResolver().openInputStream(srcUri);
+            if (inputStream == null) return;
+            OutputStream outputStream = new FileOutputStream(dstFile);
+            IOUtils.copyStream(inputStream, outputStream);
+            inputStream.close();
+            outputStream.close();
+        } catch (IOException e) {
+            e.printStackTrace();
         }
-        return result;
     }
+
 
 
     private void googleApiConnected() {
Index: app/src/main/java/com/petfolio/infinituss/doctor/PrescriptionActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.petfolio.infinituss.doctor;\r\n\r\nimport android.Manifest;\r\nimport android.animation.LayoutTransition;\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.database.Cursor;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.Color;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.provider.MediaStore;\r\nimport android.provider.OpenableColumns;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.WindowManager;\r\nimport android.widget.Button;\r\nimport android.widget.CheckBox;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.RadioButton;\r\nimport android.widget.RadioGroup;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.google.gson.Gson;\r\nimport com.petfolio.infinituss.R;\r\nimport com.petfolio.infinituss.adapter.AddGovtIdPdfAdapter;\r\nimport com.petfolio.infinituss.adapter.AddPrescriptionsListAdapter;\r\nimport com.petfolio.infinituss.adapter.DiagnosiTypesListAdapter;\r\nimport com.petfolio.infinituss.adapter.NotificationDashboardAdapter;\r\nimport com.petfolio.infinituss.adapter.SubDiagnosiTypesListAdapter;\r\nimport com.petfolio.infinituss.api.APIClient;\r\nimport com.petfolio.infinituss.api.RestApiInterface;\r\nimport com.petfolio.infinituss.appUtils.FileUtil;\r\nimport com.petfolio.infinituss.appUtils.NumericKeyBoardTransformationMethod;\r\nimport com.petfolio.infinituss.interfaces.DiagnosisTypeListener;\r\nimport com.petfolio.infinituss.interfaces.SubDiagnosisTypeListener;\r\nimport com.petfolio.infinituss.doctor.PrescriptionActivity;\r\nimport com.petfolio.infinituss.doctor.PrescriptionActivity;\r\nimport com.petfolio.infinituss.requestpojo.AppoinmentCompleteRequest;\r\nimport com.petfolio.infinituss.requestpojo.DocBusInfoUploadRequest;\r\nimport com.petfolio.infinituss.requestpojo.PrescriptionCreateRequest;\r\nimport com.petfolio.infinituss.requestpojo.SubDiagnosisRequest;\r\nimport com.petfolio.infinituss.responsepojo.AppoinmentCompleteResponse;\r\nimport com.petfolio.infinituss.responsepojo.DiagnosisListResponse;\r\nimport com.petfolio.infinituss.responsepojo.FileUploadResponse;\r\nimport com.petfolio.infinituss.responsepojo.PrescriptionCreateResponse;\r\nimport com.petfolio.infinituss.responsepojo.SubDiagnosisListResponse;\r\nimport com.petfolio.infinituss.sessionmanager.SessionManager;\r\nimport com.petfolio.infinituss.utils.ConnectionDetector;\r\nimport com.petfolio.infinituss.utils.RestUtils;\r\nimport com.theartofdev.edmodo.cropper.CropImage;\r\nimport com.wang.avi.AVLoadingIndicatorView;\r\n\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.OutputStream;\r\nimport java.io.Serializable;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Objects;\r\n\r\nimport butterknife.BindView;\r\nimport butterknife.ButterKnife;\r\nimport cn.pedant.SweetAlert.SweetAlertDialog;\r\nimport es.dmoral.toasty.Toasty;\r\nimport okhttp3.MediaType;\r\nimport okhttp3.MultipartBody;\r\nimport okhttp3.RequestBody;\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\n\r\npublic class PrescriptionActivity extends AppCompatActivity implements DiagnosisTypeListener, SubDiagnosisTypeListener {\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.et_tabletname)\r\n    EditText et_tabletname;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.et_quanity)\r\n    EditText et_quanity;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.et_consumption)\r\n    EditText et_consumption;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.etdoctorcomments)\r\n    EditText etdoctorcomments;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.chx_m)\r\n    CheckBox chx_m;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.chx_a)\r\n    CheckBox chx_a;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.chx_n)\r\n    CheckBox chx_n;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.add)\r\n    Button add;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.ll_headername)\r\n    LinearLayout ll_headername;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.container)\r\n    LinearLayout container;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.btnsubmit)\r\n    Button btnSubmit;\r\n\r\n      @SuppressLint(\"NonConstantResourceId\")\r\n      @BindView(R.id.avi_indicator)\r\n      AVLoadingIndicatorView avi_indicator;\r\n\r\n      @SuppressLint(\"NonConstantResourceId\")\r\n      @BindView(R.id.back_rela)\r\n      RelativeLayout back_rela;\r\n\r\n      @SuppressLint(\"NonConstantResourceId\")\r\n      @BindView(R.id.ll_diagnosis)\r\n      LinearLayout ll_diagnosis;\r\n\r\n      @SuppressLint(\"NonConstantResourceId\")\r\n      @BindView(R.id.ll_subdiagnosis)\r\n      LinearLayout ll_subdiagnosis;\r\n\r\n      @SuppressLint(\"NonConstantResourceId\")\r\n      @BindView(R.id.ll_manual_prescription)\r\n      LinearLayout ll_manual_prescription;\r\n\r\n      @SuppressLint(\"NonConstantResourceId\")\r\n      @BindView(R.id.ll_uploadImage)\r\n      LinearLayout ll_uploadImage;\r\n\r\n//      @SuppressLint(\"NonConstantResourceId\")\r\n//      @BindView(R.id.sprdiagnosistype)\r\n//      Spinner sprdiagnosistype;\r\n//\r\n//      @SuppressLint(\"NonConstantResourceId\")\r\n//      @BindView(R.id.rl_sub_diagnosis)\r\n//      RelativeLayout rl_sub_diagnosis;\r\n//\r\n//      @SuppressLint(\"NonConstantResourceId\")\r\n//      @BindView(R.id.sprsub_diagnosis)\r\n//      Spinner sprsub_diagnosis;\r\n//\r\n      @SuppressLint(\"NonConstantResourceId\")\r\n      @BindView(R.id.txt_diagnosis)\r\n      TextView txt_diagnosis;\r\n\r\n      @SuppressLint(\"NonConstantResourceId\")\r\n      @BindView(R.id.txt_subdiagnosis)\r\n      TextView txt_subdiagnosis;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.rgprescription_method)\r\n    RadioGroup rgprescription_method;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.rv_prescriptiondetails)\r\n    RecyclerView rv_prescriptiondetails;\r\n\r\n    String TAG = \"PrescriptionActivity\";\r\n\r\n    private String selectedRadioButton = \"Manual\";\r\n\r\n    View addView;\r\n\r\n\r\n    Button btn_done,btn_done1;\r\n\r\n    ArrayList<FileUploadResponse>  govtIdPicResponse = new ArrayList<>();\r\n\r\n\r\n    AlertDialog.Builder alertDialogBuilder;\r\n    AlertDialog alertDialog;\r\n\r\n    PrescriptionCreateRequest.PrescriptionDataBean prescriptionData;\r\n    List<PrescriptionCreateRequest.PrescriptionDataBean> prescriptionDataList = new ArrayList<>();\r\n\r\n    SessionManager session;\r\n\r\n    private String Doctor_Name = \"\";\r\n    private String Doctor_Image = \"\";\r\n    private String Doctor_ID = \"\";\r\n    private String Treatment_Done_by = \"\";\r\n    private String Patient_Name = \"\";\r\n    private String Patient_Image = \"\";\r\n    private String Patient_ID = \"\";\r\n    private String Family_ID = \"\";\r\n    private String Family_Name = \"\";\r\n    private String Family_Image = \"\";\r\n    private String Date = \"\";\r\n    private String Doctor_Email_id = \"\";\r\n    private String Patient_Email_id = \"\";\r\n    private String userid;\r\n    private String appoinmentid;\r\n    private String paymentmethod;\r\n    private List<DiagnosisListResponse.DataBean> diagnosisList;\r\n\r\n    MultipartBody.Part govIdPart;\r\n\r\n    HashMap<String, String> hashMap_diagnosis_id = new HashMap<>();\r\n    private List<SubDiagnosisListResponse.DataBean> subDiagnosisList;\r\n    private String DiagnosisType;\r\n    private String DiagnosisTypeId;\r\n    private String SubDiagnosisType;\r\n\r\n    private static final int SELECT_GOVTID_CAMERA = 1007;\r\n\r\n    private static final int REQUEST_READ_GOVT_ID_PDF_PERMISSION = 788;\r\n\r\n    private static final int REQUEST_GOVTID_CAMERA_PERMISSION_CODE = 792;\r\n\r\n    private static final int SELECT_GOVTID_PICTURE = 1008;\r\n\r\n    private static final int SELECT_GOVTID_PDF = 1003;\r\n\r\n    private static final int REQUEST_READ_GOVTID_PIC_PERMISSION = 793;\r\n\r\n    PrescriptionCreateRequest.PrescriptionDataBean.ConsumptionBean consumptionBean;\r\n\r\n    DiagnosiTypesListAdapter diagnosiTypesListAdapter;\r\n\r\n    AddGovtIdPdfAdapter addGovtIdPdfAdapter;\r\n\r\n    SubDiagnosiTypesListAdapter subDiagnosiTypesListAdapter;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.edtx_uploadImage)\r\n    EditText edtx_uploadImage;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.edtx_service_charge_amount)\r\n    EditText edtx_service_charge_amount;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.txt_lbl_serviceamout)\r\n    TextView txt_lbl_serviceamout;\r\n\r\n\r\n    String currentDateandTime;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.rcylr_uploadImage)\r\n    RecyclerView rcylr_uploadImage;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.txt_sub_diagnosis)\r\n    TextView txt_sub_diagnosis;\r\n\r\n    private final List<DocBusInfoUploadRequest.GovtIdPicBean> govtIdPicBeans = new ArrayList<>();\r\n\r\n    int i =0;\r\n\r\n    @SuppressLint(\"LogNotTimber\")\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_prescription);\r\n\r\n        ButterKnife.bind(this);\r\n\r\n        session = new SessionManager(getApplicationContext());\r\n        HashMap<String, String> user = session.getProfileDetails();\r\n        Doctor_Name = user.get(SessionManager.KEY_FIRST_NAME);\r\n        Doctor_ID = user.get(SessionManager.KEY_ID);\r\n\r\n        avi_indicator.setVisibility(View.GONE);\r\n\r\n       // txt_subdiagnosis.setVisibility(View.GONE);\r\n\r\n        txt_lbl_serviceamout.setVisibility(View.GONE);\r\n        edtx_service_charge_amount.setVisibility(View.GONE);\r\n\r\n        txt_sub_diagnosis.setVisibility(View.GONE);\r\n        ll_subdiagnosis.setVisibility(View.GONE);\r\n\r\n\r\n\r\n        /* *************** Get Current Date and Time ************************ */\r\n\r\n        SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r\n        currentDateandTime = sdf.format(new Date());\r\n\r\n        Bundle extras = getIntent().getExtras();\r\n        if (extras != null) {\r\n            appoinmentid = extras.getString(\"id\");\r\n            userid = extras.getString(\"patient_id\");\r\n            paymentmethod = extras.getString(\"paymentmethod\");\r\n            Log.w(TAG,\"appoinmentid :\"+\" \"+appoinmentid+\" paymentmethod  : \"+paymentmethod);\r\n            Log.w(TAG,\"userid :\"+\" \"+userid);\r\n\r\n        }\r\n\r\n        if(paymentmethod != null && paymentmethod.equalsIgnoreCase(\"Cash\")){\r\n            txt_lbl_serviceamout.setVisibility(View.VISIBLE);\r\n            edtx_service_charge_amount.setVisibility(View.VISIBLE);\r\n\r\n        } else{\r\n            txt_lbl_serviceamout.setVisibility(View.GONE);\r\n            edtx_service_charge_amount.setVisibility(View.GONE);\r\n\r\n        }\r\n\r\n        edtx_uploadImage.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n\r\n                chooseGovIDPdf();\r\n            }\r\n        });\r\n\r\n        if (new ConnectionDetector(PrescriptionActivity.this).isNetworkAvailable(PrescriptionActivity.this)) {\r\n              diagnosisListResponseCall();\r\n        }\r\n\r\n        back_rela.setOnClickListener(v -> onBackPressed());\r\n\r\n//        sprdiagnosistype.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n//            @SuppressLint(\"LogNotTimber\")\r\n//            @Override\r\n//            public void onItemSelected(AdapterView<?> parent, View view, int arg2, long arg3) {\r\n//                ((TextView) parent.getChildAt(0)).setTextColor(getResources().getColor(R.color.green));\r\n//                DiagnosisType = sprdiagnosistype.getSelectedItem().toString();\r\n//                DiagnosisTypeId = hashMap_diagnosis_id.get(DiagnosisType);\r\n//                subDiagnosisListResponseCall(DiagnosisTypeId);\r\n//                Log.w(TAG, \"DiagnosisTypeId : \" + DiagnosisTypeId + \" DiagnosisType :\" + DiagnosisType);\r\n//\r\n//                if(DiagnosisType != null && !DiagnosisType.equalsIgnoreCase(\"Diagnosis Type\")){\r\n//                    rl_sub_diagnosis.setVisibility(View.VISIBLE);\r\n//                }else{\r\n//                    rl_sub_diagnosis.setVisibility(View.GONE);\r\n//                }\r\n//\r\n//\r\n//\r\n//            }\r\n//\r\n//            @Override\r\n//            public void onNothingSelected(AdapterView<?> arg0) {\r\n//                // TODO Auto-generated method stub\r\n//\r\n//            }\r\n//        });\r\n//        sprsub_diagnosis.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n//            @Override\r\n//            public void onItemSelected(AdapterView<?> parent, View view, int arg2, long arg3) {\r\n//                ((TextView) parent.getChildAt(0)).setTextColor(getResources().getColor(R.color.green));\r\n//                SubDiagnosisType = sprsub_diagnosis.getSelectedItem().toString();\r\n//                Log.w(TAG, \"SubDiagnosisType :\" + SubDiagnosisType);\r\n//\r\n//\r\n//            }\r\n//\r\n//            @Override\r\n//            public void onNothingSelected(AdapterView<?> arg0) {\r\n//                // TODO Auto-generated method stub\r\n//\r\n//            }\r\n//        });\r\n\r\n        ll_diagnosis.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n\r\n                showDiagnosisListType();\r\n\r\n            }\r\n        });\r\n\r\n        ll_subdiagnosis.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n\r\n                showSubDiagnosisListType();\r\n\r\n            }\r\n        });\r\n        et_quanity.setTransformationMethod(new NumericKeyBoardTransformationMethod());\r\n        et_consumption.setTransformationMethod(new NumericKeyBoardTransformationMethod());\r\n\r\n\r\n\r\n\r\n        add.setOnClickListener(new View.OnClickListener(){\r\n\r\n            @SuppressLint({\"InflateParams\", \"SetTextI18n\"})\r\n            @Override\r\n            public void onClick(View arg0) {\r\n\r\n\r\n                LayoutInflater layoutInflater =\r\n                        (LayoutInflater) getBaseContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);\r\n                addView = layoutInflater.inflate(R.layout.row, null);\r\n                final LinearLayout parent_linear_layout = addView.findViewById(R.id.parent_linear_layout);\r\n                final TextView tvtabletname = addView.findViewById(R.id.tv_tabletname);\r\n                tvtabletname.setText(et_tabletname.getText().toString());\r\n                final TextView tvquantity = addView.findViewById(R.id.tv_quanity);\r\n                tvquantity.setText(et_quanity.getText().toString());\r\n               // final TextView tvconsumption = addView.findViewById(R.id.tv_consumption);\r\n               // tvconsumption.setText(et_consumption.getText().toString());\r\n                final Button buttonRemove = addView.findViewById(R.id.remove);\r\n                buttonRemove.setText(\"Remove\");\r\n\r\n\r\n                final CheckBox chx_mg = addView.findViewById(R.id.chx_m);\r\n                final CheckBox chx_an = addView.findViewById(R.id.chx_a);\r\n                final CheckBox chx_ng = addView.findViewById(R.id.chx_n);\r\n\r\n                chx_mg.setChecked(chx_m.isChecked());\r\n                chx_an.setChecked(chx_a.isChecked());\r\n                chx_ng.setChecked(chx_n.isChecked());\r\n\r\n\r\n\r\n\r\n              consumptionBean =  new PrescriptionCreateRequest.PrescriptionDataBean.ConsumptionBean();\r\n\r\n                if(chx_m.isChecked()){\r\n                    consumptionBean.setMorning(chx_m.isChecked());\r\n                }else{\r\n                    consumptionBean.setMorning(false);\r\n                }if(chx_a.isChecked()){\r\n                    consumptionBean.setEvening(chx_a.isChecked());\r\n                }else{\r\n                    consumptionBean.setEvening(false);\r\n                }if(chx_n.isChecked()){\r\n                    consumptionBean.setNight(chx_n.isChecked());\r\n                }else{\r\n                    consumptionBean.setNight(false);\r\n                }\r\n\r\n\r\n\r\n                Log.w(TAG,\"Consumptions checked : m \"+chx_m.isChecked()+\" a \"+chx_a.isChecked()+\" n \"+chx_n.isChecked());\r\n\r\n                buttonRemove.setOnClickListener(new View.OnClickListener(){\r\n\r\n                    @Override\r\n                    public void onClick(View v) {\r\n\r\n                        if (addView != null) {\r\n                            //((LinearLayout) addView.getParent()).removeView(addView);\r\n                            ViewGroup parent = (ViewGroup) addView.getParent();\r\n                            if (parent != null) {\r\n                                parent.removeView(addView);\r\n                            }\r\n                        }\r\n\r\n\r\n                    }});\r\n\r\n                parent_linear_layout.setVisibility(View.GONE);\r\n\r\n\r\n                Log.w(TAG,\"Qty : \"+et_quanity.getText().toString());\r\n                Log.w(TAG,\" chx_m : \"+chx_m.isChecked()+\" chx_a :  \"+chx_a.isChecked()+\" chx_n : \"+chx_n.isChecked());\r\n\r\n\r\n                if(et_tabletname.getText().toString().equalsIgnoreCase(\"\") && et_quanity.getText().toString().equalsIgnoreCase(\"\") && !chx_m.isChecked() && !chx_a.isChecked() && !chx_n.isChecked()){\r\n                    showErrorLoading(\"Please fill all the fields\");\r\n                }else if (et_tabletname.getText().toString().trim().equals(\"\")) {\r\n                    showErrorLoading(\"Please enter tablet name\");\r\n                }else if (et_quanity.getText().toString().trim().equals(\"\")) {\r\n                    showErrorLoading(\"Please enter no of days\");\r\n                }else if (!chx_m.isChecked() && !chx_a.isChecked() && !chx_n.isChecked()) {\r\n                    showErrorLoading(\"Please enter consumption\");\r\n                }\r\n                else{\r\n                    Log.w(TAG,\"prescriptionDataList  : tablet name \"+et_tabletname.getText().toString()+\" qty : \"+et_quanity.getText().toString());\r\n                    prescriptionData  = new PrescriptionCreateRequest.PrescriptionDataBean();\r\n                    prescriptionData.setTablet_name(et_tabletname.getText().toString());\r\n                    prescriptionData.setQuantity(et_quanity.getText().toString());\r\n                    prescriptionData.setConsumption(consumptionBean);\r\n                    prescriptionDataList.add(prescriptionData);\r\n\r\n                    Log.w(TAG,\"prescriptionDataList add : \"+new Gson().toJson(prescriptionDataList));\r\n                    ll_headername.setVisibility(View.VISIBLE);\r\n                    // container.addView(addView, 0);\r\n                    setView();\r\n                    clearField();\r\n                }\r\n\r\n                /*if(!et_tabletname.getText().toString().isEmpty() && !et_quanity.getText().toString().isEmpty() && chx_m.isChecked() || chx_a.isChecked() || chx_n.isChecked()){\r\n                    Log.w(TAG,\"prescriptionDataList  : tablet name \"+et_tabletname.getText().toString()+\" qty : \"+et_quanity.getText().toString());\r\n                    prescriptionData  = new PrescriptionCreateRequest.PrescriptionDataBean();\r\n                    prescriptionData.setTablet_name(et_tabletname.getText().toString());\r\n                    prescriptionData.setQuantity(et_quanity.getText().toString());\r\n                    prescriptionData.setConsumption(consumptionBean);\r\n                    prescriptionDataList.add(prescriptionData);\r\n\r\n                    Log.w(TAG,\"prescriptionDataList add : \"+new Gson().toJson(prescriptionDataList));\r\n                    ll_headername.setVisibility(View.VISIBLE);\r\n                   // container.addView(addView, 0);\r\n                    setView();\r\n                    clearField();\r\n\r\n\r\n                }\r\n                else{\r\n                    showErrorLoading(\"Please fill all the fields\");\r\n                    //ll_headername.setVisibility(View.GONE);\r\n                }*/\r\n\r\n            }});\r\n\r\n        LayoutTransition transition = new LayoutTransition();\r\n        container.setLayoutTransition(transition);\r\n\r\n\r\n        btnSubmit.setOnClickListener(new View.OnClickListener(){\r\n\r\n            @Override\r\n            public void onClick(View arg0) {\r\n\r\n\r\n                   // prescriptionDataList.clear();\r\n\r\n                    String showallPrompt = \"\";\r\n\r\n                    int childCount = container.getChildCount();\r\n                    showallPrompt += \"childCount: \" + childCount + \"\\n\\n\";\r\n\r\n                   /* for(int c=0; c<childCount; c++){\r\n                        prescriptionData  = new PrescriptionCreateRequest.PrescriptionDataBean();\r\n                        View childView = container.getChildAt(c);\r\n                        TextView childTabletName = childView.findViewById(R.id.tv_tabletname);\r\n                        String childTextTabletName = (String)(childTabletName.getText());\r\n\r\n                        TextView childQuantity = childView.findViewById(R.id.tv_quanity);\r\n                        String childTexQuantity = (String)(childQuantity.getText());\r\n\r\n                        TextView childConsumption = childView.findViewById(R.id.tv_consumption);\r\n                        String childTextConsumption = (String)(childConsumption.getText());\r\n\r\n\r\n\r\n                        showallPrompt += c + \": \" + childTextTabletName + \"\\n\"+\r\n                                c + \": \" + childTexQuantity+\"\\n\"+\r\n                                c + \": \" + childTextConsumption +\"\\n\" ;\r\n\r\n                        prescriptionData.setTablet_name(childTextTabletName);\r\n                        prescriptionData.setQuantity(childTexQuantity);\r\n                        prescriptionData.setConsumption(consumptionBean);\r\n                        prescriptionDataList.add(prescriptionData);\r\n\r\n                    }*/\r\n\r\n\r\n                    //  Toast.makeText(PrescriptionExActivity.this, showallPrompt, Toast.LENGTH_LONG).show();\r\n\r\n                    Log.w(TAG,\"showallPrompt-->\"+showallPrompt);\r\n                DiagnosisType = txt_diagnosis.getText().toString();\r\n                SubDiagnosisType = txt_subdiagnosis.getText().toString();\r\n                    Log.w(TAG,\"DiagnosisType-->\"+DiagnosisType+\" SubDiagnosisType : \"+SubDiagnosisType);\r\n\r\n                    if(validSelectDiagnosisType()){\r\n                        if(validdSubDiagnosisType()){\r\n                            if(etdoctorcomments.getText().toString().isEmpty()){\r\n                                etdoctorcomments.setError(\"Please enter the comments \");\r\n                                etdoctorcomments.requestFocus();\r\n                             }\r\n                             else if(paymentmethod != null && paymentmethod.equalsIgnoreCase(\"Cash\")){\r\n                                if(edtx_service_charge_amount.getText().toString().isEmpty()){\r\n                                    edtx_service_charge_amount.setError(\"Please enter the service amount \");\r\n                                    edtx_service_charge_amount.requestFocus();\r\n                                }else{\r\n                                     if(prescriptionDataList.isEmpty()&&selectedRadioButton.equalsIgnoreCase(\"Manual\")){\r\n                                        showErrorLoading(\"Please fill the prescription fields\");\r\n                                    }\r\n                                    else if(govtIdPicBeans.isEmpty()&&selectedRadioButton.equalsIgnoreCase(\"Upload Image\")){\r\n                                        showErrorLoading(\"Please Upload Prescription Image\");\r\n                                    }\r\n                                    else{\r\n\r\n                                        if (new ConnectionDetector(PrescriptionActivity.this).isNetworkAvailable(PrescriptionActivity.this)) {\r\n                                            if(Treatment_Done_by.equalsIgnoreCase(\"Self\")){\r\n                                                Family_ID = \"\";\r\n                                                Family_Name = \"\";\r\n\r\n                                            }else{\r\n                                                Family_Name = Family_Name;\r\n                                                Family_ID = Family_ID;\r\n                                            }\r\n\r\n                                            String image = \"\";\r\n\r\n                                            if(govtIdPicBeans!=null&&govtIdPicBeans.size()>0){\r\n\r\n                                                image = govtIdPicBeans.get(0).getGovt_id_pic();\r\n                                            }\r\n\r\n                                            Log.w(TAG,\"prescriptionDataList : \"+new Gson().toJson(prescriptionDataList));\r\n\r\n                                            Intent intent = new Intent(getApplicationContext(),PrescriptionDetailsActivity.class);\r\n                                            intent.putExtra(\"Doctor_ID\",Doctor_ID);\r\n                                            intent.putExtra(\"Doctor_Comments\",etdoctorcomments.getText().toString().trim());\r\n                                            intent.putExtra(\"prescriptionDataList\", (Serializable) prescriptionDataList);\r\n                                            intent.putExtra(\"Treatment_Done_by\", Treatment_Done_by);\r\n                                            intent.putExtra(\"id\", appoinmentid);\r\n                                            intent.putExtra(\"image\",image);\r\n                                            intent.putExtra(\"selectedRadioButton\",selectedRadioButton);\r\n                                            intent.putExtra(\"userid\", userid);\r\n                                            intent.putExtra(\"DiagnosisType\", DiagnosisType);\r\n                                            intent.putExtra(\"SubDiagnosisType\", SubDiagnosisType);\r\n                                            intent.putExtra(\"Doctor_ID\", Doctor_ID);\r\n                                            intent.putExtra(\"Treatment_Done_by\", Treatment_Done_by);\r\n                                            intent.putExtra(\"paymentmethod\", paymentmethod);\r\n                                            intent.putExtra(\"servicecost\", edtx_service_charge_amount.getText().toString());\r\n                                            startActivity(intent);\r\n                                            //prescriptionCreateRequestCall();\r\n                                        }\r\n                                    }\r\n                                }\r\n                             }\r\n                             else if(prescriptionDataList.isEmpty()&&selectedRadioButton.equalsIgnoreCase(\"Manual\")){\r\n                    showErrorLoading(\"Please fill the prescription fields\");\r\n                     }\r\n                             else if(govtIdPicBeans.isEmpty()&&selectedRadioButton.equalsIgnoreCase(\"Upload Image\")){\r\n                                showErrorLoading(\"Please Upload Prescription Image\");\r\n                            }\r\n                             else{\r\n\r\n                        if (new ConnectionDetector(PrescriptionActivity.this).isNetworkAvailable(PrescriptionActivity.this)) {\r\n                            if(Treatment_Done_by.equalsIgnoreCase(\"Self\")){\r\n                                Family_ID = \"\";\r\n                                Family_Name = \"\";\r\n\r\n                            }else{\r\n                                Family_Name = Family_Name;\r\n                                Family_ID = Family_ID;\r\n                            }\r\n\r\n                            String image = \"\";\r\n\r\n                            if(govtIdPicBeans!=null&&govtIdPicBeans.size()>0){\r\n\r\n                                image = govtIdPicBeans.get(0).getGovt_id_pic();\r\n                            }\r\n\r\n                            Log.w(TAG,\"prescriptionDataList : \"+new Gson().toJson(prescriptionDataList));\r\n\r\n                            Intent intent = new Intent(getApplicationContext(),PrescriptionDetailsActivity.class);\r\n                            intent.putExtra(\"Doctor_ID\",Doctor_ID);\r\n                            intent.putExtra(\"Doctor_Comments\",etdoctorcomments.getText().toString().trim());\r\n                            intent.putExtra(\"prescriptionDataList\", (Serializable) prescriptionDataList);\r\n                            intent.putExtra(\"Treatment_Done_by\", Treatment_Done_by);\r\n                            intent.putExtra(\"id\", appoinmentid);\r\n                            intent.putExtra(\"image\",image);\r\n                            intent.putExtra(\"selectedRadioButton\",selectedRadioButton);\r\n                            intent.putExtra(\"userid\", userid);\r\n                            intent.putExtra(\"DiagnosisType\", DiagnosisType);\r\n                            intent.putExtra(\"SubDiagnosisType\", SubDiagnosisType);\r\n                            intent.putExtra(\"Doctor_ID\", Doctor_ID);\r\n                            intent.putExtra(\"Treatment_Done_by\", Treatment_Done_by);\r\n                            intent.putExtra(\"paymentmethod\", paymentmethod);\r\n                            intent.putExtra(\"servicecost\", edtx_service_charge_amount.getText().toString());\r\n                            startActivity(intent);\r\n                            //prescriptionCreateRequestCall();\r\n                        }\r\n                   }\r\n                        }\r\n\r\n                    }\r\n\r\n\r\n\r\n            }});\r\n\r\n        rgprescription_method.setOnCheckedChangeListener((group, checkedId) -> {\r\n            int radioButtonID = rgprescription_method.getCheckedRadioButtonId();\r\n            RadioButton radioButton = rgprescription_method.findViewById(radioButtonID);\r\n            selectedRadioButton = (String) radioButton.getText();\r\n            Log.w(TAG,\"selectedRadioButton\" + selectedRadioButton);\r\n            if(selectedRadioButton.equalsIgnoreCase(\"Manual\")){\r\n                ll_manual_prescription.setVisibility(View.VISIBLE);\r\n                ll_uploadImage.setVisibility(View.GONE);\r\n                govtIdPicBeans.clear();\r\n            }\r\n            else{\r\n                ll_manual_prescription.setVisibility(View.GONE);\r\n                ll_uploadImage.setVisibility(View.VISIBLE);\r\n                try{\r\n                    if(i==0){\r\n                        if(addView !=null){\r\n                            ((LinearLayout)addView.getParent()).removeView(addView);\r\n                        }\r\n\r\n                        clearField();\r\n                        if(prescriptionDataList !=null && prescriptionDataList.size()>0){\r\n                            prescriptionDataList.clear();\r\n                        }\r\n                        i = i+1;\r\n                    }\r\n                }catch (Exception e){\r\n                    Log.e(TAG, \"exception\", e);\r\n                    Log.e(TAG, \"Exception: \"+Log.getStackTraceString(e));\r\n                    Log.e(TAG, Log.getStackTraceString(new Exception()));\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n            }\r\n\r\n        });\r\n\r\n    }\r\n\r\n    public void clearField(){\r\n        et_tabletname.setText(\"\");\r\n        et_quanity.setText(\"\");\r\n        et_consumption.setText(\"\");\r\n        et_tabletname.requestFocus();\r\n        chx_m.setChecked(false);\r\n        chx_a.setChecked(false);\r\n        chx_n.setChecked(false);\r\n\r\n    }\r\n\r\n\r\n    @SuppressLint(\"LogNotTimber\")\r\n    private void prescriptionCreateRequestCall() {\r\n        avi_indicator.setVisibility(View.VISIBLE);\r\n        avi_indicator.smoothToShow();\r\n        RestApiInterface ApiService = APIClient.getClient().create(RestApiInterface.class);\r\n        Call<PrescriptionCreateResponse> call = ApiService.prescriptionCreateRequestCall(RestUtils.getContentType(),prescriptionCreateRequest());\r\n        Log.w(TAG,\"url  :%s\"+\" \"+ call.request().url().toString());\r\n\r\n        call.enqueue(new Callback<PrescriptionCreateResponse>() {\r\n            @SuppressLint(\"LogNotTimber\")\r\n            @Override\r\n            public void onResponse(@NonNull Call<PrescriptionCreateResponse> call, @NonNull Response<PrescriptionCreateResponse> response) {\r\n                avi_indicator.smoothToHide();\r\n                Log.w(TAG,\"PrescriptionCreateResponse\"+ \"--->\" + new Gson().toJson(response.body()));\r\n\r\n\r\n                if (response.body() != null) {\r\n                    if(response.body().getCode() == 200){\r\n                        Toasty.success(getApplicationContext(), response.body().getMessage(), Toast.LENGTH_SHORT, true).show();\r\n                        appoinmentCompleteResponseCall();\r\n\r\n                    }\r\n                    else{\r\n\r\n                        showErrorLoading(response.body().getMessage());\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call<PrescriptionCreateResponse> call, @NonNull Throwable t) {\r\n                avi_indicator.smoothToHide();\r\n\r\n                Log.w(TAG,\"PrescriptionCreateResponseflr\"+\"--->\" + t.getMessage());\r\n            }\r\n        });\r\n\r\n    }\r\n    @SuppressLint(\"LogNotTimber\")\r\n    private PrescriptionCreateRequest prescriptionCreateRequest() {\r\n        /*\r\n         * doctor_id : 5ef3472a4b9bd73eb1cff539\r\n         * Date : 23-10-2020 12:00 AM\r\n         * Doctor_Comments : test\r\n         * PDF_format :\r\n         * Prescription_type : Image / PDF\r\n         * Prescription_img : http://mysalveo.com/api/public/prescriptions/231afd32-6d68-4288-a8e5-1c599833c0e8.pdf\r\n         * Doctor_ID : 5ef2c092c006bb0ed174c771\r\n         * Prescription_data : [{\"Quantity\":\"3\",\"Tablet_name\":\"dolo\",\"consumption\":\"twice\"}]\r\n         * Treatment_Done_by : Self\r\n         * Appointment_ID\r\n         */\r\n        SimpleDateFormat sdf = new SimpleDateFormat(\"dd/MM/yyyy hh:mm aa\", Locale.getDefault());\r\n        String currentDateandTime = sdf.format(new Date());\r\n\r\n        PrescriptionCreateRequest prescriptionCreateRequest = new PrescriptionCreateRequest();\r\n        prescriptionCreateRequest.setDoctor_id(Doctor_ID);\r\n        prescriptionCreateRequest.setDate(currentDateandTime);\r\n        prescriptionCreateRequest.setDoctor_Comments(etdoctorcomments.getText().toString().trim());\r\n        prescriptionCreateRequest.setPDF_format(\"\");\r\n        prescriptionCreateRequest.setPrescription_type(\"PDF\");\r\n        prescriptionCreateRequest.setPrescription_img(\"\");\r\n        prescriptionCreateRequest.setUser_id(userid);\r\n        Log.w(TAG, \"Doctor_ID\" + userid);\r\n        prescriptionCreateRequest.setPrescription_data(prescriptionDataList);\r\n        prescriptionCreateRequest.setTreatment_Done_by(Treatment_Done_by);\r\n        prescriptionCreateRequest.setAppointment_ID(appoinmentid);\r\n        Log.w(TAG,\"prescriptionCreateRequest\"+ \"--->\" + new Gson().toJson(prescriptionCreateRequest));\r\n        return prescriptionCreateRequest;\r\n    }\r\n\r\n\r\n\r\n    public void showErrorLoading(String errormesage){\r\n        alertDialogBuilder = new AlertDialog.Builder(this);\r\n        alertDialogBuilder.setMessage(errormesage);\r\n        alertDialogBuilder.setPositiveButton(\"ok\",\r\n                (arg0, arg1) -> hideLoading());\r\n\r\n\r\n\r\n        AlertDialog alertDialog = alertDialogBuilder.create();\r\n        alertDialog.show();\r\n    }\r\n    public void hideLoading(){\r\n        try {\r\n            alertDialog.dismiss();\r\n        }catch (Exception ignored){\r\n\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        super.onBackPressed();\r\n        finish();\r\n        //Toasty.warning(getApplicationContext(), \"This action is disabled in this screen..\", Toast.LENGTH_SHORT, true).show();\r\n\r\n    }\r\n\r\n    private void appoinmentCompleteResponseCall() {\r\n        avi_indicator.setVisibility(View.VISIBLE);\r\n        avi_indicator.smoothToShow();\r\n        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);\r\n        Call<AppoinmentCompleteResponse> call = apiInterface.appoinmentCompleteResponseCall(RestUtils.getContentType(), appoinmentCompleteRequest());\r\n        Log.w(TAG,\"AppoinmentCompleteResponse url  :%s\"+\" \"+ call.request().url().toString());\r\n\r\n        call.enqueue(new Callback<AppoinmentCompleteResponse>() {\r\n            @Override\r\n            public void onResponse(@NonNull Call<AppoinmentCompleteResponse> call, @NonNull Response<AppoinmentCompleteResponse> response) {\r\n\r\n                Log.w(TAG,\"AppoinmentCompleteResponse\"+ \"--->\" + new Gson().toJson(response.body()));\r\n\r\n                avi_indicator.smoothToHide();\r\n\r\n                if (response.body() != null) {\r\n                    if(response.body().getCode() == 200){\r\n                        startActivity(new Intent(PrescriptionActivity.this, DoctorDashboardActivity.class));\r\n\r\n\r\n\r\n\r\n\r\n                    }\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call<AppoinmentCompleteResponse> call, @NonNull Throwable t) {\r\n\r\n                avi_indicator.smoothToHide();\r\n                Log.w(TAG,\"AppoinmentCompleteResponseflr\"+\"--->\" + t.getMessage());\r\n            }\r\n        });\r\n\r\n    }\r\n    private AppoinmentCompleteRequest appoinmentCompleteRequest() {\r\n        /*\r\n         * _id : 5fc639ea72fc42044bfa1683\r\n         * completed_at : 23-10-2000 10 : 00 AM\r\n         * appoinment_status : Completed\r\n         */\r\n\r\n        SimpleDateFormat sdf = new SimpleDateFormat(\"dd/MM/yyyy hh:mm aa\", Locale.getDefault());\r\n        String currentDateandTime = sdf.format(new Date());\r\n\r\n        AppoinmentCompleteRequest appoinmentCompleteRequest = new AppoinmentCompleteRequest();\r\n        appoinmentCompleteRequest.set_id(appoinmentid);\r\n        appoinmentCompleteRequest.setCompleted_at(currentDateandTime);\r\n        appoinmentCompleteRequest.setAppoinment_status(\"Completed\");\r\n        Log.w(TAG,\"appoinmentCompleteRequest\"+ \"--->\" + new Gson().toJson(appoinmentCompleteRequest));\r\n        return appoinmentCompleteRequest;\r\n    }\r\n\r\n\r\n\r\n    @SuppressLint(\"LogNotTimber\")\r\n    public void diagnosisListResponseCall() {\r\n        avi_indicator.setVisibility(View.VISIBLE);\r\n        avi_indicator.smoothToShow();\r\n        //Creating an object of our api interface\r\n        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);\r\n        Call<DiagnosisListResponse> call = apiInterface.diagnosisListResponseCall(RestUtils.getContentType());\r\n        Log.w(TAG, \"url  :%s\" + call.request().url().toString());\r\n\r\n        call.enqueue(new Callback<DiagnosisListResponse>() {\r\n            @SuppressLint(\"LogNotTimber\")\r\n            @Override\r\n            public void onResponse(@NonNull Call<DiagnosisListResponse> call, @NonNull Response<DiagnosisListResponse> response) {\r\n                avi_indicator.smoothToHide();\r\n\r\n\r\n                if (response.body() != null) {\r\n                    if (200 == response.body().getCode()) {\r\n                        Log.w(TAG, \"diagnosisListResponseCall\" + new Gson().toJson(response.body()));\r\n\r\n                        if(response.body().getData() != null) {\r\n                            diagnosisList = response.body().getData();\r\n                        }\r\n                        if (diagnosisList != null && diagnosisList.size() > 0) {\r\n                          //  setDiagnosisType(diagnosisList);\r\n                        }\r\n                    }\r\n\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call<DiagnosisListResponse> call, @NonNull Throwable t) {\r\n                avi_indicator.smoothToHide();\r\n                Log.w(TAG, \"DiagnosisListResponse flr\" + t.getMessage());\r\n            }\r\n        });\r\n\r\n    }\r\n//    private void setDiagnosisType(List<DiagnosisListResponse.DataBean> diagnosisList) {\r\n//        ArrayList<String> diagnosistypeArrayList = new ArrayList<>();\r\n//        diagnosistypeArrayList.add(\"Diagnosis Type\");\r\n//        for (int i = 0; i < diagnosisList.size(); i++) {\r\n//\r\n//            String diagnosisType = diagnosisList.get(i).getDiagnosis();\r\n//            hashMap_diagnosis_id.put(diagnosisList.get(i).getDiagnosis(), diagnosisList.get(i).get_id());\r\n//\r\n//            Log.w(TAG, \"diagnosisType-->\" + diagnosisType);\r\n//            diagnosistypeArrayList.add(diagnosisType);\r\n//\r\n//            ArrayAdapter<String> spinnerArrayAdapter = new ArrayAdapter<>(PrescriptionActivity.this, R.layout.spinner_item, diagnosistypeArrayList);\r\n//            spinnerArrayAdapter.setDropDownViewResource(R.layout.spinner_item); // The drop down view\r\n//            sprdiagnosistype.setAdapter(spinnerArrayAdapter);\r\n//\r\n//\r\n//\r\n//        }\r\n//    }\r\n    @SuppressLint(\"LogNotTimber\")\r\n    private void subDiagnosisListResponseCall(String diagnosis_id) {\r\n        avi_indicator.setVisibility(View.VISIBLE);\r\n        avi_indicator.smoothToShow();\r\n        RestApiInterface ApiService = APIClient.getClient().create(RestApiInterface.class);\r\n        Call<SubDiagnosisListResponse> call = ApiService.subDiagnosisListResponseCall(RestUtils.getContentType(), subDiagnosisRequest(diagnosis_id));\r\n        Log.w(TAG, \"url  :%s\" + call.request().url().toString());\r\n\r\n        call.enqueue(new Callback<SubDiagnosisListResponse>() {\r\n            @SuppressLint(\"LogNotTimber\")\r\n            @Override\r\n            public void onResponse(@NonNull Call<SubDiagnosisListResponse> call, @NonNull Response<SubDiagnosisListResponse> response) {\r\n                avi_indicator.smoothToHide();\r\n                Log.w(TAG, \"BreedTypeResponse\" + \"--->\" + new Gson().toJson(response.body()));\r\n\r\n\r\n                if (response.body() != null) {\r\n                    if (200 == response.body().getCode()) {\r\n                        if(response.body().getData() != null) {\r\n                            subDiagnosisList = response.body().getData();\r\n                            if (subDiagnosisList != null && subDiagnosisList.size() > 0) {\r\n\r\n\r\n                            }else{\r\n                                ll_subdiagnosis.setVisibility(View.GONE);\r\n                            }\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call<SubDiagnosisListResponse> call, @NonNull Throwable t) {\r\n                avi_indicator.smoothToHide();\r\n\r\n                Log.w(TAG, \"SubDiagnosisListResponse flr\" + \"--->\" + t.getMessage());\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n//    private void setSubDiagnosisType(List<SubDiagnosisListResponse.DataBean> subDiagnosisList) {\r\n//        ArrayList<String> subDiagnosisArrayList = new ArrayList<>();\r\n//        subDiagnosisArrayList.add(\"SubDiagnosis Type\");\r\n//        for (int i = 0; i < subDiagnosisList.size(); i++) {\r\n//\r\n//            String SubDiagnosisType = subDiagnosisList.get(i).getSub_diagnosis();\r\n//\r\n//            Log.w(TAG, \"SubDiagnosisType-->\" + SubDiagnosisType);\r\n//            subDiagnosisArrayList.add(SubDiagnosisType);\r\n//\r\n//            ArrayAdapter<String> spinnerArrayAdapter = new ArrayAdapter<>(PrescriptionActivity.this, R.layout.spinner_item, subDiagnosisArrayList);\r\n//            spinnerArrayAdapter.setDropDownViewResource(R.layout.spinner_item); // The drop down view\r\n//            sprsub_diagnosis.setAdapter(spinnerArrayAdapter);\r\n//\r\n//\r\n//        }\r\n//    }\r\n\r\n    @SuppressLint(\"LogNotTimber\")\r\n    private SubDiagnosisRequest subDiagnosisRequest(String diagnosis_id) {\r\n        SubDiagnosisRequest subDiagnosisRequest = new SubDiagnosisRequest();\r\n        subDiagnosisRequest.setDiagnosis_id(diagnosis_id);\r\n        Log.w(TAG, \"subDiagnosisRequest\" + \"--->\" + new Gson().toJson(subDiagnosisRequest));\r\n        return subDiagnosisRequest;\r\n    }\r\n\r\n    public boolean validSelectDiagnosisType() {\r\n        if (DiagnosisType != null && DiagnosisType.equalsIgnoreCase(\"\") || DiagnosisType.equalsIgnoreCase(\"Diagnosis Type\")) {\r\n            final AlertDialog alertDialog = new AlertDialog.Builder(PrescriptionActivity.this).create();\r\n            alertDialog.setMessage(getString(R.string.err_msg_type_of_diagnosis));\r\n            alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, \"Ok\",\r\n                    (dialog, which) -> alertDialog.cancel());\r\n            alertDialog.show();\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public boolean validdSubDiagnosisType() {\r\n        if (SubDiagnosisType != null && SubDiagnosisType.equalsIgnoreCase(\"\") || SubDiagnosisType.equalsIgnoreCase(\"SubDiagnosis Type\")) {\r\n            final AlertDialog alertDialog = new AlertDialog.Builder(PrescriptionActivity.this).create();\r\n            alertDialog.setMessage(getString(R.string.err_msg_type_of_sub_diagnosis));\r\n            alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, \"Ok\",\r\n                    (dialog, which) -> alertDialog.cancel());\r\n            alertDialog.show();\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private void showDiagnosisListType() {\r\n        try {\r\n\r\n            Dialog dialog = new Dialog(PrescriptionActivity.this);\r\n            dialog.setContentView(R.layout.alert_diagnosis_layout);\r\n            dialog.setCanceledOnTouchOutside(false);\r\n\r\n            ImageView img_close = dialog.findViewById(R.id.img_close);\r\n            btn_done = dialog.findViewById(R.id.btn_done);\r\n            LinearLayout ll_diagnosistype = dialog.findViewById(R.id.ll_diagnosistype);\r\n            RecyclerView rv_diagnosistype = dialog.findViewById(R.id.rv_diagnosistype);\r\n            TextView tv_norecords = dialog.findViewById(R.id.tv_norecords);\r\n            EditText edt_search_diagnosistype = dialog.findViewById(R.id.edt_search_diagnosistype);\r\n\r\n            btn_done.setVisibility(View.GONE);\r\n            img_close.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    dialog.dismiss();\r\n                }\r\n            });\r\n\r\n            if(diagnosisList != null && diagnosisList.size()>0){\r\n                rv_diagnosistype.setVisibility(View.VISIBLE);\r\n                tv_norecords.setVisibility(View.GONE);\r\n                setView(rv_diagnosistype,diagnosisList);\r\n\r\n            }else{\r\n                rv_diagnosistype.setVisibility(View.GONE);\r\n                tv_norecords.setVisibility(View.VISIBLE);\r\n                tv_norecords.setText(\"No Diagnosis Type Found\");\r\n            }\r\n\r\n\r\n            img_close.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    dialog.dismiss();\r\n\r\n                }\r\n            });\r\n\r\n            btn_done.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    txt_diagnosis.setText(DiagnosisType);\r\n\r\n                    txt_sub_diagnosis.setVisibility(View.VISIBLE);\r\n                    ll_subdiagnosis.setVisibility(View.VISIBLE);\r\n\r\n                    for (int i=0;i<diagnosisList.size();i++){\r\n                        diagnosisList.get(i).setSelected(false);\r\n                    }\r\n\r\n                    diagnosiTypesListAdapter.notifyDataSetChanged();\r\n\r\n                    subDiagnosisListResponseCall(DiagnosisTypeId);\r\n\r\n                    dialog.dismiss();\r\n\r\n                }\r\n            });\r\n\r\n\r\n            edt_search_diagnosistype.addTextChangedListener(new TextWatcher() {\r\n                @Override\r\n                public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {\r\n\r\n                }\r\n\r\n                @Override\r\n                public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {\r\n\r\n                }\r\n\r\n                @SuppressLint(\"LogNotTimber\")\r\n                @Override\r\n                public void afterTextChanged(Editable editable) {\r\n                    //after the change calling the method and passing the search input\r\n                    filter(editable.toString());\r\n                    Log.w(TAG,\"afterTextChanged : \"+editable.toString());\r\n                }\r\n            });\r\n\r\n\r\n\r\n            Objects.requireNonNull(dialog.getWindow()).setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r\n            dialog.show();\r\n\r\n        } catch (WindowManager.BadTokenException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    private void setView(RecyclerView rv_diagnosistype, List<DiagnosisListResponse.DataBean> diagnosisList) {\r\n\r\n        rv_diagnosistype.setNestedScrollingEnabled(true);\r\n        rv_diagnosistype.setLayoutManager(new LinearLayoutManager(this));\r\n        rv_diagnosistype.setItemAnimator(new DefaultItemAnimator());\r\n        diagnosiTypesListAdapter = new DiagnosiTypesListAdapter(getApplicationContext(), diagnosisList,this);\r\n        rv_diagnosistype.setAdapter(diagnosiTypesListAdapter);\r\n\r\n    }\r\n\r\n    private void filter(String text) {\r\n        //new array list that will hold the filtered data\r\n        List<DiagnosisListResponse.DataBean> dataBeanList = new ArrayList<>();\r\n\r\n\r\n        //looping through existing elements\r\n        for (DiagnosisListResponse.DataBean s : diagnosisList) {\r\n            //if the existing elements contains the search input\r\n            if (s.getDiagnosis().toLowerCase().contains(text.toLowerCase())) {\r\n                //adding the element to filtered list\r\n                dataBeanList.add(s);\r\n            }\r\n        }\r\n\r\n        Log.w(TAG, \"dataBeanList\" + new Gson().toJson(dataBeanList));\r\n        //calling a method of the adapter class and passing the filtered list\r\n        diagnosiTypesListAdapter.filterList(dataBeanList);\r\n    }\r\n\r\n\r\n    @Override\r\n    public void diagnosisTypeSelectListener(String id, String diagnosis) {\r\n\r\n        Log.w(TAG, \"Diagnosis ID \" + id + \"Diagnosis Type \"+diagnosis);\r\n\r\n        DiagnosisTypeId = id;\r\n\r\n        DiagnosisType = diagnosis;\r\n\r\n        btn_done.setVisibility(View.VISIBLE);\r\n\r\n\r\n    }\r\n\r\n    //Sub Diagnosis\r\n\r\n    private void showSubDiagnosisListType() {\r\n\r\n        try {\r\n\r\n            Dialog dialog = new Dialog(PrescriptionActivity.this);\r\n            dialog.setContentView(R.layout.alert_subdiagnosis_layout);\r\n            dialog.setCanceledOnTouchOutside(false);\r\n\r\n            ImageView img_close = dialog.findViewById(R.id.img_close);\r\n            btn_done1 = dialog.findViewById(R.id.btn_done1);\r\n            LinearLayout ll_diagnosistype = dialog.findViewById(R.id.ll_diagnosistype);\r\n            RecyclerView rv_diagnosistype = dialog.findViewById(R.id.rv_diagnosistype);\r\n            TextView tv_norecords = dialog.findViewById(R.id.tv_norecords);\r\n            EditText edt_search_diagnosistype = dialog.findViewById(R.id.edt_search_diagnosistype);\r\n\r\n            btn_done1.setVisibility(View.GONE);\r\n            img_close.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    dialog.dismiss();\r\n                }\r\n            });\r\n\r\n            btn_done1.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n\r\n                    txt_subdiagnosis.setVisibility(View.VISIBLE);\r\n\r\n                    txt_subdiagnosis.setText(SubDiagnosisType);\r\n\r\n                    for (int i=0;i<subDiagnosisList.size();i++){\r\n                        subDiagnosisList.get(i).setSelected(false);\r\n                    }\r\n\r\n                    subDiagnosiTypesListAdapter.notifyDataSetChanged();\r\n\r\n\r\n                    dialog.dismiss();\r\n\r\n\r\n                }\r\n            });\r\n\r\n            if(subDiagnosisList != null && subDiagnosisList.size()>0){\r\n                rv_diagnosistype.setVisibility(View.VISIBLE);\r\n                tv_norecords.setVisibility(View.GONE);\r\n                setSubDiagnosisView(rv_diagnosistype,subDiagnosisList);\r\n\r\n            }else{\r\n                rv_diagnosistype.setVisibility(View.GONE);\r\n                tv_norecords.setVisibility(View.VISIBLE);\r\n                tv_norecords.setText(\"No Sub Diagnosis Found\");\r\n            }\r\n\r\n\r\n            img_close.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    dialog.dismiss();\r\n\r\n                }\r\n            });\r\n\r\n\r\n            edt_search_diagnosistype.addTextChangedListener(new TextWatcher() {\r\n                @Override\r\n                public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {\r\n\r\n                }\r\n\r\n                @Override\r\n                public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {\r\n\r\n                }\r\n\r\n                @SuppressLint(\"LogNotTimber\")\r\n                @Override\r\n                public void afterTextChanged(Editable editable) {\r\n                    //after the change calling the method and passing the search input\r\n                    filterSubDiagnosis(editable.toString());\r\n                    Log.w(TAG,\"afterTextChanged : \"+editable.toString());\r\n                }\r\n            });\r\n\r\n\r\n\r\n            Objects.requireNonNull(dialog.getWindow()).setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r\n            dialog.show();\r\n\r\n        } catch (WindowManager.BadTokenException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    private void setSubDiagnosisView(RecyclerView rv_diagnosistype, List<SubDiagnosisListResponse.DataBean> diagnosisList) {\r\n\r\n        rv_diagnosistype.setNestedScrollingEnabled(true);\r\n        rv_diagnosistype.setLayoutManager(new LinearLayoutManager(this));\r\n        rv_diagnosistype.setItemAnimator(new DefaultItemAnimator());\r\n        subDiagnosiTypesListAdapter = new SubDiagnosiTypesListAdapter(getApplicationContext(), diagnosisList,this);\r\n        rv_diagnosistype.setAdapter(subDiagnosiTypesListAdapter);\r\n\r\n    }\r\n\r\n    private void filterSubDiagnosis(String text) {\r\n        //new array list that will hold the filtered data\r\n        List<SubDiagnosisListResponse.DataBean> dataBeanList = new ArrayList<>();\r\n\r\n\r\n        //looping through existing elements\r\n        for (SubDiagnosisListResponse.DataBean s : subDiagnosisList) {\r\n            //if the existing elements contains the search input\r\n            if (s.getSub_diagnosis().toLowerCase().contains(text.toLowerCase())) {\r\n                //adding the element to filtered list\r\n                dataBeanList.add(s);\r\n            }\r\n        }\r\n\r\n        Log.w(TAG, \"dataBeanList\" + new Gson().toJson(dataBeanList));\r\n        //calling a method of the adapter class and passing the filtered list\r\n        subDiagnosiTypesListAdapter.filterList(dataBeanList);\r\n    }\r\n\r\n\r\n    @Override\r\n    public void subdiagnosisTypeSelectListener(String id, String diagnosis) {\r\n\r\n        Log.w(TAG, \"SubDiagnosis ID \" + id + \"SubDiagnosis Type \"+diagnosis);\r\n\r\n        SubDiagnosisType = diagnosis;\r\n\r\n        btn_done1.setVisibility(View.VISIBLE);\r\n\r\n    }\r\n\r\n    @SuppressLint(\"ObsoleteSdkInt\")\r\n    private void chooseGovIDPdf() {\r\n\r\n        if(govtIdPicBeans!=null&&govtIdPicBeans.size()>=1){\r\n\r\n            Toasty.warning(getApplicationContext(), \"Sorry you can't Add more than 1\", Toast.LENGTH_SHORT).show();\r\n\r\n        }\r\n\r\n        else {\r\n\r\n\r\n\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(PrescriptionActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r\n            {\r\n                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_GOVTID_CAMERA_PERMISSION_CODE);\r\n            }\r\n\r\n            else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(PrescriptionActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r\n            {\r\n                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVTID_PIC_PERMISSION);\r\n            }\r\n\r\n            else\r\n            {\r\n                CropImage.activity().start(PrescriptionActivity.this);\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    @SuppressLint({\"MissingSuperCall\", \"ObsoleteSdkInt\"})\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n\r\n     if (requestCode == REQUEST_READ_GOVT_ID_PDF_PERMISSION) {\r\n\r\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n\r\n                Intent intent = new Intent();\r\n                intent.setType(\"application/pdf\");\r\n                intent.setAction(Intent.ACTION_GET_CONTENT);\r\n                startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_GOVTID_PDF);\r\n\r\n            } else {\r\n                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                        .setTitleText(\"Permisson Required\")\r\n                        .setContentText(\"Please Allow Permissions for choosing Pdf Files \")\r\n                        .setConfirmText(\"Ok\")\r\n                        .setConfirmClickListener(sDialog -> {\r\n\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVT_ID_PDF_PERMISSION);\r\n                            }\r\n\r\n\r\n                        })\r\n                        .setCancelButton(\"Cancel\", new SweetAlertDialog.OnSweetClickListener() {\r\n                            @Override\r\n                            public void onClick(SweetAlertDialog sDialog) {\r\n                                sDialog.dismissWithAnimation();\r\n\r\n                            }\r\n                        })\r\n                        .show();\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n        else if (requestCode == REQUEST_READ_GOVTID_PIC_PERMISSION) {\r\n\r\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n               /* Intent intent = new Intent();\r\n                intent.setType(\"image/*\");\r\n                intent.setAction(Intent.ACTION_GET_CONTENT);\r\n                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_GOVTID_PICTURE);*/\r\n\r\n                chooseGovIDPdf();\r\n\r\n            } else {\r\n                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                        .setTitleText(\"Permisson Required\")\r\n                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r\n                        .setConfirmText(\"Ok\")\r\n                        .setConfirmClickListener(sDialog -> {\r\n\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVTID_PIC_PERMISSION);\r\n                            }\r\n\r\n\r\n                        })\r\n                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r\n                        .show();\r\n\r\n            }\r\n\r\n        }\r\n\r\n        else if (requestCode == REQUEST_GOVTID_CAMERA_PERMISSION_CODE) {\r\n\r\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n\r\n              /*  Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\n\r\n                //    intent.putExtra(MediaStore.EXTRA_SCREEN_ORIENTATION, ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\r\n\r\n                startActivityForResult(intent, SELECT_GOVTID_CAMERA);*/\r\n\r\n                chooseGovIDPdf();\r\n\r\n            } else {\r\n                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                        .setTitleText(\"Permisson Required\")\r\n                        .setContentText(\"Please Allow Camera for taking picture\")\r\n                        .setConfirmText(\"Ok\")\r\n                        .setConfirmClickListener(sDialog -> {\r\n\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_GOVTID_CAMERA_PERMISSION_CODE);\r\n                            }\r\n\r\n\r\n                        })\r\n                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r\n                        .show();\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        try {\r\n            if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {\r\n                CropImage.ActivityResult result = CropImage.getActivityResult(data);\r\n                if (resultCode == RESULT_OK) {\r\n                    Uri resultUri = result.getUri();\r\n\r\n                    if (resultUri != null) {\r\n\r\n                        Log.w(\"selectedImageUri\", \" \" + resultUri);\r\n\r\n                        String filename = getFileName(resultUri);\r\n\r\n                        Log.w(\"filename\", \" \" + filename);\r\n\r\n                        String filePath = FileUtil.getPath(PrescriptionActivity.this, resultUri);\r\n\r\n                        assert filePath != null;\r\n\r\n                        File file = new File(filePath); // initialize file here\r\n\r\n                        long length = file.length() / 1024; // Size in KB\r\n\r\n                        Log.w(\"filesize\", \" \" + length);\r\n\r\n                        if (length > 2000) {\r\n\r\n                            new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                                    .setTitleText(\"File Size\")\r\n                                    .setContentText(\"Please choose file size less than 2 MB \")\r\n                                    .setConfirmText(\"Ok\")\r\n                                    .show();\r\n                        } else {\r\n\r\n\r\n                            SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r\n                            String currentDateandTime = sdf.format(new Date());\r\n\r\n                            govIdPart = MultipartBody.Part.createFormData(\"sampleFile\", userid + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\n\r\n                            uploadGovtIDPdf();\r\n\r\n                        }\r\n\r\n\r\n                    } else {\r\n\r\n                        Toasty.warning(PrescriptionActivity.this, \"Image Error!!Please upload Some other image\", Toasty.LENGTH_LONG).show();\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n\r\n\r\n            else if (requestCode == SELECT_GOVTID_CAMERA) {\r\n                Bitmap photo;\r\n                File file = null;\r\n                OutputStream os;\r\n                try {\r\n                    photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get(\"data\");\r\n                    file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\n                    os = new FileOutputStream(file);\r\n                    if (photo != null) {\r\n                        photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r\n                    }\r\n                    os.flush();\r\n                    os.close();\r\n                } catch (Exception e) {\r\n                    Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r\n                }\r\n                if (file != null) {\r\n                    RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\n                    govIdPart = MultipartBody.Part.createFormData(\"sampleFile\", Doctor_ID + currentDateandTime + file.getName(), requestFile);\r\n                    uploadGovtIDPdf();\r\n                }\r\n\r\n\r\n            } else if (requestCode == SELECT_GOVTID_PICTURE) {\r\n\r\n                try {\r\n                    if (resultCode == Activity.RESULT_OK) {\r\n\r\n                        Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\n\r\n                        Uri selectedImageUri = data.getData();\r\n\r\n                        Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\n\r\n                        String filename = null;\r\n                        if (selectedImageUri != null) {\r\n                            filename = getFileName(selectedImageUri);\r\n                        }\r\n\r\n                        Log.w(\"filename\", \" \" + filename);\r\n\r\n                        String filePath = FileUtil.getPath(PrescriptionActivity.this, selectedImageUri);\r\n\r\n                        assert filePath != null;\r\n\r\n                        File file = new File(filePath); // initialize file here\r\n\r\n                        long length = file.length() / 1024; // Size in KB\r\n\r\n                        Log.w(\"filesize\", \" \" + length);\r\n\r\n                        govIdPart = MultipartBody.Part.createFormData(\"sampleFile\", Doctor_ID + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\n\r\n                        uploadGovtIDPdf();\r\n\r\n\r\n                    }\r\n                } catch (Exception e) {\r\n\r\n                    Log.w(\"Exception\", \" \" + e);\r\n                }\r\n\r\n            } else if (requestCode == SELECT_GOVTID_PDF) {\r\n\r\n                try {\r\n                    if (resultCode == Activity.RESULT_OK) {\r\n\r\n                        Log.w(\"URI\", \" \" + data);\r\n\r\n                        Uri selectedFileUri = data.getData();\r\n\r\n                        Log.w(\"selectedFileUri\", \" \" + selectedFileUri);\r\n\r\n                        String filename = getFileName(selectedFileUri);\r\n\r\n                        Log.w(\"filename\", \" \" + filename);\r\n\r\n                        String filePath = FileUtil.getPath(PrescriptionActivity.this, selectedFileUri);\r\n\r\n                        assert filePath != null;\r\n\r\n                        File file = new File(filePath); // initialize file here\r\n\r\n                        long length = file.length() / 1024; // Size in KB\r\n\r\n                        Log.w(\"filesize\", \" \" + length);\r\n\r\n//                    if(length>200){\r\n//\r\n//                        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n//                                .setTitleText(\"File Size\")\r\n//                                .setContentText(\"Please choose file size less than 200 kb \")\r\n//                                .setConfirmText(\"Ok\")\r\n//                                .show();\r\n//                    }\r\n//\r\n//                    else{\r\n\r\n                        govIdPart = MultipartBody.Part.createFormData(\"sampleFile\", Doctor_ID + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"pdf/*\"), file));\r\n\r\n                        uploadGovtIDPdf();\r\n                        //}\r\n\r\n                    }\r\n                } catch (Exception e) {\r\n\r\n                    Log.w(\"Exception\", \" \" + e);\r\n                }\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    @SuppressLint(\"LogNotTimber\")\r\n    private void uploadGovtIDPdf() {\r\n\r\n        avi_indicator.show();\r\n\r\n        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\n\r\n        //RestApiInterface ApiService = RetrofitClient.getApiService();\r\n\r\n        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(govIdPart);\r\n\r\n//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());\r\n\r\n        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\n\r\n        call.enqueue(new Callback<FileUploadResponse>() {\r\n            @SuppressLint(\"LogNotTimber\")\r\n            @Override\r\n            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r\n                avi_indicator.smoothToHide();\r\n                Log.w(TAG,\"PdfFileLink\"+ \"--->\" + new Gson().toJson(response.body()));\r\n\r\n                if (response.body() != null) {\r\n\r\n                    if (200 == response.body().getCode()) {\r\n\r\n\r\n                        DocBusInfoUploadRequest.GovtIdPicBean govtIdPicBean = new DocBusInfoUploadRequest.GovtIdPicBean (response.body().getData());\r\n\r\n                        govtIdPicBeans.add(govtIdPicBean);\r\n\r\n                        if(govtIdPicBeans!=null&&govtIdPicBeans.size()>0){\r\n\r\n                            addGovtIdPdfAdapter = new AddGovtIdPdfAdapter(getApplicationContext(), govtIdPicBeans);\r\n\r\n                            rcylr_uploadImage.setLayoutManager(new GridLayoutManager(getApplicationContext(),2));\r\n                            rcylr_uploadImage.setAdapter(addGovtIdPdfAdapter);\r\n\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r\n                // avi_indicator.smoothToHide();\r\n                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r\n                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n\r\n    public String getFileName(Uri uri) {\r\n        String result = null;\r\n        if (uri.getScheme().equals(\"content\")) {\r\n            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {\r\n                if (cursor != null && cursor.moveToFirst()) {\r\n                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));\r\n                }\r\n            }\r\n        }\r\n        if (result == null) {\r\n            result = uri.getPath();\r\n            int cut = result.lastIndexOf('/');\r\n            if (cut != -1) {\r\n                result = result.substring(cut + 1);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private void setView() {\r\n        rv_prescriptiondetails.setLayoutManager(new LinearLayoutManager(getApplicationContext()));\r\n        rv_prescriptiondetails.setItemAnimator(new DefaultItemAnimator());\r\n        AddPrescriptionsListAdapter addPrescriptionsListAdapter = new AddPrescriptionsListAdapter(getApplicationContext(), prescriptionDataList);\r\n        rv_prescriptiondetails.setAdapter(addPrescriptionsListAdapter);\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/petfolio/infinituss/doctor/PrescriptionActivity.java b/app/src/main/java/com/petfolio/infinituss/doctor/PrescriptionActivity.java
--- a/app/src/main/java/com/petfolio/infinituss/doctor/PrescriptionActivity.java	(revision f1734ca40ba206b2d8b7b0e5c5470841991c7822)
+++ b/app/src/main/java/com/petfolio/infinituss/doctor/PrescriptionActivity.java	(date 1632497726769)
@@ -1,5 +1,7 @@
 package com.petfolio.infinituss.doctor;
 
+import static android.os.Environment.DIRECTORY_DOCUMENTS;
+
 import android.Manifest;
 import android.animation.LayoutTransition;
 import android.annotation.SuppressLint;
@@ -15,9 +17,11 @@
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
+import android.os.Environment;
 import android.provider.MediaStore;
 import android.provider.OpenableColumns;
 import android.text.Editable;
+import android.text.TextUtils;
 import android.text.TextWatcher;
 import android.util.Log;
 import android.view.LayoutInflater;
@@ -44,6 +48,7 @@
 import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
 
+import com.google.android.gms.common.util.IOUtils;
 import com.google.gson.Gson;
 import com.petfolio.infinituss.R;
 import com.petfolio.infinituss.adapter.AddGovtIdPdfAdapter;
@@ -71,11 +76,13 @@
 import com.petfolio.infinituss.sessionmanager.SessionManager;
 import com.petfolio.infinituss.utils.ConnectionDetector;
 import com.petfolio.infinituss.utils.RestUtils;
-import com.theartofdev.edmodo.cropper.CropImage;
+import com.canhub.cropper.CropImage;
 import com.wang.avi.AVLoadingIndicatorView;
 
 import java.io.File;
 import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
 import java.io.OutputStream;
 import java.io.Serializable;
 import java.text.SimpleDateFormat;
@@ -1517,7 +1524,7 @@
             if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {
                 CropImage.ActivityResult result = CropImage.getActivityResult(data);
                 if (resultCode == RESULT_OK) {
-                    Uri resultUri = result.getUri();
+                    Uri resultUri = result.getUriContent();
 
                     if (resultUri != null) {
 
@@ -1527,7 +1534,7 @@
 
                         Log.w("filename", " " + filename);
 
-                        String filePath = FileUtil.getPath(PrescriptionActivity.this, resultUri);
+                        String filePath = getFilePathFromURI(PrescriptionActivity.this, resultUri);
 
                         assert filePath != null;
 
@@ -1743,24 +1750,52 @@
     }
 
 
-    public String getFileName(Uri uri) {
-        String result = null;
-        if (uri.getScheme().equals("content")) {
-            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {
-                if (cursor != null && cursor.moveToFirst()) {
-                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));
-                }
-            }
-        }
-        if (result == null) {
-            result = uri.getPath();
-            int cut = result.lastIndexOf('/');
-            if (cut != -1) {
-                result = result.substring(cut + 1);
-            }
+    public static String getFilePathFromURI(Context context, Uri contentUri) {
+        //copy file and send new file path
+        String fileName = getFileName(contentUri);
+        if (!TextUtils.isEmpty(fileName)) {
+
+            String path = Environment.getExternalStoragePublicDirectory(DIRECTORY_DOCUMENTS).getPath() + "/" + "MyFirstApp/";
+            // Create the parent path
+            File dir = new File(path);
+            if (!dir.exists()) {
+                dir.mkdirs();
+            }
+
+            String fullName = path + "mylog";
+            File copyFile = new File (fullName);
+
+            /* File copyFile = new File(Environment.DIRECTORY_DOWNLOADS + File.separator + fileName);*/
+            copy(context, contentUri, copyFile);
+            return copyFile.getAbsolutePath();
+        }
+        return null;
+    }
+
+    public static String getFileName(Uri uri) {
+        if (uri == null) return null;
+        String fileName = null;
+        String path = uri.getPath();
+        int cut = path.lastIndexOf('/');
+        if (cut != -1) {
+            fileName = path.substring(cut + 1);
+        }
+        return fileName;
+    }
+
+    public static void copy(Context context, Uri srcUri, File dstFile) {
+        try {
+            InputStream inputStream = context.getContentResolver().openInputStream(srcUri);
+            if (inputStream == null) return;
+            OutputStream outputStream = new FileOutputStream(dstFile);
+            IOUtils.copyStream(inputStream, outputStream);
+            inputStream.close();
+            outputStream.close();
+        } catch (IOException e) {
+            e.printStackTrace();
         }
-        return result;
     }
+
 
     private void setView() {
         rv_prescriptiondetails.setLayoutManager(new LinearLayoutManager(getApplicationContext()));
Index: app/src/main/java/com/petfolio/infinituss/doctor/EditDoctorProfileImageActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.petfolio.infinituss.doctor;\r\n\r\nimport android.Manifest;\r\nimport android.annotation.SuppressLint;\r\nimport android.annotation.TargetApi;\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.database.Cursor;\r\nimport android.graphics.Bitmap;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.provider.MediaStore;\r\nimport android.provider.OpenableColumns;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.google.gson.Gson;\r\nimport com.petfolio.infinituss.R;\r\nimport com.petfolio.infinituss.api.APIClient;\r\nimport com.petfolio.infinituss.api.RestApiInterface;\r\nimport com.petfolio.infinituss.appUtils.FileUtil;\r\nimport com.petfolio.infinituss.doctor.EditDoctorProfileImageActivity;\r\nimport com.petfolio.infinituss.doctor.EditDoctorProfileImageActivity;\r\nimport com.petfolio.infinituss.requestpojo.DoctorUpdateProfileImageRequest;\r\nimport com.petfolio.infinituss.responsepojo.DoctorUpdateProfileImageResponse;\r\nimport com.petfolio.infinituss.responsepojo.FileUploadResponse;\r\nimport com.petfolio.infinituss.sessionmanager.SessionManager;\r\nimport com.petfolio.infinituss.utils.RestUtils;\r\nimport com.theartofdev.edmodo.cropper.CropImage;\r\nimport com.wang.avi.AVLoadingIndicatorView;\r\n\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.OutputStream;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Locale;\r\n\r\nimport butterknife.BindView;\r\nimport butterknife.ButterKnife;\r\nimport cn.pedant.SweetAlert.SweetAlertDialog;\r\nimport es.dmoral.toasty.Toasty;\r\nimport okhttp3.MediaType;\r\nimport okhttp3.MultipartBody;\r\nimport okhttp3.RequestBody;\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.Manifest.permission.CAMERA;\r\nimport static android.Manifest.permission.READ_EXTERNAL_STORAGE;\r\nimport static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;\r\n\r\npublic class EditDoctorProfileImageActivity extends AppCompatActivity implements View.OnClickListener {\r\n    private  String TAG = \"EditDoctorProfileImageActivity\";\r\n\r\n    @BindView(R.id.img_back)\r\n    ImageView img_back;\r\n\r\n\r\n\r\n\r\n    @BindView(R.id.img_pet_imge)\r\n    ImageView img_pet_imge;\r\n\r\n\r\n    @BindView(R.id.avi_indicator)\r\n    AVLoadingIndicatorView avi_indicator;\r\n\r\n    @BindView(R.id.txt_uploadpetimage)\r\n    TextView txt_uploadpetimage;\r\n\r\n    @BindView(R.id.btn_continue)\r\n    Button btn_continue;\r\n\r\n\r\n    public final int REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS = 1;\r\n    private static final String CAMERA_PERMISSION = CAMERA ;\r\n    private static final String READ_EXTERNAL_STORAGE_PERMISSION = READ_EXTERNAL_STORAGE;\r\n    private static final String WRITE_EXTERNAL_STORAGE_PERMISSION = WRITE_EXTERNAL_STORAGE;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    private static final int REQUEST_READ_CLINIC_PIC_PERMISSION = 786;\r\n    private static final int REQUEST_CLINIC_CAMERA_PERMISSION_CODE = 785 ;\r\n\r\n\r\n\r\n\r\n    private static final int SELECT_CLINIC_CAMERA = 1000 ;\r\n\r\n    private static final int SELECT_CLINIC_PICTURE = 1001 ;\r\n    private MultipartBody.Part filePart;\r\n    private String userid;\r\n    private String firstname,lastname,useremail;\r\n    private String phonenumber,usertype,userstatus,profileimage;\r\n    private String verifyemailstatus;\r\n    private String refcode;\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_edit_doctor_profile_image);\r\n        Log.w(TAG,\"onCreate \");\r\n        ButterKnife.bind(this);\r\n        avi_indicator.setVisibility(View.GONE);\r\n        btn_continue.setVisibility(View.GONE);\r\n        img_back.setOnClickListener(this);\r\n        btn_continue.setOnClickListener(this);\r\n        txt_uploadpetimage.setOnClickListener(this);\r\n        img_pet_imge.setOnClickListener(this);\r\n\r\n\r\n\r\n        SessionManager session = new SessionManager(getApplicationContext());\r\n        HashMap<String, String> user = session.getProfileDetails();\r\n        firstname = user.get(SessionManager.KEY_FIRST_NAME);\r\n        lastname = user.get(SessionManager.KEY_LAST_NAME);\r\n        useremail = user.get(SessionManager.KEY_EMAIL_ID);\r\n        phonenumber = user.get(SessionManager.KEY_MOBILE);\r\n        userid = user.get(SessionManager.KEY_ID);\r\n        usertype = user.get(SessionManager.KEY_TYPE);\r\n        userstatus = user.get(SessionManager.KEY_PROFILE_STATUS);\r\n        profileimage = user.get(SessionManager.KEY_PROFILE_IMAGE);\r\n        verifyemailstatus = user.get(SessionManager.KEY_VERIFY_EMAIL_STATUS);\r\n        refcode = user.get(SessionManager.KEY_REF_CODE);\r\n\r\n        if(profileimage != null && !profileimage.isEmpty()){\r\n            Glide.with(EditDoctorProfileImageActivity.this)\r\n                    .load(profileimage)\r\n                    .into(img_pet_imge);\r\n        }else{\r\n            Glide.with(EditDoctorProfileImageActivity.this)\r\n                    .load(R.drawable.image_thumbnail)\r\n                    .into(img_pet_imge);\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @Override\r\n    public void onClick(View v) {\r\n        switch (v.getId()){\r\n            case R.id.img_back:\r\n                onBackPressed();\r\n                break;\r\n\r\n\r\n                case R.id.txt_uploadpetimage:\r\n                   gotoUplodPetImage();\r\n                break;\r\n\r\n                case R.id.img_pet_imge:\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                    checkMultiplePermissions(REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS, EditDoctorProfileImageActivity.this);\r\n                }else{\r\n                    choosePetImage();\r\n\r\n                }\r\n                break;\r\n\r\n                case R.id.btn_continue:\r\n                    DoctorUpdateProfileImageResponseCall();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private void gotoUplodPetImage() {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n            checkMultiplePermissions(REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS, EditDoctorProfileImageActivity.this);\r\n        }else{\r\n            choosePetImage();\r\n\r\n        }\r\n    }\r\n\r\n    private void gotoDoctorProfileScreenActivity() {\r\n        Intent intent = new Intent(EditDoctorProfileImageActivity.this, DoctorProfileScreenActivity.class);\r\n        startActivity(intent);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        super.onBackPressed();\r\n        startActivity(new Intent(EditDoctorProfileImageActivity.this, DoctorProfileScreenActivity.class));\r\n        finish();\r\n    }\r\n\r\n\r\n\r\n\r\n    private void choosePetImage() {\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(EditDoctorProfileImageActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r\n        {\r\n            requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\n        }\r\n\r\n        else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(EditDoctorProfileImageActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r\n        {\r\n            requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r\n        }\r\n\r\n        else\r\n        {\r\n\r\n\r\n            CropImage.activity().start(EditDoctorProfileImageActivity.this);\r\n\r\n            /*CropImage.activity().start(AddYourPetImageOlduserActivity.this);*/\r\n        }\r\n\r\n\r\n/*\r\n            final CharSequence[] items = {\"Take Photo\", \"Choose from Library\", \"Cancel\"};\r\n            //AlertDialog.Builder alert=new AlertDialog.Builder(this);\r\n            AlertDialog.Builder builder = new AlertDialog.Builder(EditDoctorProfileImageActivity.this);\r\n            builder.setTitle(\"Choose option\");\r\n            builder.setItems(items, (dialog, item) -> {\r\n                if (items[item].equals(\"Take Photo\"))\r\n                {\r\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(EditDoctorProfileImageActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r\n                    {\r\n                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\n                    }\r\n                    else\r\n                    {\r\n\r\n\r\n                        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\n\r\n                        startActivityForResult(intent, SELECT_CLINIC_CAMERA);\r\n                    }\r\n\r\n                }\r\n\r\n                else if (items[item].equals(\"Choose from Library\"))\r\n                {\r\n\r\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(EditDoctorProfileImageActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r\n                    {\r\n                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r\n                    }\r\n\r\n                    else{\r\n\r\n                        Intent intent = new Intent();\r\n                        intent.setType(\"image/*\");\r\n                        intent.setAction(Intent.ACTION_GET_CONTENT);\r\n                        startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_CLINIC_PICTURE);\r\n\r\n\r\n                    }\r\n                }\r\n\r\n                else if (items[item].equals(\"Cancel\")) {\r\n                    dialog.dismiss();\r\n                }\r\n            });\r\n            builder.show();\r\n*/\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n\r\n        try{\r\n\r\n            if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {\r\n                CropImage.ActivityResult result = CropImage.getActivityResult(data);\r\n                if (resultCode == RESULT_OK) {\r\n                    Uri resultUri = result.getUri();\r\n\r\n                    if (resultUri != null) {\r\n\r\n                        Log.w(\"selectedImageUri\", \" \" + resultUri);\r\n\r\n                        String filename = getFileName(resultUri);\r\n\r\n                        Log.w(\"filename\", \" \" + filename);\r\n\r\n                        String filePath = FileUtil.getPath(EditDoctorProfileImageActivity.this, resultUri);\r\n\r\n                        assert filePath != null;\r\n\r\n                        File file = new File(filePath); // initialize file here\r\n\r\n                        long length = file.length() / 1024; // Size in KB\r\n\r\n                        Log.w(\"filesize\", \" \" + length);\r\n\r\n                        if (length > 2000) {\r\n\r\n                            new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                                    .setTitleText(\"File Size\")\r\n                                    .setContentText(\"Please choose file size less than 2 MB \")\r\n                                    .setConfirmText(\"Ok\")\r\n                                    .show();\r\n                        } else {\r\n\r\n\r\n                            SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r\n                            String currentDateandTime = sdf.format(new Date());\r\n\r\n                            filePart = MultipartBody.Part.createFormData(\"sampleFile\", userid + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\n\r\n                            uploadPetImage();\r\n\r\n                        }\r\n\r\n\r\n                    } else {\r\n\r\n                        Toasty.warning(EditDoctorProfileImageActivity.this, \"Image Error!!Please upload Some other image\", Toasty.LENGTH_LONG).show();\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n\r\n            else if(requestCode== SELECT_CLINIC_PICTURE || requestCode == SELECT_CLINIC_CAMERA) {\r\n\r\n                if(requestCode == SELECT_CLINIC_CAMERA)\r\n                {\r\n                    Bitmap photo = (Bitmap) data.getExtras().get(\"data\");\r\n\r\n                    File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\n\r\n                    OutputStream os;\r\n                    try {\r\n                        os = new FileOutputStream(file);\r\n                        photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r\n                        os.flush();\r\n                        os.close();\r\n                    } catch (Exception e) {\r\n                        Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r\n                    }\r\n                    SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r\n                    String currentDateandTime = sdf.format(new Date());\r\n\r\n                    RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\n\r\n                    filePart = MultipartBody.Part.createFormData(\"sampleFile\",  userid+currentDateandTime+file.getName(), requestFile);\r\n\r\n                    uploadPetImage();\r\n\r\n                }\r\n\r\n                else{\r\n\r\n                    try {\r\n                        if (resultCode == Activity.RESULT_OK)\r\n                        {\r\n\r\n                            Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\n\r\n                            Uri selectedImageUri = data.getData();\r\n\r\n                            Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\n\r\n                            String filename = getFileName(selectedImageUri);\r\n\r\n                            Log.w(\"filename\", \" \" + filename);\r\n\r\n                            String filePath = FileUtil.getPath(EditDoctorProfileImageActivity.this,selectedImageUri);\r\n\r\n                            assert filePath != null;\r\n\r\n                            File file = new File(filePath); // initialize file here\r\n\r\n                            long length = file.length() / 1024; // Size in KB\r\n\r\n                            Log.w(\"filesize\", \" \" + length);\r\n\r\n                            SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r\n                            String currentDateandTime = sdf.format(new Date());\r\n\r\n                            filePart = MultipartBody.Part.createFormData(\"sampleFile\", userid+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\n\r\n                            uploadPetImage();\r\n\r\n\r\n                        }\r\n                    } catch (Exception e) {\r\n\r\n                        Log.w(\"Exception\", \" \" + e);\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n        catch (Exception e){\r\n            Log.w(TAG,\"onActivityResult exception\"+e.toString());\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    private void uploadPetImage() {\r\n\r\n        avi_indicator.show();\r\n\r\n        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\n\r\n\r\n        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(filePart);\r\n\r\n\r\n        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\n\r\n        call.enqueue(new Callback<FileUploadResponse>() {\r\n            @Override\r\n            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r\n                avi_indicator.smoothToHide();\r\n                Log.w(TAG,\"Profpic\"+ \"--->\" + new Gson().toJson(response.body()));\r\n\r\n                if (response.body() != null) {\r\n                    if (200 == response.body().getCode()) {\r\n\r\n                        profileimage = response.body().getData();\r\n                        btn_continue.setVisibility(View.VISIBLE);\r\n\r\n                        Log.w(TAG, \"ServerUrlImagePath \" + profileimage);\r\n\r\n                        if( response.body().getData() != null){\r\n                            Glide.with(EditDoctorProfileImageActivity.this)\r\n                                    .load(profileimage)\r\n                                    .into(img_pet_imge);\r\n                        }else{\r\n                            Glide.with(EditDoctorProfileImageActivity.this)\r\n                                    .load(R.drawable.image_thumbnail)\r\n                                    .into(img_pet_imge);\r\n\r\n                        }\r\n\r\n\r\n\r\n                    }\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r\n                // avi_indicator.smoothToHide();\r\n                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r\n                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    @SuppressLint(\"MissingSuperCall\")\r\n    @RequiresApi(api = Build.VERSION_CODES.M)\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode,\r\n                                           @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        if (requestCode == REQUEST_READ_CLINIC_PIC_PERMISSION) {\r\n\r\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n//                Intent intent = new Intent();\r\n//                intent.setType(\"image/*\");\r\n//                intent.setAction(Intent.ACTION_GET_CONTENT);\r\n//                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_CLINIC_PICTURE);\r\n\r\n                choosePetImage();\r\n\r\n            } else {\r\n                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                        .setTitleText(\"Permission Required\")\r\n                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r\n                        .setConfirmText(\"Ok\")\r\n                        .setConfirmClickListener(sDialog -> {\r\n\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r\n                            }\r\n\r\n\r\n                        })\r\n                        .setCancelButton(\"Cancel\", sDialog -> {\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            showWarning(REQUEST_READ_CLINIC_PIC_PERMISSION);\r\n                        })\r\n                        .show();\r\n\r\n            }\r\n\r\n        }\r\n\r\n        else if (requestCode == REQUEST_CLINIC_CAMERA_PERMISSION_CODE) {\r\n\r\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n\r\n//                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\n//\r\n//                startActivityForResult(intent, SELECT_CLINIC_CAMERA);\r\n\r\n                choosePetImage();\r\n\r\n            } else {\r\n                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                        .setTitleText(\"Permisson Required\")\r\n                        .setContentText(\"Please Allow Camera for taking picture\")\r\n                        .setConfirmText(\"Ok\")\r\n                        .setConfirmClickListener(sDialog -> {\r\n\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\n                            }\r\n\r\n\r\n                        })\r\n                        .setCancelButton(\"Cancel\", sDialog -> {\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            showWarning(REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\n                        })\r\n                        .show();\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    //check for camera and storage access permissions\r\n    @TargetApi(Build.VERSION_CODES.M)\r\n    private void checkMultiplePermissions(int permissionCode, Context context) {\r\n\r\n        String[] PERMISSIONS = {CAMERA_PERMISSION, READ_EXTERNAL_STORAGE_PERMISSION, WRITE_EXTERNAL_STORAGE_PERMISSION};\r\n        if (!hasPermissions(context, PERMISSIONS)) {\r\n            ActivityCompat.requestPermissions((Activity) context, PERMISSIONS, permissionCode);\r\n        } else {\r\n            choosePetImage();\r\n            // Open your camera here.\r\n        }\r\n    }\r\n    private boolean hasPermissions(Context context, String... permissions) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && context != null && permissions != null) {\r\n            for (String permission : permissions) {\r\n                if (ActivityCompat.checkSelfPermission(context, permission) != PackageManager.PERMISSION_GRANTED) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private void showWarning(int REQUEST_PERMISSION_CODE) {\r\n\r\n        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                .setTitleText(\"Sorry!!\")\r\n                .setContentText(\"You Can't proceed further unless you allow permission\")\r\n                .setConfirmText(\"Ok\")\r\n                .setConfirmClickListener(sDialog -> {\r\n\r\n                    sDialog.dismissWithAnimation();\r\n\r\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)\r\n                    {\r\n                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_PERMISSION_CODE);\r\n                    }\r\n\r\n\r\n                })\r\n                .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r\n                .show();\r\n    }\r\n\r\n    public String getFileName(Uri uri) {\r\n        String result = null;\r\n        if (uri.getScheme().equals(\"content\")) {\r\n            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {\r\n                if (cursor != null && cursor.moveToFirst()) {\r\n                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));\r\n                }\r\n            }\r\n        }\r\n        if (result == null) {\r\n            result = uri.getPath();\r\n            int cut = result.lastIndexOf('/');\r\n            if (cut != -1) {\r\n                result = result.substring(cut + 1);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    @SuppressLint(\"LogNotTimber\")\r\n    private void DoctorUpdateProfileImageResponseCall() {\r\n        avi_indicator.setVisibility(View.VISIBLE);\r\n        avi_indicator.smoothToShow();\r\n        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);\r\n        Call<DoctorUpdateProfileImageResponse> call = apiInterface.DoctorUpdateProfileImageResponseCall(RestUtils.getContentType(), doctorUpdateProfileImageRequest());\r\n        Log.w(TAG,\"DoctorUpdateProfileImageResponse url  :%s\"+\" \"+ call.request().url().toString());\r\n\r\n        call.enqueue(new Callback<DoctorUpdateProfileImageResponse>() {\r\n            @SuppressLint(\"LogNotTimber\")\r\n            @Override\r\n            public void onResponse(@NonNull Call<DoctorUpdateProfileImageResponse> call, @NonNull Response<DoctorUpdateProfileImageResponse> response) {\r\n\r\n                Log.w(TAG,\"DoctorUpdateProfileImageResponse\"+ \"--->\" + new Gson().toJson(response.body()));\r\n\r\n                avi_indicator.smoothToHide();\r\n\r\n                if (response.body() != null) {\r\n                    if(response.body().getCode() == 200){\r\n                        SessionManager sessionManager = new SessionManager(getApplicationContext());\r\n                        sessionManager.setIsLogin(true);\r\n                        sessionManager.createLoginSession(\r\n                                userid,\r\n                                firstname,\r\n                                lastname,\r\n                                useremail,\r\n                                phonenumber,\r\n                                String.valueOf(usertype),\r\n                                userstatus,\r\n                                profileimage,\r\n                                verifyemailstatus,\r\n                                refcode\r\n\r\n                        );\r\n                       onBackPressed();\r\n                    }\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call<DoctorUpdateProfileImageResponse> call, @NonNull Throwable t) {\r\n\r\n                avi_indicator.smoothToHide();\r\n                Log.w(TAG,\"DoctorUpdateProfileImageResponse flr\"+\"--->\" + t.getMessage());\r\n            }\r\n        });\r\n\r\n    }\r\n    private DoctorUpdateProfileImageRequest doctorUpdateProfileImageRequest() {\r\n        DoctorUpdateProfileImageRequest  doctorUpdateProfileImageRequest = new DoctorUpdateProfileImageRequest();\r\n        doctorUpdateProfileImageRequest.setUser_id(userid);\r\n        if(profileimage != null && !profileimage.isEmpty()){\r\n        doctorUpdateProfileImageRequest.setProfile_img(profileimage);\r\n        }else{\r\n            doctorUpdateProfileImageRequest.setProfile_img(APIClient.PROFILE_IMAGE_URL);\r\n\r\n        }\r\n\r\n        Log.w(TAG,\"doctorUpdateProfileImageRequest\"+ \"--->\" + new Gson().toJson(doctorUpdateProfileImageRequest));\r\n        return doctorUpdateProfileImageRequest;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/petfolio/infinituss/doctor/EditDoctorProfileImageActivity.java b/app/src/main/java/com/petfolio/infinituss/doctor/EditDoctorProfileImageActivity.java
--- a/app/src/main/java/com/petfolio/infinituss/doctor/EditDoctorProfileImageActivity.java	(revision f1734ca40ba206b2d8b7b0e5c5470841991c7822)
+++ b/app/src/main/java/com/petfolio/infinituss/doctor/EditDoctorProfileImageActivity.java	(date 1632497726745)
@@ -12,8 +12,10 @@
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
+import android.os.Environment;
 import android.provider.MediaStore;
 import android.provider.OpenableColumns;
+import android.text.TextUtils;
 import android.util.Log;
 import android.view.View;
 import android.widget.Button;
@@ -28,6 +30,7 @@
 import androidx.core.content.ContextCompat;
 
 import com.bumptech.glide.Glide;
+import com.google.android.gms.common.util.IOUtils;
 import com.google.gson.Gson;
 import com.petfolio.infinituss.R;
 import com.petfolio.infinituss.api.APIClient;
@@ -40,11 +43,13 @@
 import com.petfolio.infinituss.responsepojo.FileUploadResponse;
 import com.petfolio.infinituss.sessionmanager.SessionManager;
 import com.petfolio.infinituss.utils.RestUtils;
-import com.theartofdev.edmodo.cropper.CropImage;
+import com.canhub.cropper.CropImage;
 import com.wang.avi.AVLoadingIndicatorView;
 
 import java.io.File;
 import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
 import java.io.OutputStream;
 import java.text.SimpleDateFormat;
 import java.util.Date;
@@ -65,6 +70,7 @@
 import static android.Manifest.permission.CAMERA;
 import static android.Manifest.permission.READ_EXTERNAL_STORAGE;
 import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;
+import static android.os.Environment.DIRECTORY_DOCUMENTS;
 
 public class EditDoctorProfileImageActivity extends AppCompatActivity implements View.OnClickListener {
     private  String TAG = "EditDoctorProfileImageActivity";
@@ -298,7 +304,7 @@
             if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {
                 CropImage.ActivityResult result = CropImage.getActivityResult(data);
                 if (resultCode == RESULT_OK) {
-                    Uri resultUri = result.getUri();
+                    Uri resultUri = result.getUriContent();
 
                     if (resultUri != null) {
 
@@ -308,7 +314,7 @@
 
                         Log.w("filename", " " + filename);
 
-                        String filePath = FileUtil.getPath(EditDoctorProfileImageActivity.this, resultUri);
+                        String filePath = getFilePathFromURI(EditDoctorProfileImageActivity.this, resultUri);
 
                         assert filePath != null;
 
@@ -613,24 +619,52 @@
                 .show();
     }
 
-    public String getFileName(Uri uri) {
-        String result = null;
-        if (uri.getScheme().equals("content")) {
-            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {
-                if (cursor != null && cursor.moveToFirst()) {
-                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));
-                }
-            }
-        }
-        if (result == null) {
-            result = uri.getPath();
-            int cut = result.lastIndexOf('/');
-            if (cut != -1) {
-                result = result.substring(cut + 1);
-            }
+    public static String getFilePathFromURI(Context context, Uri contentUri) {
+        //copy file and send new file path
+        String fileName = getFileName(contentUri);
+        if (!TextUtils.isEmpty(fileName)) {
+
+            String path = Environment.getExternalStoragePublicDirectory(DIRECTORY_DOCUMENTS).getPath() + "/" + "MyFirstApp/";
+            // Create the parent path
+            File dir = new File(path);
+            if (!dir.exists()) {
+                dir.mkdirs();
+            }
+
+            String fullName = path + "mylog";
+            File copyFile = new File (fullName);
+
+            /* File copyFile = new File(Environment.DIRECTORY_DOWNLOADS + File.separator + fileName);*/
+            copy(context, contentUri, copyFile);
+            return copyFile.getAbsolutePath();
+        }
+        return null;
+    }
+
+    public static String getFileName(Uri uri) {
+        if (uri == null) return null;
+        String fileName = null;
+        String path = uri.getPath();
+        int cut = path.lastIndexOf('/');
+        if (cut != -1) {
+            fileName = path.substring(cut + 1);
+        }
+        return fileName;
+    }
+
+    public static void copy(Context context, Uri srcUri, File dstFile) {
+        try {
+            InputStream inputStream = context.getContentResolver().openInputStream(srcUri);
+            if (inputStream == null) return;
+            OutputStream outputStream = new FileOutputStream(dstFile);
+            IOUtils.copyStream(inputStream, outputStream);
+            inputStream.close();
+            outputStream.close();
+        } catch (IOException e) {
+            e.printStackTrace();
         }
-        return result;
     }
+
 
 
     @SuppressLint("LogNotTimber")
Index: app/src/main/java/com/petfolio/infinituss/petlover/BookAppointmentActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.petfolio.infinituss.petlover;\r\n\r\nimport static android.Manifest.permission.CAMERA;\r\nimport static android.Manifest.permission.READ_EXTERNAL_STORAGE;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport androidx.viewpager.widget.ViewPager;\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.database.Cursor;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.Color;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.provider.MediaStore;\r\nimport android.provider.OpenableColumns;\r\nimport android.text.InputType;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.view.WindowManager;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.RadioButton;\r\nimport android.widget.RadioGroup;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.google.android.material.tabs.TabLayout;\r\nimport com.google.gson.Gson;\r\nimport com.petfolio.infinituss.R;\r\nimport com.petfolio.infinituss.activity.NotificationActivity;\r\nimport com.petfolio.infinituss.adapter.AddImageListAdapter;\r\nimport com.petfolio.infinituss.adapter.ManageAddressListVisitAdapter;\r\nimport com.petfolio.infinituss.adapter.ViewPagerPetlistAdapter;\r\nimport com.petfolio.infinituss.api.APIClient;\r\nimport com.petfolio.infinituss.api.RestApiInterface;\r\nimport com.petfolio.infinituss.appUtils.FileUtil;\r\nimport com.petfolio.infinituss.interfaces.LocationDefaultListener;\r\nimport com.petfolio.infinituss.requestpojo.AddYourPetRequest;\r\nimport com.petfolio.infinituss.requestpojo.BreedTypeRequest;\r\nimport com.petfolio.infinituss.requestpojo.DocBusInfoUploadRequest;\r\nimport com.petfolio.infinituss.requestpojo.LocationListAddressRequest;\r\nimport com.petfolio.infinituss.requestpojo.NotificationSendRequest;\r\nimport com.petfolio.infinituss.requestpojo.PetAppointmentCreateRequest;\r\nimport com.petfolio.infinituss.requestpojo.PetDetailsRequest;\r\nimport com.petfolio.infinituss.responsepojo.AddYourPetResponse;\r\nimport com.petfolio.infinituss.responsepojo.BreedTypeResponse;\r\nimport com.petfolio.infinituss.responsepojo.FileUploadResponse;\r\nimport com.petfolio.infinituss.responsepojo.LocationListAddressResponse;\r\nimport com.petfolio.infinituss.responsepojo.NotificationSendResponse;\r\nimport com.petfolio.infinituss.responsepojo.PetAppointmentCreateResponse;\r\nimport com.petfolio.infinituss.responsepojo.PetDetailsResponse;\r\nimport com.petfolio.infinituss.responsepojo.PetTypeListResponse;\r\nimport com.petfolio.infinituss.sessionmanager.SessionManager;\r\nimport com.petfolio.infinituss.utils.ConnectionDetector;\r\nimport com.petfolio.infinituss.utils.RestUtils;\r\nimport com.razorpay.Checkout;\r\nimport com.razorpay.PaymentResultListener;\r\nimport com.theartofdev.edmodo.cropper.CropImage;\r\nimport com.wang.avi.AVLoadingIndicatorView;\r\n\r\nimport org.json.JSONObject;\r\n\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.OutputStream;\r\nimport java.text.DateFormat;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Objects;\r\nimport java.util.Timer;\r\nimport java.util.TimerTask;\r\n\r\nimport butterknife.BindView;\r\nimport butterknife.ButterKnife;\r\nimport cn.pedant.SweetAlert.SweetAlertDialog;\r\nimport es.dmoral.toasty.Toasty;\r\nimport okhttp3.MediaType;\r\nimport okhttp3.MultipartBody;\r\nimport okhttp3.RequestBody;\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class BookAppointmentActivity extends AppCompatActivity implements PaymentResultListener, LocationDefaultListener {\r\n\r\n    private static final String TAG = \"BookAppointmentActivity\";\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.avi_indicator)\r\n    AVLoadingIndicatorView avi_indicator;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.spr_selectyourpettype)\r\n    Spinner spr_selectyourpettype;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.sprpettype)\r\n    Spinner sprpettype;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.sprpetbreed)\r\n    Spinner sprpetbreed;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.btn_continue)\r\n    Button btn_continue;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.cdvw)\r\n    CardView cv_pet_img;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.txt_pettype)\r\n    TextView txt_pettype;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.txt_petbreed)\r\n    TextView txt_petbreed;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.edt_petname)\r\n    EditText edt_petname;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.rl_petbreed)\r\n    RelativeLayout rl_petbreed;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.rl_pettype)\r\n    RelativeLayout rl_pettype;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.txt_or)\r\n    TextView txt_or;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.rl_pet_pics)\r\n    RelativeLayout rl_pet_pics;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.rv_upload_pet_images)\r\n    RecyclerView rv_upload_pet_images;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.img_pet_imge)\r\n    ImageView img_pet_imge;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.pager)\r\n    ViewPager viewPager;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.tabDots)\r\n    TabLayout tabLayout;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.txt_lbl_uploadpet)\r\n    TextView txt_lbl_uploadpet;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.rg_appointmenttype)\r\n    RadioGroup rg_appointmenttype;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.edt_allergies)\r\n    EditText edt_allergies;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.edt_comment)\r\n    EditText edt_comment;\r\n\r\n\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.rg_communicationtype)\r\n    RadioGroup rg_communicationtype;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.radioButton_online)\r\n    RadioButton radioButton_online;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.radioButton_visit)\r\n    RadioButton radioButton_visit;\r\n\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.include_petlover_header)\r\n    View include_petlover_header;\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.ll_visit_group)\r\n    LinearLayout ll_visit_group;\r\n\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @BindView(R.id.rg_visit_group)\r\n    RadioGroup rg_visit_group;\r\n\r\n    private List<PetTypeListResponse.DataBean.UsertypedataBean> usertypedataBeanList;\r\n    private String strPetType;\r\n    private String strPetBreedType;\r\n    private String userid = \"\";\r\n    private String strSelectyourPetType;\r\n\r\n    HashMap<String, String> hashMap_PetTypeid = new HashMap<>();\r\n    private String petTypeId;\r\n    private List<PetDetailsResponse.DataBean> petDetailsResponseByUserIdList;\r\n    private List<BreedTypeResponse.DataBean> breedTypedataBeanList;\r\n    private String petName;\r\n    private String petType;\r\n    private String petBreed;\r\n\r\n    private final List<DocBusInfoUploadRequest.ClinicPicBean> clinicPicBeans = new ArrayList<>();\r\n\r\n    private static final int REQUEST_CLINIC_CAMERA_PERMISSION_CODE = 785;\r\n    private static final int SELECT_CLINIC_CAMERA = 1000;\r\n    private static final int REQUEST_READ_CLINIC_PIC_PERMISSION = 786;\r\n    private static final int SELECT_CLINIC_PICTURE = 1001;\r\n\r\n    MultipartBody.Part filePart;\r\n    String currentDateandTime;\r\n    private String uploadimagepath = \"\";\r\n    Dialog alertDialog;\r\n    private boolean isSelectYourPet;\r\n    private String selectedAppointmentType = \"Normal\";\r\n    private String selectedVisitType = \"\";\r\n    private String petId;\r\n    private String doctorid;\r\n    private String fromactivity;\r\n    private String fromto;\r\n    private String Payment_id = \"\";\r\n\r\n    private String Doctor_ava_Date = \"\";\r\n    private String selectedTimeSlot = \"\";\r\n\r\n    private int amount;\r\n    private String communicationtype = \"\";\r\n\r\n    HashMap<String, String> hashMap_selectyourpet = new HashMap<>();\r\n    private String selectedCommunicationtype;\r\n    private List<PetDetailsResponse.DataBean.PetImgBean> petimage;\r\n    int currentPage = 0;\r\n    Timer timer;\r\n    final long DELAY_MS = 500;//delay in milliseconds before task is to be executed\r\n    final long PERIOD_MS = 3000;\r\n    private Dialog dialog;\r\n\r\n    TextView txt_no_records;\r\n    TextView txt_savedaddress;\r\n    RecyclerView rv_manage_address;\r\n    Button btn_use_this_addreess;\r\n    private List<LocationListAddressResponse.DataBean> addressList;\r\n\r\n    String locationid = \"\";\r\n    private boolean isVisit;\r\n    private String health_issue_title;\r\n\r\n    private String doctorname;\r\n    private String clinicname;\r\n    private String petname;\r\n    private String strpetimage;\r\n    private String Problem_info = \"\";\r\n    private String Allergies = \"\";\r\n\r\n    @SuppressLint(\"LogNotTimber\")\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_book_appointment);\r\n\r\n        ButterKnife.bind(this);\r\n        Bundle extras = getIntent().getExtras();\r\n        if (extras != null) {\r\n            doctorid = extras.getString(\"doctorid\");\r\n            fromactivity = extras.getString(\"fromactivity\");\r\n            fromto = extras.getString(\"fromto\");\r\n            Doctor_ava_Date = extras.getString(\"Doctor_ava_Date\");\r\n            selectedTimeSlot = extras.getString(\"selectedTimeSlot\");\r\n            amount = extras.getInt(\"amount\");\r\n            Log.w(TAG,\"amount : \"+amount);\r\n            communicationtype = extras.getString(\"communicationtype\");\r\n            petId = extras.getString(\"petId\");\r\n            health_issue_title = extras.getString(\"health_issue_title\");\r\n            Log.w(TAG,\"Bundle \"+\" doctorid : \"+doctorid+\" selectedTimeSlot : \"+selectedTimeSlot+\"communicationtype : \"+communicationtype+\" amount : \"+amount+\" fromactivity : \"+fromactivity);\r\n\r\n            Log.w(TAG, \"petId : \" + petId);\r\n\r\n            doctorname = extras.getString(\"doctorname\");\r\n            clinicname = extras.getString(\"clinicname\");\r\n            petname = extras.getString(\"petname\");\r\n            strpetimage = extras.getString(\"petimage\");\r\n\r\n            Log.w(TAG, \"strpetimage : \" + strpetimage);\r\n\r\n\r\n            if(strpetimage != null) {\r\n                DocBusInfoUploadRequest.ClinicPicBean clinicPicBean = new DocBusInfoUploadRequest.ClinicPicBean(strpetimage);\r\n                clinicPicBeans.add(clinicPicBean);\r\n                setView();\r\n            }\r\n\r\n        }\r\n\r\n        ImageView img_back = include_petlover_header.findViewById(R.id.img_back);\r\n        ImageView img_sos = include_petlover_header.findViewById(R.id.img_sos);\r\n        ImageView img_notification = include_petlover_header.findViewById(R.id.img_notification);\r\n        ImageView img_cart = include_petlover_header.findViewById(R.id.img_cart);\r\n        ImageView img_profile = include_petlover_header.findViewById(R.id.img_profile);\r\n        TextView toolbar_title = include_petlover_header.findViewById(R.id.toolbar_title);\r\n        toolbar_title.setText(getResources().getString(R.string.appointment));\r\n\r\n        img_sos.setVisibility(View.GONE);\r\n        img_cart.setVisibility(View.GONE);\r\n        img_notification.setVisibility(View.GONE);\r\n        img_profile.setVisibility(View.GONE);\r\n\r\n        img_notification.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                startActivity(new Intent(getApplicationContext(), NotificationActivity.class));\r\n            }\r\n        });\r\n        img_profile.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(getApplicationContext(), PetLoverProfileScreenActivity.class);\r\n                intent.putExtra(\"doctorid\",doctorid);\r\n                intent.putExtra(\"fromactivity\",TAG);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n\r\n        txt_pettype.setVisibility(View.GONE);\r\n        txt_petbreed.setVisibility(View.GONE);\r\n        cv_pet_img.setVisibility(View.GONE);\r\n        rv_upload_pet_images.setVisibility(View.GONE);\r\n        img_pet_imge.setVisibility(View.VISIBLE);\r\n        rl_petbreed.setVisibility(View.GONE);\r\n\r\n        ll_visit_group.setVisibility(View.GONE);\r\n        radioButton_online.setVisibility(View.GONE);\r\n        radioButton_visit.setVisibility(View.GONE);\r\n\r\n        if(communicationtype != null){\r\n            if(communicationtype.equalsIgnoreCase(\"Online Or Visit\")){\r\n                radioButton_online.setVisibility(View.VISIBLE);\r\n                radioButton_visit.setVisibility(View.VISIBLE);\r\n                radioButton_online.setChecked(true);\r\n                selectedCommunicationtype = \"Online\";\r\n\r\n            }else if(communicationtype.equalsIgnoreCase(\"Online\")){\r\n                radioButton_online.setVisibility(View.VISIBLE);\r\n                radioButton_online.setChecked(true);\r\n                radioButton_online.setClickable(false);\r\n                selectedCommunicationtype = \"Online\";\r\n\r\n            }else if(communicationtype.equalsIgnoreCase(\"Visit\")){\r\n                isVisit = true;\r\n                radioButton_visit.setVisibility(View.VISIBLE);\r\n                radioButton_visit.setChecked(true);\r\n                radioButton_visit.setClickable(false);\r\n                selectedCommunicationtype = \"Visit\";\r\n                ll_visit_group.setVisibility(View.VISIBLE);\r\n            }\r\n        }\r\n\r\n        SessionManager sessionManager = new SessionManager(getApplicationContext());\r\n        HashMap<String, String> user = sessionManager.getProfileDetails();\r\n        userid = user.get(SessionManager.KEY_ID);\r\n        SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r\n        currentDateandTime = sdf.format(new Date());\r\n\r\n        if (userid != null) {\r\n            if (new ConnectionDetector(getApplicationContext()).isNetworkAvailable(getApplicationContext())) {\r\n                petDetailsResponseByUserIdCall();\r\n            }\r\n\r\n        }\r\n\r\n        img_back.setOnClickListener(v -> onBackPressed());\r\n\r\n        spr_selectyourpettype.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int arg2, long arg3) {\r\n                ((TextView) parent.getChildAt(0)).setTextColor(getResources().getColor(R.color.green));\r\n                strSelectyourPetType = spr_selectyourpettype.getSelectedItem().toString();\r\n                String selectedpetid = hashMap_selectyourpet.get(strSelectyourPetType);\r\n\r\n                Log.w(TAG, \"strPetType :\" + strSelectyourPetType+\" selectedpetid : \"+selectedpetid);\r\n                if (!strSelectyourPetType.equalsIgnoreCase(\"Select Your Pet\")) {\r\n                    isSelectYourPet = true;\r\n                    txt_or.setVisibility(View.GONE);\r\n                    txt_pettype.setVisibility(View.VISIBLE);\r\n                    txt_petbreed.setVisibility(View.VISIBLE);\r\n                    cv_pet_img.setVisibility(View.VISIBLE);\r\n                    edt_petname.setVisibility(View.GONE);\r\n                    edt_petname.setEnabled(false);\r\n                    edt_petname.setInputType(InputType.TYPE_NULL);\r\n                    if(petDetailsResponseByUserIdList != null && petDetailsResponseByUserIdList.size()>0) {\r\n                        for(int i = 0;i<petDetailsResponseByUserIdList.size();i++) {\r\n                            if(selectedpetid != null && selectedpetid.equalsIgnoreCase(petDetailsResponseByUserIdList.get(i).get_id())) {\r\n                                petName = petDetailsResponseByUserIdList.get(i).getPet_name();\r\n                                petType = petDetailsResponseByUserIdList.get(i).getPet_type();\r\n                                petBreed = petDetailsResponseByUserIdList.get(i).getPet_breed();\r\n                                petId = petDetailsResponseByUserIdList.get(i).get_id();\r\n                                petimage = petDetailsResponseByUserIdList.get(i).getPet_img();\r\n                                if(petimage!=null&&petimage.size()>0){\r\n\r\n                                    img_pet_imge.setVisibility(View.GONE);\r\n\r\n                                    viewpageData(petimage);\r\n                                }\r\n\r\n                                else {\r\n\r\n                                    img_pet_imge.setVisibility(View.VISIBLE);\r\n\r\n                                }\r\n\r\n                                Log.w(TAG, \"for petType-->\" + petType + \"  petName : \"+petName+\" petId : \"+petId+\" petimage : \"+petimage);\r\n\r\n                            }\r\n                        }\r\n                    }\r\n\r\n\r\n\r\n                    edt_petname.setText(petName);\r\n                    txt_pettype.setText(petType);\r\n                    txt_petbreed.setText(petBreed);\r\n\r\n\r\n                    rl_pettype.setVisibility(View.GONE);\r\n                    rl_petbreed.setVisibility(View.GONE);\r\n                    rv_upload_pet_images.setVisibility(View.GONE);\r\n                    txt_lbl_uploadpet.setVisibility(View.GONE);\r\n                    rl_pet_pics.setVisibility(View.GONE);\r\n\r\n                }\r\n                else {\r\n                    isSelectYourPet = false;\r\n                    txt_or.setVisibility(View.VISIBLE);\r\n                    edt_petname.setVisibility(View.VISIBLE);\r\n\r\n                    txt_pettype.setVisibility(View.GONE);\r\n                    txt_petbreed.setVisibility(View.GONE);\r\n                    cv_pet_img.setVisibility(View.GONE);\r\n                    img_pet_imge.setVisibility(View.VISIBLE);\r\n                    edt_petname.setText(\"\");\r\n                    edt_petname.setEnabled(true);\r\n                    edt_petname.setInputType(InputType.TYPE_TEXT_VARIATION_PERSON_NAME);\r\n\r\n                    rl_pettype.setVisibility(View.VISIBLE);\r\n\r\n                    rv_upload_pet_images.setVisibility(View.VISIBLE);\r\n                    txt_lbl_uploadpet.setVisibility(View.VISIBLE);\r\n                    rl_pet_pics.setVisibility(View.VISIBLE);\r\n\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> arg0) {\r\n                // TODO Auto-generated method stub\r\n\r\n            }\r\n        });\r\n        sprpettype.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int arg2, long arg3) {\r\n                ((TextView) parent.getChildAt(0)).setTextColor(getResources().getColor(R.color.green));\r\n                strPetType = sprpettype.getSelectedItem().toString();\r\n                petTypeId = hashMap_PetTypeid.get(strPetType);\r\n                breedTypeResponseByPetIdCall(petTypeId);\r\n                Log.w(TAG, \"petTypeId : \" + petTypeId + \" strPetType :\" + strPetType);\r\n\r\n                if(strPetType != null && !strPetType.equalsIgnoreCase(\"Pet Type\")){\r\n                    rl_petbreed.setVisibility(View.VISIBLE);\r\n                }else{\r\n                    rl_petbreed.setVisibility(View.GONE);\r\n                }\r\n\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> arg0) {\r\n                // TODO Auto-generated method stub\r\n\r\n            }\r\n        });\r\n        sprpetbreed.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int arg2, long arg3) {\r\n                ((TextView) parent.getChildAt(0)).setTextColor(getResources().getColor(R.color.green));\r\n                strPetBreedType = sprpetbreed.getSelectedItem().toString();\r\n                Log.w(TAG, \"strPetBreedType :\" + strPetBreedType);\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> arg0) {\r\n                // TODO Auto-generated method stub\r\n\r\n            }\r\n        });\r\n\r\n        btn_continue.setOnClickListener(v -> {\r\n            Log.w(TAG,\"btn_continue selectedCommunicationtype : \"+selectedCommunicationtype+\" selectedVisitType : \"+selectedVisitType);\r\n\r\n\r\n\r\n            if (isVisit && selectedVisitType != null && selectedVisitType.isEmpty()) {\r\n                showErrorLoading(\"Please select visit type\");\r\n            }\r\n            else{\r\n                 if(amount != 0){\r\n              //  startPayment();\r\n                     petAppointmentCreateRequest();\r\n\r\n            }\r\n            else {\r\n                if (new ConnectionDetector(getApplicationContext()).isNetworkAvailable(getApplicationContext())) {\r\n                    //petAppointmentCreateResponseCall();\r\n                    petAppointmentCreateRequest();\r\n                }\r\n\r\n            }\r\n            }\r\n\r\n\r\n\r\n        });\r\n\r\n        rl_pet_pics.setOnClickListener(v -> choosePetImage());\r\n\r\n        rg_appointmenttype.setOnCheckedChangeListener((group, checkedId) -> {\r\n            int radioButtonID = rg_appointmenttype.getCheckedRadioButtonId();\r\n            RadioButton radioButton = rg_appointmenttype.findViewById(radioButtonID);\r\n            selectedAppointmentType = (String) radioButton.getText();\r\n            Log.w(TAG, \"selectedAppointmentType : \" + selectedAppointmentType);\r\n            communicationtype = selectedAppointmentType;\r\n\r\n\r\n        });\r\n\r\n        rg_communicationtype.setOnCheckedChangeListener((group, checkedId) -> {\r\n            int radioButtonID = rg_communicationtype.getCheckedRadioButtonId();\r\n            RadioButton radioButton = rg_communicationtype.findViewById(radioButtonID);\r\n            selectedCommunicationtype = (String) radioButton.getText();\r\n            Log.w(TAG,\"selectedCommunicationtype \" + selectedCommunicationtype);\r\n            if(selectedCommunicationtype != null && selectedCommunicationtype.equalsIgnoreCase(\"Visit\")) {\r\n                ll_visit_group.setVisibility(View.VISIBLE);\r\n                isVisit = true;\r\n            }else{\r\n                ll_visit_group.setVisibility(View.GONE);\r\n                isVisit = false;\r\n            }\r\n\r\n\r\n            });\r\n        rg_visit_group.setOnCheckedChangeListener((group, checkedId) -> {\r\n            int radioButtonID = rg_visit_group.getCheckedRadioButtonId();\r\n            RadioButton radioButton = rg_visit_group.findViewById(radioButtonID);\r\n            selectedVisitType = (String) radioButton.getText();\r\n            Log.w(TAG,\"selectedVisitType : \" + selectedVisitType);\r\n            if(selectedVisitType != null && selectedVisitType.equalsIgnoreCase(\"Home\")){\r\n                selectedVisitType = \"Home Visit\";\r\n                showManageAddressAlert();\r\n                btn_use_this_addreess.setOnClickListener(new View.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(View view) {\r\n                        dialog.dismiss();\r\n                        Log.w(TAG,\" locationid : \"+locationid+\" selectedVisitType : \"+selectedVisitType);\r\n                    }\r\n                });\r\n\r\n            }else{\r\n                selectedVisitType = \"Clinic Visit\";\r\n            }\r\n\r\n\r\n        });\r\n\r\n\r\n\r\n    }\r\n\r\n    private void viewpageData(List<PetDetailsResponse.DataBean.PetImgBean> petImgBeanList) {\r\n        tabLayout.setupWithViewPager(viewPager, true);\r\n\r\n        ViewPagerPetlistAdapter viewPagerPetlistAdapter = new ViewPagerPetlistAdapter(getApplicationContext(), petImgBeanList);\r\n        viewPager.setAdapter(viewPagerPetlistAdapter);\r\n        /*After setting the adapter use the timer */\r\n        final Handler handler = new Handler();\r\n        final Runnable Update =  new Runnable() {\r\n            public void run() {\r\n                if (currentPage == petImgBeanList.size()) {\r\n                    currentPage = 0;\r\n                }\r\n                viewPager.setCurrentItem(currentPage++, false);\r\n            }\r\n        };\r\n\r\n        timer = new Timer(); // This will create a new Thread\r\n        timer.schedule(new TimerTask() { // task to be scheduled\r\n            @Override\r\n            public void run() {\r\n                handler.post(Update);\r\n            }\r\n        }, DELAY_MS, PERIOD_MS);\r\n\r\n    }\r\n\r\n    @SuppressLint(\"LogNotTimber\")\r\n    public void petTypeListResponseCall() {\r\n        avi_indicator.setVisibility(View.VISIBLE);\r\n        avi_indicator.smoothToShow();\r\n        //Creating an object of our api interface\r\n        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);\r\n        Call<PetTypeListResponse> call = apiInterface.petTypeListResponseCall(RestUtils.getContentType());\r\n        Log.w(TAG, \"url  :%s\" + call.request().url().toString());\r\n\r\n        call.enqueue(new Callback<PetTypeListResponse>() {\r\n            @SuppressLint(\"LogNotTimber\")\r\n            @Override\r\n            public void onResponse(@NonNull Call<PetTypeListResponse> call, @NonNull Response<PetTypeListResponse> response) {\r\n                avi_indicator.smoothToHide();\r\n\r\n\r\n                if (response.body() != null) {\r\n                    if (200 == response.body().getCode()) {\r\n                        Log.w(TAG, \"PetTypeListResponse\" + new Gson().toJson(response.body()));\r\n\r\n                        if(response.body().getData().getUsertypedata() != null) {\r\n                            usertypedataBeanList = response.body().getData().getUsertypedata();\r\n                        }\r\n                        if (usertypedataBeanList != null && usertypedataBeanList.size() > 0) {\r\n                            setPetType(usertypedataBeanList);\r\n                        }\r\n                    }\r\n\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call<PetTypeListResponse> call, @NonNull Throwable t) {\r\n                avi_indicator.smoothToHide();\r\n                Log.w(TAG, \"PetTypeListResponse flr\" + t.getMessage());\r\n            }\r\n        });\r\n\r\n    }\r\n    private void setPetType(List<PetTypeListResponse.DataBean.UsertypedataBean> usertypedataBeanList) {\r\n        ArrayList<String> pettypeArrayList = new ArrayList<>();\r\n        pettypeArrayList.add(\"Pet Type\");\r\n        for (int i = 0; i < usertypedataBeanList.size(); i++) {\r\n\r\n            String petType = usertypedataBeanList.get(i).getPet_type_title();\r\n            hashMap_PetTypeid.put(usertypedataBeanList.get(i).getPet_type_title(), usertypedataBeanList.get(i).get_id());\r\n\r\n            Log.w(TAG, \"petType-->\" + petType);\r\n            pettypeArrayList.add(petType);\r\n\r\n            ArrayAdapter<String> spinnerArrayAdapter = new ArrayAdapter<>(BookAppointmentActivity.this, R.layout.spinner_item, pettypeArrayList);\r\n            spinnerArrayAdapter.setDropDownViewResource(R.layout.spinner_item); // The drop down view\r\n            sprpettype.setAdapter(spinnerArrayAdapter);\r\n\r\n\r\n\r\n        }\r\n    }\r\n    @SuppressLint(\"LogNotTimber\")\r\n    private void breedTypeResponseByPetIdCall(String petTypeId) {\r\n        avi_indicator.setVisibility(View.VISIBLE);\r\n        avi_indicator.smoothToShow();\r\n        RestApiInterface ApiService = APIClient.getClient().create(RestApiInterface.class);\r\n        Call<BreedTypeResponse> call = ApiService.breedTypeResponseByPetIdCall(RestUtils.getContentType(), breedTypeRequest(petTypeId));\r\n        Log.w(TAG, \"url  :%s\" + call.request().url().toString());\r\n\r\n        call.enqueue(new Callback<BreedTypeResponse>() {\r\n            @SuppressLint(\"LogNotTimber\")\r\n            @Override\r\n            public void onResponse(@NonNull Call<BreedTypeResponse> call, @NonNull Response<BreedTypeResponse> response) {\r\n                avi_indicator.smoothToHide();\r\n                Log.w(TAG, \"BreedTypeResponse\" + \"--->\" + new Gson().toJson(response.body()));\r\n\r\n\r\n                if (response.body() != null) {\r\n                    if (200 == response.body().getCode()) {\r\n                        if(response.body().getData() != null) {\r\n                            breedTypedataBeanList = response.body().getData();\r\n                            if (breedTypedataBeanList != null && breedTypedataBeanList.size() > 0) {\r\n                                setBreedType(breedTypedataBeanList);\r\n                            }\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call<BreedTypeResponse> call, @NonNull Throwable t) {\r\n                avi_indicator.smoothToHide();\r\n\r\n                Log.w(TAG, \"BreedTypeResponse flr\" + \"--->\" + t.getMessage());\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private void setBreedType(List<BreedTypeResponse.DataBean> breedTypedataBeanList) {\r\n        ArrayList<String> pettypeArrayList = new ArrayList<>();\r\n        pettypeArrayList.add(\"Pet Breed\");\r\n        for (int i = 0; i < breedTypedataBeanList.size(); i++) {\r\n\r\n            String petType = breedTypedataBeanList.get(i).getPet_breed();\r\n\r\n            Log.w(TAG, \"petType-->\" + petType);\r\n            pettypeArrayList.add(petType);\r\n\r\n            ArrayAdapter<String> spinnerArrayAdapter = new ArrayAdapter<>(BookAppointmentActivity.this, R.layout.spinner_item, pettypeArrayList);\r\n            spinnerArrayAdapter.setDropDownViewResource(R.layout.spinner_item); // The drop down view\r\n            sprpetbreed.setAdapter(spinnerArrayAdapter);\r\n\r\n\r\n        }\r\n    }\r\n\r\n    private BreedTypeRequest breedTypeRequest(String petTypeId) {\r\n        BreedTypeRequest breedTypeRequest = new BreedTypeRequest();\r\n        breedTypeRequest.setPet_type_id(petTypeId);\r\n        Log.w(TAG, \"breedTypeRequest\" + \"--->\" + new Gson().toJson(breedTypeRequest));\r\n        return breedTypeRequest;\r\n    }\r\n\r\n\r\n    @SuppressLint(\"LogNotTimber\")\r\n    private void petDetailsResponseByUserIdCall() {\r\n        avi_indicator.setVisibility(View.VISIBLE);\r\n        avi_indicator.smoothToShow();\r\n        RestApiInterface ApiService = APIClient.getClient().create(RestApiInterface.class);\r\n        Call<PetDetailsResponse> call = ApiService.petDetailsResponseByUserIdCall(RestUtils.getContentType(), petDetailsRequest());\r\n        Log.w(TAG, \"url  :%s\" + call.request().url().toString());\r\n\r\n        call.enqueue(new Callback<PetDetailsResponse>() {\r\n            @SuppressLint(\"LogNotTimber\")\r\n            @Override\r\n            public void onResponse(@NonNull Call<PetDetailsResponse> call, @NonNull Response<PetDetailsResponse> response) {\r\n                avi_indicator.smoothToHide();\r\n                Log.w(TAG, \"PetDetailsResponse\" + \"--->\" + new Gson().toJson(response.body()));\r\n\r\n\r\n                if (response.body() != null) {\r\n                    if (200 == response.body().getCode()) {\r\n                        if (new ConnectionDetector(getApplicationContext()).isNetworkAvailable(getApplicationContext())) {\r\n\r\n                            petTypeListResponseCall();\r\n                        }\r\n                        if(response.body().getData() != null) {\r\n\r\n                            petDetailsResponseByUserIdList = response.body().getData();\r\n                        }\r\n                        if (petDetailsResponseByUserIdList != null && petDetailsResponseByUserIdList.size() > 0) {\r\n                            setSelectYourPetType(petDetailsResponseByUserIdList);\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call<PetDetailsResponse> call, @NonNull Throwable t) {\r\n                avi_indicator.smoothToHide();\r\n\r\n                Log.w(TAG, \"PetDetailsResponse flr\" + \"--->\" + t.getMessage());\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private PetDetailsRequest petDetailsRequest() {\r\n        PetDetailsRequest petDetailsRequest = new PetDetailsRequest();\r\n        petDetailsRequest.setUser_id(userid);\r\n        Log.w(TAG, \"petDetailsRequest\" + \"--->\" + new Gson().toJson(petDetailsRequest));\r\n        return petDetailsRequest;\r\n    }\r\n\r\n    private void setSelectYourPetType(List<PetDetailsResponse.DataBean> petDetailsResponseByUserIdList) {\r\n        ArrayList<String> pettypeArrayList = new ArrayList<>();\r\n        pettypeArrayList.add(\"Select Your Pet\");\r\n        for (int i = 0; i < petDetailsResponseByUserIdList.size(); i++) {\r\n            hashMap_selectyourpet.put(petDetailsResponseByUserIdList.get(i).getPet_name(), petDetailsResponseByUserIdList.get(i).get_id());\r\n            String petName = petDetailsResponseByUserIdList.get(i).getPet_name();\r\n            Log.w(TAG, \"petName-->\" + petName);\r\n            pettypeArrayList.add(petName);\r\n\r\n            ArrayAdapter<String> spinnerArrayAdapter = new ArrayAdapter<>(BookAppointmentActivity.this, R.layout.spinner_item, pettypeArrayList);\r\n            spinnerArrayAdapter.setDropDownViewResource(R.layout.spinner_item); // The drop down view\r\n            spr_selectyourpettype.setAdapter(spinnerArrayAdapter);\r\n\r\n\r\n        }\r\n    }\r\n\r\n    public boolean validdSelectYourPetType() {\r\n        if (strSelectyourPetType.equalsIgnoreCase(\"Select Your Pet\")) {\r\n            final AlertDialog alertDialog = new AlertDialog.Builder(BookAppointmentActivity.this).create();\r\n            alertDialog.setMessage(getString(R.string.err_msg_type_of_pettype));\r\n            alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, \"Ok\",\r\n                    (dialog, which) -> alertDialog.cancel());\r\n            alertDialog.show();\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public boolean validdSelectPetType() {\r\n        if (strPetType != null && strPetType.equalsIgnoreCase(\"Pet Type\")) {\r\n            final AlertDialog alertDialog = new AlertDialog.Builder(BookAppointmentActivity.this).create();\r\n            alertDialog.setMessage(getString(R.string.err_msg_type_of_pettype));\r\n            alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, \"Ok\",\r\n                    (dialog, which) -> alertDialog.cancel());\r\n            alertDialog.show();\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public boolean validdSelectPetBreedType() {\r\n        if (strPetBreedType != null && strPetBreedType.equalsIgnoreCase(\"Pet Breed\")) {\r\n            final AlertDialog alertDialog = new AlertDialog.Builder(BookAppointmentActivity.this).create();\r\n            alertDialog.setMessage(getString(R.string.err_msg_type_of_petbreedtype));\r\n            alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, \"Ok\",\r\n                    (dialog, which) -> alertDialog.cancel());\r\n            alertDialog.show();\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    private void choosePetImage() {\r\n\r\n        if (clinicPicBeans!=null&&clinicPicBeans.size() >= 1) {\r\n\r\n            Toasty.warning(getApplicationContext(), \"Sorry you can't Add more than 1\", Toast.LENGTH_SHORT).show();\r\n\r\n        } else {\r\n         /*   final CharSequence[] items = {\"Take Photo\", \"Choose from Library\", \"Cancel\"};\r\n            //AlertDialog.Builder alert=new AlertDialog.Builder(this);\r\n            AlertDialog.Builder builder = new AlertDialog.Builder(BookAppointmentActivity.this);\r\n            builder.setTitle(\"Choose option\");\r\n            builder.setItems(items, (dialog, item) -> {\r\n                if (items[item].equals(\"Take Photo\")) {\r\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(BookAppointmentActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {\r\n                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\n                    } else {\r\n\r\n\r\n                        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\n\r\n                        startActivityForResult(intent, SELECT_CLINIC_CAMERA);\r\n                    }\r\n\r\n                } else if (items[item].equals(\"Choose from Library\")) {\r\n\r\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(BookAppointmentActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\r\n                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r\n                    } else {\r\n\r\n                        Intent intent = new Intent();\r\n                        intent.setType(\"image/*\");\r\n                        intent.setAction(Intent.ACTION_GET_CONTENT);\r\n                        startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_CLINIC_PICTURE);\r\n\r\n\r\n                    }\r\n                } else if (items[item].equals(\"Cancel\")) {\r\n                    dialog.dismiss();\r\n                }\r\n            });\r\n            builder.show();*/\r\n\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(BookAppointmentActivity.this, CAMERA) != PackageManager.PERMISSION_GRANTED)\r\n            {\r\n                requestPermissions(new String[]{CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\n            }\r\n\r\n            else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(BookAppointmentActivity.this, READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r\n            {\r\n                requestPermissions(new String[]{READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r\n            }\r\n\r\n            else\r\n            {\r\n\r\n\r\n                CropImage.activity().start(BookAppointmentActivity.this);\r\n\r\n                /*CropImage.activity().start(AddYourPetImageOlduserActivity.this);*/\r\n            }\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n    @SuppressLint(\"LogNotTimber\")\r\n    @Override\r\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n       //\tToast.makeText(getActivity(),\"kk\",Toast.LENGTH_SHORT).show();\r\n\r\n         try {\r\n             if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {\r\n                 CropImage.ActivityResult result = CropImage.getActivityResult(data);\r\n                 if (resultCode == RESULT_OK) {\r\n                     Uri resultUri = result.getUri();\r\n\r\n                     if (resultUri != null) {\r\n\r\n                         Log.w(\"selectedImageUri\", \" \" + resultUri);\r\n\r\n                         String filename = getFileName(resultUri);\r\n\r\n                         Log.w(\"filename\", \" \" + filename);\r\n\r\n                         String filePath = FileUtil.getPath(BookAppointmentActivity.this, resultUri);\r\n\r\n                         assert filePath != null;\r\n\r\n                         File file = new File(filePath); // initialize file here\r\n\r\n                         long length = file.length() / 1024; // Size in KB\r\n\r\n                         Log.w(\"filesize\", \" \" + length);\r\n\r\n                         if (length > 2000) {\r\n\r\n                             new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                                     .setTitleText(\"File Size\")\r\n                                     .setContentText(\"Please choose file size less than 2 MB \")\r\n                                     .setConfirmText(\"Ok\")\r\n                                     .show();\r\n                         } else {\r\n\r\n\r\n                             SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r\n                             String currentDateandTime = sdf.format(new Date());\r\n\r\n                             filePart = MultipartBody.Part.createFormData(\"sampleFile\", userid + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\n\r\n                             uploadPetImage();\r\n\r\n                         }\r\n\r\n\r\n                     } else {\r\n\r\n                         Toasty.warning(BookAppointmentActivity.this, \"Image Error!!Please upload Some other image\", Toasty.LENGTH_LONG).show();\r\n                     }\r\n\r\n\r\n                 }\r\n             }\r\n\r\n             if (requestCode == SELECT_CLINIC_PICTURE || requestCode == SELECT_CLINIC_CAMERA) {\r\n\r\n                 if (requestCode == SELECT_CLINIC_CAMERA) {\r\n                     Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get(\"data\");\r\n\r\n                     File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\n\r\n                     OutputStream os;\r\n                     try {\r\n                         os = new FileOutputStream(file);\r\n                         if (photo != null) {\r\n                             photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r\n                         }\r\n                         os.flush();\r\n                         os.close();\r\n                     } catch (Exception e) {\r\n                         Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r\n                     }\r\n\r\n                     RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\n\r\n                     filePart = MultipartBody.Part.createFormData(\"sampleFile\", userid+file.getName().trim(), requestFile);\r\n\r\n                     uploadPetImage();\r\n\r\n                 } else {\r\n\r\n                     try {\r\n                         if (resultCode == Activity.RESULT_OK) {\r\n\r\n                             Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\n\r\n                             Uri selectedImageUri = data.getData();\r\n\r\n                             Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\n\r\n                             String filename = null;\r\n                             if (selectedImageUri != null) {\r\n                                 filename = getFileName(selectedImageUri);\r\n                             }\r\n\r\n                             Log.w(\"filename\", \" \" + filename);\r\n\r\n                             String filePath = FileUtil.getPath(BookAppointmentActivity.this, selectedImageUri);\r\n\r\n                             assert filePath != null;\r\n\r\n                             File file = new File(filePath); // initialize file here\r\n                             if(file != null) {\r\n                                 long length = file.length() / 1024; // Size in KB\r\n                                 Log.w(\"filesize\", \" \" + length);\r\n                             }\r\n\r\n\r\n                             filePart = MultipartBody.Part.createFormData(\"sampleFile\", userid+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\n                             uploadPetImage();\r\n\r\n\r\n                         }\r\n                     } catch (Exception e) {\r\n\r\n                         Log.w(\"Exception\", \" \" + e);\r\n                     }\r\n\r\n                 }\r\n\r\n             }\r\n\r\n         }\r\n\r\n\r\n         catch (Exception e){\r\n             Log.w(TAG,\"onActivityResult exception\"+e.toString());\r\n         }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    private void uploadPetImage() {\r\n\r\n        avi_indicator.show();\r\n\r\n        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\n\r\n\r\n        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(filePart);\r\n\r\n\r\n        Log.w(TAG, \"url  :%s\" + call.request().url().toString());\r\n\r\n        call.enqueue(new Callback<FileUploadResponse>() {\r\n            @SuppressLint(\"LogNotTimber\")\r\n            @Override\r\n            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r\n                avi_indicator.smoothToHide();\r\n\r\n                if (response.body() != null) {\r\n                    if (200 == response.body().getCode()) {\r\n                        Log.w(TAG, \"Profpic\" + \"--->\" + new Gson().toJson(response.body()));\r\n\r\n                        DocBusInfoUploadRequest.ClinicPicBean clinicPicBean = new DocBusInfoUploadRequest.ClinicPicBean(response.body().getData().trim());\r\n                        clinicPicBeans.add(clinicPicBean);\r\n                        uploadimagepath = response.body().getData();\r\n                        if (uploadimagepath != null) {\r\n                            img_pet_imge.setVisibility(View.GONE);\r\n                            setView();\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n            @SuppressLint(\"LogNotTimber\")\r\n            @Override\r\n            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r\n                // avi_indicator.smoothToHide();\r\n                Log.w(TAG, \"ServerUrlImagePath\" + \"On failure working\" + t.getMessage());\r\n                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    private void setView() {\r\n        rv_upload_pet_images.setVisibility(View.VISIBLE);\r\n        rv_upload_pet_images.setLayoutManager(new LinearLayoutManager(this));\r\n        rv_upload_pet_images.setItemAnimator(new DefaultItemAnimator());\r\n        AddImageListAdapter addImageListAdapter = new AddImageListAdapter(getApplicationContext(), clinicPicBeans);\r\n        rv_upload_pet_images.setAdapter(addImageListAdapter);\r\n    }\r\n\r\n    public String getFileName(Uri uri) {\r\n        String result = null;\r\n        if (uri.getScheme().equals(\"content\")) {\r\n            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {\r\n                if (cursor != null && cursor.moveToFirst()) {\r\n                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));\r\n                }\r\n            }\r\n        }\r\n        if (result == null) {\r\n            result = uri.getPath();\r\n            int cut = result.lastIndexOf('/');\r\n            if (cut != -1) {\r\n                result = result.substring(cut + 1);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    @SuppressLint(\"LogNotTimber\")\r\n    private void addYourPetResponseCall() {\r\n        avi_indicator.setVisibility(View.VISIBLE);\r\n        avi_indicator.smoothToShow();\r\n        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);\r\n        Call<AddYourPetResponse> call = apiInterface.addYourPetResponseCall(RestUtils.getContentType(), addYourPetRequest());\r\n        Log.w(TAG, \"AddYourPetResponse url  :%s\" + \" \" + call.request().url().toString());\r\n\r\n        call.enqueue(new Callback<AddYourPetResponse>() {\r\n            @SuppressLint(\"LogNotTimber\")\r\n            @Override\r\n            public void onResponse(@NonNull Call<AddYourPetResponse> call, @NonNull Response<AddYourPetResponse> response) {\r\n                avi_indicator.smoothToHide();\r\n                Log.w(TAG, \"AddYourPetResponse\" + new Gson().toJson(response.body()));\r\n                if (response.body() != null) {\r\n                    if (200 == response.body().getCode()) {\r\n                        Toasty.success(getApplicationContext(), response.body().getMessage(), Toast.LENGTH_SHORT, true).show();\r\n                        petId = response.body().getData().get_id();\r\n\r\n                        if(amount != 0){\r\n                            startPayment();\r\n                        }else {\r\n                            if (new ConnectionDetector(getApplicationContext()).isNetworkAvailable(getApplicationContext())) {\r\n                                //petAppointmentCreateResponseCall();\r\n                                petAppointmentCreateRequest();\r\n                            }\r\n\r\n                        }\r\n                    } else {\r\n                        showErrorLoading(response.body().getMessage());\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call<AddYourPetResponse> call, @NonNull Throwable t) {\r\n                avi_indicator.smoothToHide();\r\n                Log.e(\"AddYourPetResponse flr\", \"--->\" + t.getMessage());\r\n                Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private AddYourPetRequest addYourPetRequest() {\r\n        /*\r\n         * user_id : 5fb36ca169f71e30a0ffd3f7\r\n         * pet_img : http://mysalveo.com/api/uploads/images.jpeg\r\n         * pet_name : POP\r\n         * pet_type : Dog\r\n         * pet_breed : breed 1\r\n         * pet_gender : Male\r\n         * pet_color : white\r\n         * pet_weight : 120\r\n         * pet_age : 20\r\n         * vaccinated : true\r\n         * last_vaccination_date : 23-10-1996\r\n         * default_status : true\r\n         * date_and_time : 23-10-1996 12:09 AM\r\n         */\r\n        SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r\n        String currentDateandTime = sdf.format(new Date());\r\n\r\n\r\n\r\n        AddYourPetRequest addYourPetRequest = new AddYourPetRequest();\r\n        addYourPetRequest.setUser_id(userid);\r\n        /*if(uploadimagepath != null && !uploadimagepath.isEmpty()){\r\n            addYourPetRequest.setPet_img(uploadimagepath);\r\n        }else{\r\n            addYourPetRequest.setPet_img(APIClient.PROFILE_IMAGE_URL);\r\n\r\n        }*/\r\n        addYourPetRequest.setPet_name(edt_petname.getText().toString());\r\n        addYourPetRequest.setPet_type(strPetType);\r\n        addYourPetRequest.setPet_breed(strPetBreedType);\r\n        addYourPetRequest.setPet_gender(\"\");\r\n        addYourPetRequest.setPet_color(\"\");\r\n        addYourPetRequest.setPet_weight(0);\r\n        addYourPetRequest.setPet_age(\"\");\r\n        addYourPetRequest.setVaccinated(false);\r\n        addYourPetRequest.setLast_vaccination_date(\"\");\r\n        addYourPetRequest.setDefault_status(true);\r\n        addYourPetRequest.setDate_and_time(currentDateandTime);\r\n        addYourPetRequest.setMobile_type(\"Android\");\r\n        Log.w(TAG, \"addYourPetRequest\" + new Gson().toJson(addYourPetRequest));\r\n        return addYourPetRequest;\r\n    }\r\n\r\n    public void showErrorLoading(String errormesage) {\r\n        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);\r\n        alertDialogBuilder.setMessage(errormesage);\r\n        alertDialogBuilder.setPositiveButton(\"ok\",\r\n                (arg0, arg1) -> hideLoading());\r\n\r\n\r\n        AlertDialog alertDialog = alertDialogBuilder.create();\r\n        alertDialog.show();\r\n    }\r\n\r\n    public void hideLoading() {\r\n        try {\r\n            alertDialog.dismiss();\r\n        } catch (Exception ignored) {\r\n\r\n        }\r\n    }\r\n\r\n\r\n    public boolean bookAppointmentValidator() {\r\n        boolean can_proceed = true;\r\n\r\n\r\n        if (edt_petname.getText().toString().trim().equals(\"\")) {\r\n            edt_petname.setError(\"Please enter pet name\");\r\n            edt_petname.requestFocus();\r\n            can_proceed = false;\r\n        }\r\n\r\n\r\n        return can_proceed;\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        super.onBackPressed();\r\n\r\n        //Intent intent = new Intent(getApplicationContext(),PetAppointment_Doctor_Date_Time_Activity.class);\r\n        Intent intent = new Intent(getApplicationContext(),ConsultationIssuesActivity.class);\r\n        intent.putExtra(\"doctorid\",doctorid);\r\n        intent.putExtra(\"communicationtype\",communicationtype);\r\n        intent.putExtra(\"fromactivity\",fromactivity);\r\n        intent.putExtra(\"fromto\",fromto);\r\n        intent.putExtra(\"doctorname\", doctorname);\r\n        intent.putExtra(\"clinicname\", clinicname);\r\n        intent.putExtra(\"petname\", petname);\r\n        intent.putExtra(\"petimage\", strpetimage);\r\n        startActivity(intent);\r\n\r\n\r\n    }\r\n\r\n\r\n    public void startPayment() {\r\n        /*\r\n          You need to pass current activity in order to let Razorpay create CheckoutActivity\r\n         */\r\n        final Activity activity = this;\r\n\r\n        final Checkout co = new Checkout();\r\n\r\n        //totalamount = amount;\r\n\r\n      /*  Double d = new Double(amount);\r\n        int amout = d.intValue();*/\r\n\r\n\r\n        Integer totalamout = amount*100;\r\n\r\n        try {\r\n            JSONObject options = new JSONObject();\r\n            options.put(\"name\", \"PetFolio\");\r\n            options.put(\"description\", userid);\r\n            //You can omit the image option to fetch the image from dashboard\r\n            options.put(\"image\", \"https://s3.amazonaws.com/rzp-mobile/images/rzp.png\");\r\n            options.put(\"currency\", \"INR\");\r\n            options.put(\"amount\", totalamout);\r\n\r\n\r\n            co.open(activity, options);\r\n        } catch (Exception e) {\r\n            Log.w(TAG,\"Error in payment: \" + e.getMessage());\r\n\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    @Override\r\n    public void onPaymentSuccess(String razorpayPaymentID) {\r\n        try {\r\n            Payment_id = razorpayPaymentID;\r\n\r\n            Log.w(TAG, \"Payment Successful: \" + razorpayPaymentID);\r\n            Toasty.success(getApplicationContext(), \"Payment Successful. View your booking details in upcoming appointments.\", Toast.LENGTH_SHORT, true).show();\r\n\r\n\r\n            if (new ConnectionDetector(getApplicationContext()).isNetworkAvailable(getApplicationContext())) {\r\n                petAppointmentCreateResponseCall();\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n        } catch (Exception e) {\r\n            Log.w(TAG, \"Exception in onPaymentSuccess\", e);\r\n        }\r\n    }\r\n    @SuppressLint(\"LogNotTimber\")\r\n    @Override\r\n    public void onPaymentError(int code, String response) {\r\n        try {\r\n            if (new ConnectionDetector(getApplicationContext()).isNetworkAvailable(getApplicationContext())) {\r\n                notificationSendResponseCall();\r\n            }\r\n            Log.w(TAG,  \"Payment failed: \" + code + \" \" + response);\r\n            Toasty.error(getApplicationContext(), \"Payment failed. Please try again with another payment method..\", Toast.LENGTH_SHORT, true).show();\r\n\r\n        } catch (Exception e) {\r\n            Log.w(TAG, \"Exception in onPaymentError\", e);\r\n        }\r\n    }\r\n\r\n\r\n    @SuppressLint(\"LogNotTimber\")\r\n    private void petAppointmentCreateResponseCall() {\r\n        avi_indicator.setVisibility(View.VISIBLE);\r\n        avi_indicator.smoothToShow();\r\n        RestApiInterface ApiService = APIClient.getClient().create(RestApiInterface.class);\r\n        Call<PetAppointmentCreateResponse> call = ApiService.petAppointmentCreateResponseCall(RestUtils.getContentType(),petAppointmentCreateRequest());\r\n\r\n        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\n\r\n        call.enqueue(new Callback<PetAppointmentCreateResponse>() {\r\n            @SuppressLint(\"LogNotTimber\")\r\n            @Override\r\n            public void onResponse(@NonNull Call<PetAppointmentCreateResponse> call, @NonNull Response<PetAppointmentCreateResponse> response) {\r\n                avi_indicator.smoothToHide();\r\n                Log.w(TAG,\"PetDoctorAvailableTimeResponse\"+ \"--->\" + new Gson().toJson(response.body()));\r\n\r\n\r\n                if (response.body() != null) {\r\n                    if(response.body().getCode() == 200){\r\n                        if(response.body().getMessage() != null){\r\n                            showPaymentSuccessalert(response.body().getMessage());\r\n                           // showSuceessLoading(response.body().getMessage());\r\n\r\n                        }\r\n\r\n\r\n\r\n                    }\r\n                    else{\r\n                        if(response.body().getMessage() != null){\r\n                            showErrorLoading(response.body().getMessage());\r\n\r\n                        }\r\n\r\n\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call<PetAppointmentCreateResponse> call, @NonNull Throwable t) {\r\n                avi_indicator.smoothToHide();\r\n\r\n                Log.w(TAG,\"PetDoctorAvailableTimeResponseflr\"+\"--->\" + t.getMessage());\r\n            }\r\n        });\r\n\r\n    }\r\n    @SuppressLint(\"LogNotTimber\")\r\n    private PetAppointmentCreateRequest petAppointmentCreateRequest() {\r\n\r\n        /*\r\n         * doctor_id : 5fb62a1924583828f10f8731\r\n         * booking_date : 19/11/2020\r\n         * booking_time : 12:22 pm\r\n         * booking_date_time : 19/11/2020 12:22 pm\r\n         * communication_type :\r\n         * video_id : http://vidoe.com\r\n         * user_id : 5fb6162a211fce241eaf53a9\r\n         * pet_id : 5fb38ea334f6014ea9013d30\r\n         * problem_info : problem info\r\n         * doc_attched : [{\"file\":\"http://google.pdf\"}]\r\n         * doc_feedback : doc feedback\r\n         * doc_rate : 5\r\n         * user_feedback : user feedback\r\n         * user_rate : 4.5\r\n         * display_date : 19/11/2020 01:00 PM\r\n         * server_date_time : 09/12/2020 03:00 PM\r\n         * payment_id : 1234567890\r\n         * payment_method : Card\r\n         * appointment_types : Normal\r\n         * allergies : this is\r\n         * amount : 400\r\n         * location_id,\r\n         * visit_type\r\n         */\r\n        List<PetAppointmentCreateRequest.DocAttchedBean> doc_attched = new ArrayList<>();\r\n\r\n\r\n        @SuppressLint(\"SimpleDateFormat\") DateFormat inputFormat = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n        @SuppressLint(\"SimpleDateFormat\") DateFormat outputFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n\r\n        Date date = null;\r\n        if(Doctor_ava_Date != null && !Doctor_ava_Date.isEmpty()){\r\n            try {\r\n            date = inputFormat.parse(Doctor_ava_Date);\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n        }\r\n        }\r\n\r\n        String outputDateStr = outputFormat.format(date);\r\n        String outputTimeStr = null;\r\n\r\n        @SuppressLint(\"SimpleDateFormat\") SimpleDateFormat h_mm_a   = new SimpleDateFormat(\"hh:mm aa\");\r\n        @SuppressLint(\"SimpleDateFormat\") SimpleDateFormat hh_mm_ss = new SimpleDateFormat(\"HH:mm:ss\");\r\n\r\n        if(selectedTimeSlot != null && !selectedTimeSlot.isEmpty()){\r\n           try {\r\n            Date d1 = h_mm_a.parse(selectedTimeSlot);\r\n            outputTimeStr =hh_mm_ss.format(d1);\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        }\r\n\r\n        Problem_info = edt_comment.getText().toString();\r\n        Allergies = edt_allergies.getText().toString();\r\n\r\n        String displaydateandtime = outputDateStr+\" \"+outputTimeStr;\r\n        PetAppointmentCreateRequest petAppointmentCreateRequest = new PetAppointmentCreateRequest();\r\n        petAppointmentCreateRequest.setDoctor_id(doctorid);\r\n        petAppointmentCreateRequest.setBooking_date(Doctor_ava_Date);\r\n        petAppointmentCreateRequest.setBooking_time(selectedTimeSlot);\r\n        petAppointmentCreateRequest.setBooking_date_time(Doctor_ava_Date+\" \"+selectedTimeSlot);\r\n        petAppointmentCreateRequest.setCommunication_type(selectedCommunicationtype);\r\n        petAppointmentCreateRequest.setVideo_id(\"\");\r\n        petAppointmentCreateRequest.setUser_id(userid);\r\n        petAppointmentCreateRequest.setPet_id(petId);\r\n        petAppointmentCreateRequest.setProblem_info(Problem_info);\r\n        petAppointmentCreateRequest.setDoc_attched(doc_attched);\r\n        petAppointmentCreateRequest.setDoc_feedback(\"\");\r\n        petAppointmentCreateRequest.setDoc_rate(0);\r\n        petAppointmentCreateRequest.setUser_feedback(\"\");\r\n        petAppointmentCreateRequest.setUser_rate(0);\r\n        petAppointmentCreateRequest.setDisplay_date(displaydateandtime);\r\n        petAppointmentCreateRequest.setServer_date_time(\"\");\r\n        petAppointmentCreateRequest.setPayment_id(Payment_id);\r\n        petAppointmentCreateRequest.setPayment_method(\"Online\");\r\n        petAppointmentCreateRequest.setAppointment_types(selectedAppointmentType);\r\n        petAppointmentCreateRequest.setAllergies(Allergies);\r\n        petAppointmentCreateRequest.setAmount(amount);\r\n        petAppointmentCreateRequest.setMobile_type(\"Android\");\r\n        petAppointmentCreateRequest.setService_name(\"\");\r\n        petAppointmentCreateRequest.setService_amount(\"\");\r\n        petAppointmentCreateRequest.setDate_and_time(currentDateandTime);\r\n        petAppointmentCreateRequest.setVisit_type(selectedVisitType);\r\n        petAppointmentCreateRequest.setLocation_id(locationid);\r\n        petAppointmentCreateRequest.setHealth_issue_title(health_issue_title);\r\n\r\n        ArrayList<PetAppointmentCreateRequest> PetAppointmentCreateRequestList = new ArrayList<>();\r\n        PetAppointmentCreateRequestList.add(petAppointmentCreateRequest);\r\n        Log.w(TAG,\"petAppointmentCreateRequest\"+ \"--->\" + new Gson().toJson(petAppointmentCreateRequest));\r\n        Intent intent = new Intent(getApplicationContext(),PetLoverDoctorChoosePaymentMethodActivity.class);\r\n        intent.putExtra(\"PetAppointmentCreateRequestList\",PetAppointmentCreateRequestList);\r\n        intent.putExtra(\"doctorname\", doctorname);\r\n        intent.putExtra(\"clinicname\", clinicname);\r\n        intent.putExtra(\"petname\", petname);\r\n        intent.putExtra(\"doctorid\", doctorid);\r\n        intent.putExtra(\"fromactivity\", fromactivity);\r\n        intent.putExtra(\"fromto\", fromto);\r\n        intent.putExtra(\"Doctor_ava_Date\", Doctor_ava_Date);\r\n        intent.putExtra(\"selectedTimeSlot\", selectedTimeSlot);\r\n        intent.putExtra(\"amount\", amount);\r\n        intent.putExtra(\"communicationtype\", communicationtype);\r\n        intent.putExtra(\"selectedVisitType\", selectedVisitType);\r\n        intent.putExtra(\"petId\", petId);\r\n        intent.putExtra(\"health_issue_title\", health_issue_title);\r\n        intent.putExtra(\"selectedCommunicationtype\", selectedCommunicationtype);\r\n        startActivity(intent);\r\n\r\n\r\n\r\n        return petAppointmentCreateRequest;\r\n\r\n    }\r\n    public void showSuceessLoading(String errormesage){\r\n        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);\r\n        alertDialogBuilder.setMessage(errormesage);\r\n        alertDialogBuilder.setPositiveButton(\"ok\",\r\n                (arg0, arg1) -> hideLoadingSuccess());\r\n        AlertDialog alertDialog = alertDialogBuilder.create();\r\n        alertDialog.show();\r\n        alertDialog.setOnCancelListener(new DialogInterface.OnCancelListener() {\r\n            @Override\r\n            public void onCancel(DialogInterface dialog) {\r\n                Intent intent = new Intent(getApplicationContext(), PetLoverDashboardActivity.class);\r\n                startActivity(intent);\r\n                finish();\r\n                alertDialog.dismiss();\r\n            }\r\n        });\r\n    }\r\n    public void hideLoadingSuccess() {\r\n        try {\r\n            Intent intent = new Intent(getApplicationContext(), PetLoverDashboardActivity.class);\r\n            startActivity(intent);\r\n            finish();\r\n            alertDialog.dismiss();\r\n\r\n        } catch (Exception ignored) {\r\n\r\n        }\r\n    }\r\n\r\n\r\n    private void showPaymentSuccessalert(String message) {\r\n        try {\r\n\r\n            dialog = new Dialog(BookAppointmentActivity.this);\r\n            dialog.setCancelable(false);\r\n            dialog.setContentView(R.layout.alert_appointment_payment_success_layout);\r\n            TextView txt_success_msg = dialog.findViewById(R.id.txt_success_msg);\r\n            txt_success_msg.setText(message);\r\n            Button btn_ok = dialog.findViewById(R.id.btn_ok);\r\n\r\n            btn_ok.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    dialog.dismiss();\r\n                    Intent intent = new Intent(getApplicationContext(), PetLoverDashboardActivity.class);\r\n                    startActivity(intent);\r\n                    finish();\r\n\r\n\r\n\r\n                }\r\n            });\r\n            Objects.requireNonNull(dialog.getWindow()).setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r\n            dialog.show();\r\n\r\n        } catch (WindowManager.BadTokenException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    private void notificationSendResponseCall() {\r\n        avi_indicator.setVisibility(View.VISIBLE);\r\n        avi_indicator.smoothToShow();\r\n        RestApiInterface ApiService = APIClient.getClient().create(RestApiInterface.class);\r\n        Call<NotificationSendResponse> call = ApiService.notificationSendResponseCall(RestUtils.getContentType(),notificationSendRequest());\r\n\r\n        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\n\r\n        call.enqueue(new Callback<NotificationSendResponse>() {\r\n            @SuppressLint(\"LogNotTimber\")\r\n            @Override\r\n            public void onResponse(@NonNull Call<NotificationSendResponse> call, @NonNull Response<NotificationSendResponse> response) {\r\n                avi_indicator.smoothToHide();\r\n                Log.w(TAG,\"notificationSendResponseCall\"+ \"--->\" + new Gson().toJson(response.body()));\r\n\r\n\r\n                if (response.body() != null) {\r\n                    if(response.body().getCode() == 200){\r\n\r\n\r\n\r\n\r\n                    }\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call<NotificationSendResponse> call, @NonNull Throwable t) {\r\n                avi_indicator.smoothToHide();\r\n\r\n                Log.w(TAG,\"NotificationSendResponse flr\"+\"--->\" + t.getMessage());\r\n            }\r\n        });\r\n\r\n    }\r\n    @SuppressLint(\"LogNotTimber\")\r\n    private NotificationSendRequest notificationSendRequest() {\r\n\r\n        /**\r\n         * status : Payment Failed\r\n         * date : 23-10-2020 11:00 AM\r\n         * appointment_UID :\r\n         * user_id : 601b8ac3204c595ee52582f2\r\n         * doctor_id :\r\n         */\r\n\r\n        @SuppressLint(\"SimpleDateFormat\") SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\");\r\n        String currentDateandTime = simpleDateFormat.format(new Date());\r\n        NotificationSendRequest notificationSendRequest = new NotificationSendRequest();\r\n        notificationSendRequest.setStatus(\"Payment Failed\");\r\n        notificationSendRequest.setDate(currentDateandTime);\r\n        notificationSendRequest.setAppointment_UID(\"\");\r\n        notificationSendRequest.setUser_id(userid);\r\n        notificationSendRequest.setDoctor_id(doctorid);\r\n        Log.w(TAG,\"notificationSendRequest\"+ \"--->\" + new Gson().toJson(notificationSendRequest));\r\n        return notificationSendRequest;\r\n    }\r\n\r\n\r\n    private void showManageAddressAlert() {\r\n        try {\r\n\r\n            dialog = new Dialog(BookAppointmentActivity.this);\r\n            dialog.setContentView(R.layout.alert_manage_addresses_layout);\r\n            dialog.setCancelable(false);\r\n            txt_no_records = dialog.findViewById(R.id.txt_no_records);\r\n            txt_savedaddress = dialog.findViewById(R.id.txt_savedaddress);\r\n            rv_manage_address = dialog.findViewById(R.id.rv_manage_address);\r\n            btn_use_this_addreess = dialog.findViewById(R.id.btn_use_this_addreess);\r\n            txt_no_records.setVisibility(View.GONE);\r\n            txt_savedaddress.setVisibility(View.GONE);\r\n            btn_use_this_addreess.setVisibility(View.GONE);\r\n            rv_manage_address.setVisibility(View.GONE);\r\n\r\n            if (new ConnectionDetector(BookAppointmentActivity.this).isNetworkAvailable(BookAppointmentActivity.this)) {\r\n                locationListAddressResponseCall();\r\n            }\r\n\r\n\r\n            Objects.requireNonNull(dialog.getWindow()).setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r\n            dialog.show();\r\n\r\n        } catch (WindowManager.BadTokenException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    @SuppressLint(\"LogNotTimber\")\r\n    private void locationListAddressResponseCall() {\r\n        avi_indicator.setVisibility(View.VISIBLE);\r\n        avi_indicator.smoothToShow();\r\n        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);\r\n        Call<LocationListAddressResponse> call = apiInterface.locationListAddressResponseCall(RestUtils.getContentType(), locationListAddressRequest());\r\n        Log.w(TAG,\"locationListAddressResponseCall url  :%s\"+\" \"+ call.request().url().toString());\r\n\r\n        call.enqueue(new Callback<LocationListAddressResponse>() {\r\n            @SuppressLint({\"SetTextI18n\", \"LogNotTimber\"})\r\n            @Override\r\n            public void onResponse(@NonNull Call<LocationListAddressResponse> call, @NonNull Response<LocationListAddressResponse> response) {\r\n\r\n                Log.w(TAG,\"locationListAddressResponseCall\"+ \"--->\" + new Gson().toJson(response.body()));\r\n\r\n                avi_indicator.smoothToHide();\r\n\r\n                if (response.body() != null) {\r\n                    if(response.body().getCode() == 200){\r\n                        if(response.body().getData() != null && response.body().getData().isEmpty()){\r\n                            txt_no_records.setVisibility(View.VISIBLE);\r\n                            txt_no_records.setText(\"No new address\");\r\n                            rv_manage_address.setVisibility(View.GONE);\r\n                            txt_savedaddress.setVisibility(View.GONE);\r\n                        }\r\n                        else{\r\n                            btn_use_this_addreess.setVisibility(View.VISIBLE);\r\n                            txt_no_records.setVisibility(View.GONE);\r\n                            rv_manage_address.setVisibility(View.VISIBLE);\r\n                            txt_savedaddress.setVisibility(View.VISIBLE);\r\n                            if(response.body().getData() != null) {\r\n                                addressList = response.body().getData();\r\n                            }\r\n                            txt_savedaddress.setText(addressList.size()+\" Saved Address\");\r\n                            setViewManageAddress();\r\n                        }\r\n\r\n\r\n\r\n                    }\r\n                    else{\r\n                        showErrorLoading(response.body().getMessage());\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call<LocationListAddressResponse> call, @NonNull Throwable t) {\r\n\r\n                avi_indicator.smoothToHide();\r\n                Log.w(TAG,\"locationListAddressResponseCall flr\"+\"--->\" + t.getMessage());\r\n            }\r\n        });\r\n\r\n    }\r\n    @SuppressLint(\"LogNotTimber\")\r\n    private LocationListAddressRequest locationListAddressRequest() {\r\n        LocationListAddressRequest locationListAddressRequest = new LocationListAddressRequest();\r\n        locationListAddressRequest.setUser_id(userid);\r\n        Log.w(TAG,\"locationListAddressRequest\"+ \"--->\" + new Gson().toJson(locationListAddressRequest));\r\n        return locationListAddressRequest;\r\n    }\r\n    private void setViewManageAddress() {\r\n        rv_manage_address.setLayoutManager(new LinearLayoutManager(getApplicationContext()));\r\n        rv_manage_address.setItemAnimator(new DefaultItemAnimator());\r\n        ManageAddressListVisitAdapter manageAddressListVisitAdapter = new ManageAddressListVisitAdapter(getApplicationContext(), addressList,this,TAG);\r\n        rv_manage_address.setAdapter(manageAddressListVisitAdapter);\r\n\r\n    }\r\n    @SuppressLint(\"LogNotTimber\")\r\n    @Override\r\n    public void locationDefaultListener(boolean status, String location_id, String userid) {\r\n        locationid = location_id;\r\n        Log.w(TAG,\"locationDefaultListener : \"+\"status : \"+status+\" locationid : \"+locationid+\" userid : \"+userid);\r\n    }\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.M)\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode,\r\n                                           @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        if (requestCode == REQUEST_READ_CLINIC_PIC_PERMISSION) {\r\n\r\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n//                Intent intent = new Intent();\r\n//                intent.setType(\"image/*\");\r\n//                intent.setAction(Intent.ACTION_GET_CONTENT);\r\n//                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_CLINIC_PICTURE);\r\n\r\n                choosePetImage();\r\n\r\n            } else {\r\n                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                        .setTitleText(\"Permission Required\")\r\n                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r\n                        .setConfirmText(\"Ok\")\r\n                        .setConfirmClickListener(sDialog -> {\r\n\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                                requestPermissions(new String[]{READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r\n                            }\r\n\r\n\r\n                        })\r\n                        .setCancelButton(\"Cancel\", sDialog -> {\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            showWarning(REQUEST_READ_CLINIC_PIC_PERMISSION);\r\n                        })\r\n                        .show();\r\n\r\n            }\r\n\r\n        } else if (requestCode == REQUEST_CLINIC_CAMERA_PERMISSION_CODE) {\r\n\r\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n\r\n              /*  Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\n\r\n                startActivityForResult(intent, SELECT_CLINIC_CAMERA);*/\r\n\r\n                choosePetImage();\r\n\r\n            } else {\r\n                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                        .setTitleText(\"Permission Required\")\r\n                        .setContentText(\"Please Allow Camera for taking picture\")\r\n                        .setConfirmText(\"Ok\")\r\n                        .setConfirmClickListener(sDialog -> {\r\n\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                                requestPermissions(new String[]{CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\n                            }\r\n\r\n\r\n                        })\r\n                        .setCancelButton(\"Cancel\", sDialog -> {\r\n                            sDialog.dismissWithAnimation();\r\n\r\n                            showWarning(REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r\n                        })\r\n                        .show();\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    private void showWarning(int REQUEST_PERMISSION_CODE) {\r\n\r\n        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r\n                .setTitleText(\"Sorry!!\")\r\n                .setContentText(\"You Can't proceed further unless you allow permission\")\r\n                .setConfirmText(\"Ok\")\r\n                .setConfirmClickListener(sDialog -> {\r\n\r\n                    sDialog.dismissWithAnimation();\r\n\r\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)\r\n                    {\r\n                        requestPermissions(new String[]{READ_EXTERNAL_STORAGE}, REQUEST_PERMISSION_CODE);\r\n                    }\r\n\r\n\r\n                })\r\n                .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r\n                .show();\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/petfolio/infinituss/petlover/BookAppointmentActivity.java b/app/src/main/java/com/petfolio/infinituss/petlover/BookAppointmentActivity.java
--- a/app/src/main/java/com/petfolio/infinituss/petlover/BookAppointmentActivity.java	(revision f1734ca40ba206b2d8b7b0e5c5470841991c7822)
+++ b/app/src/main/java/com/petfolio/infinituss/petlover/BookAppointmentActivity.java	(date 1632497726779)
@@ -2,6 +2,7 @@
 
 import static android.Manifest.permission.CAMERA;
 import static android.Manifest.permission.READ_EXTERNAL_STORAGE;
+import static android.os.Environment.DIRECTORY_DOCUMENTS;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.RequiresApi;
@@ -16,6 +17,7 @@
 import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.app.Dialog;
+import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.pm.PackageManager;
@@ -26,10 +28,12 @@
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
+import android.os.Environment;
 import android.os.Handler;
 import android.provider.MediaStore;
 import android.provider.OpenableColumns;
 import android.text.InputType;
+import android.text.TextUtils;
 import android.util.Log;
 import android.view.View;
 import android.view.WindowManager;
@@ -46,6 +50,7 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
+import com.google.android.gms.common.util.IOUtils;
 import com.google.android.material.tabs.TabLayout;
 import com.google.gson.Gson;
 import com.petfolio.infinituss.R;
@@ -77,13 +82,15 @@
 import com.petfolio.infinituss.utils.RestUtils;
 import com.razorpay.Checkout;
 import com.razorpay.PaymentResultListener;
-import com.theartofdev.edmodo.cropper.CropImage;
+import com.canhub.cropper.CropImage;
 import com.wang.avi.AVLoadingIndicatorView;
 
 import org.json.JSONObject;
 
 import java.io.File;
 import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
 import java.io.OutputStream;
 import java.text.DateFormat;
 import java.text.ParseException;
@@ -966,7 +973,7 @@
              if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {
                  CropImage.ActivityResult result = CropImage.getActivityResult(data);
                  if (resultCode == RESULT_OK) {
-                     Uri resultUri = result.getUri();
+                     Uri resultUri = result.getUriContent();
 
                      if (resultUri != null) {
 
@@ -976,7 +983,7 @@
 
                          Log.w("filename", " " + filename);
 
-                         String filePath = FileUtil.getPath(BookAppointmentActivity.this, resultUri);
+                         String filePath = getFilePathFromURI(BookAppointmentActivity.this, resultUri);
 
                          assert filePath != null;
 
@@ -1154,23 +1161,50 @@
         rv_upload_pet_images.setAdapter(addImageListAdapter);
     }
 
-    public String getFileName(Uri uri) {
-        String result = null;
-        if (uri.getScheme().equals("content")) {
-            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {
-                if (cursor != null && cursor.moveToFirst()) {
-                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));
-                }
-            }
-        }
-        if (result == null) {
-            result = uri.getPath();
-            int cut = result.lastIndexOf('/');
-            if (cut != -1) {
-                result = result.substring(cut + 1);
-            }
+    public static String getFilePathFromURI(Context context, Uri contentUri) {
+        //copy file and send new file path
+        String fileName = getFileName(contentUri);
+        if (!TextUtils.isEmpty(fileName)) {
+
+            String path = Environment.getExternalStoragePublicDirectory(DIRECTORY_DOCUMENTS).getPath() + "/" + "MyFirstApp/";
+            // Create the parent path
+            File dir = new File(path);
+            if (!dir.exists()) {
+                dir.mkdirs();
+            }
+
+            String fullName = path + "mylog";
+            File copyFile = new File (fullName);
+
+            /* File copyFile = new File(Environment.DIRECTORY_DOWNLOADS + File.separator + fileName);*/
+            copy(context, contentUri, copyFile);
+            return copyFile.getAbsolutePath();
+        }
+        return null;
+    }
+
+    public static String getFileName(Uri uri) {
+        if (uri == null) return null;
+        String fileName = null;
+        String path = uri.getPath();
+        int cut = path.lastIndexOf('/');
+        if (cut != -1) {
+            fileName = path.substring(cut + 1);
+        }
+        return fileName;
+    }
+
+    public static void copy(Context context, Uri srcUri, File dstFile) {
+        try {
+            InputStream inputStream = context.getContentResolver().openInputStream(srcUri);
+            if (inputStream == null) return;
+            OutputStream outputStream = new FileOutputStream(dstFile);
+            IOUtils.copyStream(inputStream, outputStream);
+            inputStream.close();
+            outputStream.close();
+        } catch (IOException e) {
+            e.printStackTrace();
         }
-        return result;
     }
 
 
Index: app/src/main/java/com/petfolio/infinituss/serviceprovider/ServiceProviderRegisterFormActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.petfolio.infinituss.serviceprovider;\r\rimport android.Manifest;\rimport android.annotation.SuppressLint;\rimport android.app.Activity;\r\rimport android.app.Dialog;\rimport android.content.Context;\rimport android.content.Intent;\rimport android.content.IntentSender;\rimport android.content.pm.PackageManager;\rimport android.database.Cursor;\rimport android.graphics.Bitmap;\r\rimport android.graphics.Color;\rimport android.graphics.drawable.ColorDrawable;\rimport android.location.Address;\rimport android.location.Geocoder;\rimport android.location.Location;\rimport android.location.LocationManager;\rimport android.net.Uri;\rimport android.os.Build;\rimport android.os.Bundle;\r\rimport android.os.Handler;\rimport android.provider.MediaStore;\rimport android.provider.OpenableColumns;\rimport android.util.Log;\rimport android.view.View;\r\rimport android.view.WindowManager;\rimport android.widget.AdapterView;\rimport android.widget.ArrayAdapter;\rimport android.widget.Button;\rimport android.widget.EditText;\rimport android.widget.ImageView;\rimport android.widget.RelativeLayout;\r\rimport android.widget.Spinner;\rimport android.widget.TextView;\rimport android.widget.Toast;\r\rimport androidx.annotation.NonNull;\r\rimport androidx.annotation.Nullable;\rimport androidx.appcompat.app.AlertDialog;\rimport androidx.appcompat.app.AppCompatActivity;\rimport androidx.cardview.widget.CardView;\rimport androidx.core.app.ActivityCompat;\rimport androidx.core.content.ContextCompat;\rimport androidx.recyclerview.widget.DefaultItemAnimator;\rimport androidx.recyclerview.widget.GridLayoutManager;\rimport androidx.recyclerview.widget.LinearLayoutManager;\rimport androidx.recyclerview.widget.RecyclerView;\r\rimport com.google.android.gms.common.ConnectionResult;\rimport com.google.android.gms.common.api.GoogleApiClient;\rimport com.google.android.gms.common.api.PendingResult;\rimport com.google.android.gms.common.api.Status;\rimport com.google.android.gms.location.LocationListener;\rimport com.google.android.gms.location.LocationRequest;\rimport com.google.android.gms.location.LocationServices;\rimport com.google.android.gms.location.LocationSettingsRequest;\rimport com.google.android.gms.location.LocationSettingsResult;\rimport com.google.android.gms.location.LocationSettingsStatusCodes;\rimport com.google.android.gms.maps.GoogleMap;\rimport com.google.android.gms.maps.OnMapReadyCallback;\rimport com.google.android.gms.maps.SupportMapFragment;\rimport com.google.gson.Gson;\rimport com.petfolio.infinituss.R;\rimport com.petfolio.infinituss.activity.LoginActivity;\r\rimport com.petfolio.infinituss.activity.location.SetLocationSPNewActivity;\rimport com.petfolio.infinituss.adapter.AddGovtIdPdfAdapter;\rimport com.petfolio.infinituss.adapter.AddMoreServiceAdapter;\rimport com.petfolio.infinituss.adapter.AddMoreSpecialzationAdapter;\rimport com.petfolio.infinituss.adapter.AddPhotoIDPdfAdapter;\rimport com.petfolio.infinituss.adapter.AddSPCertPdfAdapter;\rimport com.petfolio.infinituss.adapter.AddServiceImageListAdapter;\rimport com.petfolio.infinituss.adapter.SPServiceListAdapter;\rimport com.petfolio.infinituss.adapter.SPSpecialzationListAdapter;\rimport com.petfolio.infinituss.api.APIClient;\rimport com.petfolio.infinituss.api.RestApiInterface;\rimport com.petfolio.infinituss.appUtils.FileUtil;\rimport com.petfolio.infinituss.appUtils.NumericKeyBoardTransformationMethod;\rimport com.petfolio.infinituss.serviceprovider.ServiceProviderRegisterFormActivity;\rimport com.petfolio.infinituss.serviceprovider.ServiceProviderRegisterFormActivity;\rimport com.petfolio.infinituss.serviceprovider.ServiceProviderRegisterFormActivity;\rimport com.petfolio.infinituss.serviceprovider.ServiceProviderRegisterFormActivity;\rimport com.petfolio.infinituss.doctor.DoctorMyCalendarNewUserActivity;\rimport com.petfolio.infinituss.interfaces.AddMoreServiceRemoveListener;\rimport com.petfolio.infinituss.interfaces.AddMoreSpecialzationRemoveListener;\rimport com.petfolio.infinituss.interfaces.SPServiceCheckedListener;\rimport com.petfolio.infinituss.interfaces.SPSpecialzationChckedListener;\rimport com.petfolio.infinituss.requestpojo.DocBusInfoUploadRequest;\rimport com.petfolio.infinituss.requestpojo.ServiceProviderRegisterFormCreateRequest;\rimport com.petfolio.infinituss.responsepojo.AddSpecTypeListModel;\rimport com.petfolio.infinituss.responsepojo.FileUploadResponse;\rimport com.petfolio.infinituss.responsepojo.SPServiceListResponse;\rimport com.petfolio.infinituss.responsepojo.ServiceProviderRegisterFormCreateResponse;\rimport com.petfolio.infinituss.service.GPSTracker;\rimport com.petfolio.infinituss.sessionmanager.SessionManager;\rimport com.petfolio.infinituss.utils.ConnectionDetector;\rimport com.petfolio.infinituss.utils.RestUtils;\rimport com.theartofdev.edmodo.cropper.CropImage;\rimport com.wang.avi.AVLoadingIndicatorView;\r\rimport java.io.File;\rimport java.io.FileOutputStream;\rimport java.io.IOException;\rimport java.io.OutputStream;\rimport java.text.SimpleDateFormat;\rimport java.util.ArrayList;\r\rimport java.util.Date;\rimport java.util.HashMap;\rimport java.util.List;\rimport java.util.Locale;\rimport java.util.Objects;\r\rimport butterknife.BindView;\rimport butterknife.ButterKnife;\rimport cn.pedant.SweetAlert.SweetAlertDialog;\rimport es.dmoral.toasty.Toasty;\rimport okhttp3.MediaType;\rimport okhttp3.MultipartBody;\rimport okhttp3.RequestBody;\rimport retrofit2.Call;\rimport retrofit2.Callback;\rimport retrofit2.Response;\r\rpublic class ServiceProviderRegisterFormActivity extends AppCompatActivity implements View.OnClickListener, SPServiceCheckedListener, AddMoreServiceRemoveListener, SPSpecialzationChckedListener, AddMoreSpecialzationRemoveListener,\r        OnMapReadyCallback, GoogleApiClient.ConnectionCallbacks,\r        GoogleApiClient.OnConnectionFailedListener, LocationListener {\r\r    private final String TAG = \"ServiceProviderRegisterFormActivity\";\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edt_business_name)\r    EditText edt_business_name;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edt_aboutsp)\r    EditText edt_aboutsp;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rl_service_gallery_image)\r    RelativeLayout rl_service_gallery_image;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rl_certificates)\r    RelativeLayout rl_certificates;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rl_govtid)\r    RelativeLayout rl_govtid;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rl_photoid)\r    RelativeLayout rl_photoid;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.buttonsubmit)\r    Button buttonsubmit;\r\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_sp_servicelist)\r    RecyclerView rcylr_sp_servicelist;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_sp_servicestaticlist)\r    RecyclerView rcylr_sp_servicestaticlist;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edt_addmore_service)\r    EditText edt_addmore_service;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.btn_add_service)\r    Button btn_add_service;\r\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_sp_specializationlist)\r    RecyclerView rcylr_sp_specializationlist;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_sp_specializationstaticlist)\r    RecyclerView rcylr_sp_specializationstaticlist;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.edt_specialization_ifany)\r    EditText edt_specialization_ifany;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.btn_add_specialization)\r    Button btn_add_specialization;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.txt_no_records_specialization)\r    TextView txt_no_records_specialization;\r\r\r\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_choosen_service_img)\r    RecyclerView rcylr_choosen_service_img;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_choosen_certificate_img)\r    RecyclerView recylerView_choosen_certificate_images;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_choosen_govtid_images)\r    RecyclerView recylerView_choosen_govtid_images;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.rcylr_choosen_photoid_img)\r    RecyclerView recylerView_choosen_photo_id_images;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.cdvw_certificate)\r    CardView material_cardview_certificate;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.img_bck)\r    ImageView img_bck;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.avi_indicator)\r    AVLoadingIndicatorView avi_indicator;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.txt_no_records)\r    TextView txt_no_records;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.txt_address)\r    TextView txt_address;\r\r    @SuppressLint(\"NonConstantResourceId\")\r    @BindView(R.id.txt_location_change)\r    TextView txt_location_change;\r\r\r\r    String business_name;\r\r\r\r\r\r\r    ArrayList<FileUploadResponse> certificatePicResponse = new ArrayList<>();\r\r\r\r\r\r\r    private final List<DocBusInfoUploadRequest.GovtIdPicBean> govtIdPicBeans = new ArrayList<>();\r\r    private final List<DocBusInfoUploadRequest.PhotoIdPicBean> photoIdPicBeans = new ArrayList<>();\r\r    ArrayList<AddSpecTypeListModel> addSpecTypeListModels = new ArrayList<>();\r\r\r\r\r    SPServiceListAdapter spServiceListAdapter;\r    SPSpecialzationListAdapter spSpecialzationListAdapter;\r    AddMoreServiceAdapter addMoreServiceAdapter;\r    AddMoreSpecialzationAdapter addMoreSpecialzationAdapter;\r\r    AddServiceImageListAdapter addServiceImageListAdapter;\r\r    AddSPCertPdfAdapter addSPCertPdfAdapter;\r\r\r    AddGovtIdPdfAdapter addGovtIdPdfAdapter;\r\r    AddPhotoIDPdfAdapter addPhotoIDPdfAdapter;\r\r\r\r\r\r    MultipartBody.Part filePart,certPart,govIdPart,photIDPart;\r\r    private static final int REQUEST_CLINIC_CAMERA_PERMISSION_CODE = 785 ;\r\r    private static final int REQUEST_READ_CLINIC_PDF_PERMISSION = 787 ;\r\r    private static final int REQUEST_READ_GOVT_ID_PDF_PERMISSION = 788;\r\r    private static final int REQUEST_READ_PHOTO_ID_PDF_PERMISSION = 789;\r\r    private static final int REQUEST_READ_CLINIC_PIC_PERMISSION = 786;\r\r    private static final int REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE = 790;\r\r    private static final int REQUEST_READ_CERTIFICATE_PIC_PERMISSION = 791;\r\r    private static final int REQUEST_GOVTID_CAMERA_PERMISSION_CODE = 792;\r\r    private static final int REQUEST_READ_GOVTID_PIC_PERMISSION = 793;\r\r    private static final int REQUEST_PHOTOID_CAMERA_PERMISSION_CODE = 794;\r\r    private static final int REQUEST_READ_PHOTOID_PIC_PERMISSION = 795;\r\r\r\r\r    private static final int SELECT_CLINIC_CAMERA = 1000 ;\r\r    private static final int SELECT_CLINIC_PICTURE = 1001 ;\r\r    private static final int SELECT_CERT_PDF = 1002;\r\r    private static final int SELECT_GOVTID_PDF = 1003;\r\r    private static final int SELECT_PHOTOID_PDF = 1004;\r\r    private static final int SELECT_CERTIFICATE_CAMERA = 1005;\r\r    private static final int SELECT_CERTIFICATE_PICTURE = 1006;\r\r    private static final int SELECT_GOVTID_CAMERA = 1007;\r\r    private static final int SELECT_GOVTID_PICTURE = 1008;\r\r    private static final int SELECT_PHOTOID_CAMERA = 1009;\r\r    private static final int SELECT_PHOTOID_PICTURE = 1010;\r\r    String user_id,currentDateandTime;\r\r    private List<SPServiceListResponse.DataBean.ServiceListBean> spServiceList;\r    private List<SPServiceListResponse.DataBean.SpecializationBean> spSpecialzationList;\r    List<ServiceProviderRegisterFormCreateRequest.BusServiceListBean> bus_service_list = new ArrayList<>();\r    List<ServiceProviderRegisterFormCreateRequest.BusServiceListBean> bus_service_addmore_list = new ArrayList<>();\r    List<ServiceProviderRegisterFormCreateRequest.BusSpecListBean> bus_specialzation_addmore_list = new ArrayList<>();\r    List<ServiceProviderRegisterFormCreateRequest.BusSpecListBean> bus_spec_list = new ArrayList<>();\r    List<ServiceProviderRegisterFormCreateRequest.BusCertifBean> bus_certif_list = new ArrayList<>();\r    List<ServiceProviderRegisterFormCreateRequest.BusServiceGallBean> bus_service_gall_list = new ArrayList<>();\r    private String username;\r    private String useremail;\r    private String userphone;\r    private String govtIdPic;\r    private String photoIdPic;\r    Dialog alertDialog;\r\r    private GoogleApiClient googleApiClient;\r    Location mLastLocation;\r    public static final int MY_PERMISSIONS_REQUEST_LOCATION = 99;\r    private SupportMapFragment mapFragment;\r    private double latitude;\r    private double longitude;\r    private static final int REQUEST_CHECK_SETTINGS_GPS = 0x1;\r    private String AddressLine;\r    private List<SPServiceListResponse.DataBean.TimeBean> spTimeList;\r    private String strTimeslot;\r    private Integer ServiceCostAmount;\r\r    private String latlng;\r    private String CityName=\"\";\r    private boolean isSetAddress = false;\r    private Dialog dialog;\r\r\r    /*Crop Functonality */\r\r    private boolean isAddClinicPic = false;\r    private boolean isAddCertfProof = false;\r    private boolean isAddGovtIdproof = false;\r    private boolean isAddPhotoIDproof = false;\r\r\r\r\r    @SuppressLint({\"LongLogTag\", \"LogNotTimber\"})\r    @Override\r    protected void onCreate(Bundle savedInstanceState) {\r        super.onCreate(savedInstanceState);\r        setContentView(R.layout.activity_service_provider_register_form);\r        ButterKnife.bind(this);\r        SessionManager session = new SessionManager(getApplicationContext());\r        HashMap<String, String> user = session.getProfileDetails();\r        username = user.get(SessionManager.KEY_FIRST_NAME);\r        user_id = user.get(SessionManager.KEY_ID);\r        useremail = user.get(SessionManager.KEY_EMAIL_ID);\r        userphone = user.get(SessionManager.KEY_MOBILE);\r\r        Log.w(TAG,\"username : \"+username+\" user_id : \"+user_id);\r\r\r        avi_indicator.setVisibility(View.GONE);\r        rcylr_sp_servicestaticlist.setVisibility(View.GONE);\r\r        Bundle extras = getIntent().getExtras();\r        if (extras != null) {\r            latlng = String.valueOf(getIntent().getSerializableExtra(\"latlng\"));\r            Log.w(TAG,\"latlng-->\"+latlng);\r            if(latlng != null && !latlng.equalsIgnoreCase(\"null\")){\r                String newString = latlng.replace(\"lat/lng:\", \"\");\r                Log.w(TAG,\"latlng==\"+newString);\r\r                String latlngs = newString.trim().replaceAll(\"\\\\(\", \"\").replaceAll(\"\\\\)\",\"\").trim();\r                Log.w(TAG,\"latlngs==\"+latlngs);\r                String[] separated = latlngs.split(\",\");\r                String lat = separated[0];\r                String lon = separated[1];\r\r                latitude = Double.parseDouble(lat);\r                longitude = Double.parseDouble(lon);\r            }\r            CityName = extras.getString(\"cityname\");\r            AddressLine = extras.getString(\"address\");\r            String postalCode = extras.getString(\"PostalCode\");\r            Log.w(TAG,\"latitude : \"+latitude+\" \"+\"longitude : \"+longitude+\" CityName : \"+CityName+\" AddressLine : \"+AddressLine);\r            if(AddressLine != null) {\r                txt_address.setText(AddressLine);\r                isSetAddress = true;\r            }\r\r        }\r\r        if (mapFragment == null) {\r            mapFragment = SupportMapFragment.newInstance();\r            mapFragment.getMapAsync(this);\r        }\r        googleApiConnected();\r        LocationRequest locationRequest = LocationRequest.create();\r        locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);\r        locationRequest.setInterval(1000); // 10 seconds\r        locationRequest.setFastestInterval(1000); // 5 seconds\r\r\r\r        buttonsubmit.setOnClickListener(this);\r\r\r        rl_service_gallery_image.setOnClickListener(this);\r\r        rl_certificates.setOnClickListener(this);\r\r        rl_govtid.setOnClickListener(this);\r\r        rl_photoid.setOnClickListener(this);\r        img_bck.setOnClickListener(this);\r\r        btn_add_service.setOnClickListener(this);\r        btn_add_specialization.setOnClickListener(this);\r\r        txt_location_change.setOnClickListener(this);\r\r\r        if (new ConnectionDetector(ServiceProviderRegisterFormActivity.this).isNetworkAvailable(ServiceProviderRegisterFormActivity.this)) {\r\r            SPServiceListResponseCall();\r\r        }\r\r\r        /* ************ Adding service gallery Images ************** */\r\r        rcylr_choosen_service_img.setHasFixedSize(true);\r\r        rcylr_choosen_service_img.setNestedScrollingEnabled(false);\r\r        LinearLayoutManager layoutManager2 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);\r\r        rcylr_choosen_service_img.setLayoutManager(layoutManager2);\r\r\r        /* ************ Adding Certificate ************** */\r\r        recylerView_choosen_certificate_images.setHasFixedSize(true);\r\r        recylerView_choosen_certificate_images.setNestedScrollingEnabled(false);\r\r        LinearLayoutManager layoutManager3 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);\r\r        recylerView_choosen_certificate_images.setLayoutManager(layoutManager3);\r\r\r        /* ************ Adding GovtID ************** */\r\r        recylerView_choosen_govtid_images.setHasFixedSize(true);\r\r        recylerView_choosen_govtid_images.setNestedScrollingEnabled(false);\r\r        LinearLayoutManager layoutManager4 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);\r\r        recylerView_choosen_govtid_images.setLayoutManager(layoutManager4);\r\r\r\r        /* ************ Adding PhotoID ************** */\r\r        recylerView_choosen_photo_id_images.setHasFixedSize(true);\r\r        recylerView_choosen_photo_id_images.setNestedScrollingEnabled(false);\r\r        LinearLayoutManager layoutManager5 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);\r\r        recylerView_choosen_photo_id_images.setLayoutManager(layoutManager5);\r\r\r        /* *************** Get Current Date and Time ************************ */\r\r        SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r         currentDateandTime = sdf.format(new Date());\r\r\r\r\r    }\r\r\r\r\r    @SuppressLint(\"LongLogTag\")\r    public void SPServiceListResponseCall(){\r\r        avi_indicator.setVisibility(View.VISIBLE);\r        avi_indicator.smoothToShow();\r        //Creating an object of our api interface\r        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);\r        Call<SPServiceListResponse> call = apiInterface.SPServiceListResponseCall(RestUtils.getContentType());\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\r        call.enqueue(new Callback<SPServiceListResponse>() {\r            @SuppressLint({\"SetTextI18n\", \"LogNotTimber\"})\r            @Override\r            public void onResponse(@NonNull Call<SPServiceListResponse> call, @NonNull Response<SPServiceListResponse> response) {\r                avi_indicator.smoothToHide();\r\r\r                if (response.body() != null) {\r                    if(200 == response.body().getCode()){\r                        Log.w(TAG,\"SPServiceListResponse\" + new Gson().toJson(response.body()));\r\r                        if(response.body().getData() != null) {\r                            if(response.body().getData().getService_list() != null) {\r                                spServiceList = response.body().getData().getService_list();\r                            }\r                            if(response.body().getData().getSpecialization() != null) {\r                                spSpecialzationList = response.body().getData().getSpecialization();\r                            }\r                            if(response.body().getData().getTime()!= null) {\r                                spTimeList = response.body().getData().getTime();\r                            }\r\r                            if(spTimeList != null && spTimeList.size()>0) {\r                                for (int i = 0; i < spTimeList.size(); i++) {\r                                    strTimeslot = spTimeList.get(0).getTime();\r                                }\r                                for(int j=0; j<bus_service_list.size();j++) {\r                                    bus_service_list.get(j).setTime_slots(strTimeslot);\r                                }\r\r\r                            }\r\r                        }\r\r\r\r\r\r\r                        Log.w(TAG,\"spServiceList : \"+new Gson().toJson(spServiceList));\r                        if(spServiceList != null && spServiceList.size()>0){\r                            rcylr_sp_servicelist.setVisibility(View.VISIBLE);\r                            txt_no_records.setVisibility(View.GONE);\r                            setSPServiceList(spServiceList);\r                        }\r                        else{\r                            rcylr_sp_servicelist.setVisibility(View.GONE);\r                            txt_no_records.setVisibility(View.VISIBLE);\r                            txt_no_records.setText(\"No services found\");\r                        }\r\r                        Log.w(TAG,\"spSpecialzationList : \"+new Gson().toJson(spSpecialzationList));\r                        if(spSpecialzationList != null && spSpecialzationList.size()>0){\r                            rcylr_sp_specializationlist.setVisibility(View.VISIBLE);\r                            txt_no_records_specialization.setVisibility(View.GONE);\r                            setSPSpecialzationList(spSpecialzationList);\r                        }\r                        else{\r                            rcylr_sp_specializationlist.setVisibility(View.GONE);\r                            txt_no_records_specialization.setVisibility(View.VISIBLE);\r                            txt_no_records_specialization.setText(\"No specialzation found\");\r                        }\r\r                    }\r\r                }\r\r            }\r\r            @Override\r            public void onFailure(@NonNull Call<SPServiceListResponse> call, @NonNull  Throwable t) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"SPServiceListResponse flr\"+t.getMessage());\r            }\r        });\r\r    }\r\r    private void setSPServiceList(List<SPServiceListResponse.DataBean.ServiceListBean> spServiceList) {\r        rcylr_sp_servicelist.setLayoutManager(new GridLayoutManager(this, 1));\r        rcylr_sp_servicelist.setItemAnimator(new DefaultItemAnimator());\r        spServiceListAdapter = new SPServiceListAdapter(getApplicationContext(), spServiceList,this,spTimeList,bus_service_list,strTimeslot);\r        rcylr_sp_servicelist.setAdapter(spServiceListAdapter);\r    }\r    private void setSPAddMoreServiceList(List<ServiceProviderRegisterFormCreateRequest.BusServiceListBean> bus_service_addmore_list) {\r        rcylr_sp_servicestaticlist.setLayoutManager(new GridLayoutManager(this, 2));\r        rcylr_sp_servicestaticlist.setItemAnimator(new DefaultItemAnimator());\r        addMoreServiceAdapter = new AddMoreServiceAdapter(getApplicationContext(), bus_service_addmore_list,this);\r        rcylr_sp_servicestaticlist.setAdapter(addMoreServiceAdapter);\r    }\r    private void setSPSpecialzationList(List<SPServiceListResponse.DataBean.SpecializationBean> spSpecialzationList) {\r        rcylr_sp_specializationlist.setLayoutManager(new GridLayoutManager(this, 2));\r        rcylr_sp_specializationlist.setItemAnimator(new DefaultItemAnimator());\r        spSpecialzationListAdapter = new SPSpecialzationListAdapter(getApplicationContext(), spSpecialzationList,this);\r        rcylr_sp_specializationlist.setAdapter(spSpecialzationListAdapter);\r    }\r    private void setSPAddMoreSpecialzationList(List<ServiceProviderRegisterFormCreateRequest.BusSpecListBean> bus_specialzation_addmore_list) {\r        rcylr_sp_specializationstaticlist.setLayoutManager(new GridLayoutManager(this, 2));\r        rcylr_sp_specializationstaticlist.setItemAnimator(new DefaultItemAnimator());\r        addMoreSpecialzationAdapter = new AddMoreSpecialzationAdapter(getApplicationContext(), bus_specialzation_addmore_list,this);\r        rcylr_sp_specializationstaticlist.setAdapter(addMoreSpecialzationAdapter);\r    }\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r    @SuppressLint(\"LongLogTag\")\r    @Override\r    public void onItemSPServiceCheck(int position, String servicevalue,boolean isChbxChecked) {\r        Log.w(TAG, \"onItemSPServiceCheck servicevalue : \" + servicevalue + \" isChbxChecked : \" + isChbxChecked);\r\r        showAddAmount(position);\r    }\r\r\r\r\r\r\r    @SuppressLint(\"LongLogTag\")\r    @Override\r    public void onItemSPServiceUnCheck(int position, String servicevalue,boolean isChbxChecked) {\r        Log.w(TAG,\"onItemSPServiceUnCheck servicevalue : \"+servicevalue+\" isChbxChecked : \"+isChbxChecked);\r        if(servicevalue != null){\r            if(bus_service_list != null){\r                for (int i = 0; i < bus_service_list.size(); i++)\r                    if (bus_service_list.get(i).getBus_service_list().equalsIgnoreCase(servicevalue)) {\r                        bus_service_list.remove(i);\r                        Log.w(TAG, \"after removing list if\" + new Gson().toJson(bus_service_list));\r\r                    }\r\r            }\r            if(spServiceList != null && spServiceList.size()>0){\r                spServiceList.get(position).setChbxChecked(false);\r                spServiceList.get(position).setValueAdded(false);\r                rcylr_sp_servicelist.post(new Runnable()\r                {\r                    @Override\r                    public void run() {\r                        spServiceListAdapter.notifyDataSetChanged();\r                    }\r                });\r\r            }\r        }\r        Log.w(TAG,\"onItemSPServiceUnCheck spServiceList : \"+new Gson().toJson(spServiceList));\r\r\r\r    }\r\r\r\r\r    @SuppressLint(\"LongLogTag\")\r    private void chooseServiceGalleryImage() {\r        Log.w(TAG,\"bus_service_gall_list.size() : \"+bus_service_gall_list.size()+\" conditions : \"+(bus_service_gall_list.size()>=3));\r\r        if(bus_service_gall_list!=null&&bus_service_gall_list.size()>=3){\r\r            Toasty.warning(getApplicationContext(), \"Sorry you can't Add more than 3\", Toast.LENGTH_SHORT).show();\r\r        }\r\r        else {\r           /* final CharSequence[] items = {\"Take Photo\", \"Choose from Library\", \"Cancel\"};\r            //AlertDialog.Builder alert=new AlertDialog.Builder(this);\r            AlertDialog.Builder builder = new AlertDialog.Builder(ServiceProviderRegisterFormActivity.this);\r            builder.setTitle(\"Choose option\");\r            builder.setItems(items, (dialog, item) -> {\r                if (items[item].equals(\"Take Photo\"))\r                {\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(ServiceProviderRegisterFormActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r                    }\r                    else\r                    {\r\r\r                        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\r                        startActivityForResult(intent, SELECT_CLINIC_CAMERA);\r                    }\r\r                }\r\r                else if (items[item].equals(\"Choose from Library\"))\r                {\r\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(ServiceProviderRegisterFormActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r                    }\r\r                    else{\r\r                        Intent intent = new Intent();\r                        intent.setType(\"image/*\");\r                        intent.setAction(Intent.ACTION_GET_CONTENT);\r                        startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_CLINIC_PICTURE);\r\r\r                    }\r                }\r\r                else if (items[item].equals(\"Cancel\")) {\r                    dialog.dismiss();\r                }\r            });\r            builder.show();*/\r\r            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(ServiceProviderRegisterFormActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r            {\r                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r            }\r\r            else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(ServiceProviderRegisterFormActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r            {\r                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r            }\r\r            else\r            {\r\r                isAddClinicPic = true;\r\r                isAddCertfProof = false;\r\r                isAddGovtIdproof = false;\r\r                isAddPhotoIDproof = false;\r\r                CropImage.activity().start(ServiceProviderRegisterFormActivity.this);\r\r                /*CropImage.activity().start(AddYourPetImageOlduserActivity.this);*/\r            }\r        }\r\r    }\r\r    @SuppressLint(\"LongLogTag\")\r    private void uploadClinicImage() {\r\r        avi_indicator.show();\r\r        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\r        //RestApiInterface ApiService = RetrofitClient.getApiService();\r\r        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(filePart);\r\r//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());\r\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\r        call.enqueue(new Callback<FileUploadResponse>() {\r            @SuppressLint(\"LongLogTag\")\r            @Override\r            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"Profpic\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                if (response.body() != null) {\r                    if (200 == response.body().getCode()) {\r\r                        isAddClinicPic = false;\r\r                        ServiceProviderRegisterFormCreateRequest.BusServiceGallBean busServiceGallBean = new ServiceProviderRegisterFormCreateRequest.BusServiceGallBean();\r                        busServiceGallBean.setBus_service_gall(response.body().getData());\r                        bus_service_gall_list.add(busServiceGallBean);\r\r\r\r                        addServiceImageListAdapter = new AddServiceImageListAdapter(getApplicationContext(), bus_service_gall_list);\r\r                        rcylr_choosen_service_img.setAdapter(addServiceImageListAdapter);\r\r                    }\r\r                }\r\r\r            }\r\r            @SuppressLint(\"LongLogTag\")\r            @Override\r            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r                // avi_indicator.smoothToHide();\r                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r            }\r        });\r\r\r    }\r\r    private void chooseCertPdf() {\r\r        if(certificatePicResponse!=null&&certificatePicResponse.size()>=1){\r\r            Toasty.warning(getApplicationContext(), \"Sorry you can't Add more than 1\", Toast.LENGTH_SHORT).show();\r\r        }\r\r        else {\r\r            final CharSequence[] items = {\"Select Image\", \"Select File\",\"Cancel\"};\r            //AlertDialog.Builder alert=new AlertDialog.Builder(this);\r            AlertDialog.Builder builder = new AlertDialog.Builder(ServiceProviderRegisterFormActivity.this);\r            builder.setTitle(\"Choose option\");\r            builder.setItems(items, (dialog, item) -> {\r                if (items[item].equals(\"Select Image\"))\r                {\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(ServiceProviderRegisterFormActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE);\r                    }\r                    else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CERTIFICATE_PIC_PERMISSION);\r                    }\r                    else {\r\r                        isAddCertfProof = true;\r\r                        isAddClinicPic = false;\r\r                        isAddGovtIdproof = false;\r\r                        isAddPhotoIDproof = false;\r\r                        CropImage.activity().start(ServiceProviderRegisterFormActivity.this);\r\r                    }\r\r                }\r\r                else if (items[item].equals(\"Select File\")){\r\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M   && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PDF_PERMISSION);\r                    }\r\r                    else{\r\r                        Intent intent = new Intent();\r                        intent.setType(\"application/pdf\");\r                        intent.setAction(Intent.ACTION_GET_CONTENT);\r                        startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_CERT_PDF);\r\r\r                    }\r\r\r                }\r\r                else if (items[item].equals(\"Cancel\")) {\r                    dialog.dismiss();\r                }\r            });\r            builder.show();\r\r        }\r\r    }\r\r    @SuppressLint(\"LongLogTag\")\r    private void uploadCertPdf() {\r\r        avi_indicator.show();\r\r        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\r        //RestApiInterface ApiService = RetrofitClient.getApiService();\r\r        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(certPart);\r\r//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());\r\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\r        call.enqueue(new Callback<FileUploadResponse>() {\r            @SuppressLint(\"LongLogTag\")\r            @Override\r            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"PdfFileLink\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                if (response.body() != null) {\r\r                    if (200 == response.body().getCode()) {\r\r\r                        isAddCertfProof = false;\r\r                        ServiceProviderRegisterFormCreateRequest.BusCertifBean busCertifBean = new ServiceProviderRegisterFormCreateRequest.BusCertifBean();\r                        busCertifBean.setBus_certif(response.body().getData());\r                        bus_certif_list.add(busCertifBean);\r                        addSPCertPdfAdapter = new AddSPCertPdfAdapter(getApplicationContext(), bus_certif_list);\r                        recylerView_choosen_certificate_images.setAdapter(addSPCertPdfAdapter);\r\r\r                    }\r\r                }\r\r\r            }\r\r            @SuppressLint(\"LongLogTag\")\r            @Override\r            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r                // avi_indicator.smoothToHide();\r                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r            }\r        });\r\r\r    }\r\r    private void chooseGovIDPdf() {\r\r        if(govtIdPicBeans!=null&&govtIdPicBeans.size()>=1){\r\r            Toasty.warning(getApplicationContext(), \"Sorry you can't Add more than 1\", Toast.LENGTH_SHORT).show();\r\r        }\r\r        else {\r\r            final CharSequence[] items = {\"Select Image\", \"Select File\",\"Cancel\"};\r            //AlertDialog.Builder alert=new AlertDialog.Builder(this);\r            AlertDialog.Builder builder = new AlertDialog.Builder(ServiceProviderRegisterFormActivity.this);\r            builder.setTitle(\"Choose option\");\r            builder.setItems(items, (dialog, item) -> {\r                if (items[item].equals(\"Select Image\"))\r                {\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(ServiceProviderRegisterFormActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_GOVTID_CAMERA_PERMISSION_CODE);\r                    }\r                    else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVTID_PIC_PERMISSION);\r                    }\r\r                    else {\r\r                        isAddGovtIdproof = true;\r\r                        isAddClinicPic = false;\r\r                        isAddCertfProof = false;\r\r                        isAddPhotoIDproof = false;\r\r\r                        CropImage.activity().start(ServiceProviderRegisterFormActivity.this);\r\r                    }\r\r\r                }\r\r                else if (items[item].equals(\"Select File\")){\r\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M   && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVT_ID_PDF_PERMISSION);\r                    }\r\r                    else{\r\r                        Intent intent = new Intent();\r                        intent.setType(\"application/pdf\");\r                        intent.setAction(Intent.ACTION_GET_CONTENT);\r                        startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_GOVTID_PDF);\r\r\r                    }\r\r\r                }\r\r                else if (items[item].equals(\"Cancel\")) {\r                    dialog.dismiss();\r                }\r            });\r            builder.show();\r\r        }\r\r\r    }\r\r\r    @SuppressLint(\"LongLogTag\")\r    private void uploadGovtIDPdf() {\r\r        avi_indicator.show();\r\r        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\r        //RestApiInterface ApiService = RetrofitClient.getApiService();\r\r        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(govIdPart);\r\r//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());\r\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\r        call.enqueue(new Callback<FileUploadResponse>() {\r            @SuppressLint(\"LogNotTimber\")\r            @Override\r            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"PdfFileLink\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                if (response.body() != null) {\r\r                    if (200 == response.body().getCode()) {\r\r                        isAddGovtIdproof = false;\r\r                        DocBusInfoUploadRequest.GovtIdPicBean govtIdPicBean = new DocBusInfoUploadRequest.GovtIdPicBean (response.body().getData());\r\r                        govtIdPicBeans.add(govtIdPicBean);\r\r                        addGovtIdPdfAdapter = new AddGovtIdPdfAdapter(getApplicationContext(), govtIdPicBeans);\r\r                        recylerView_choosen_govtid_images.setAdapter(addGovtIdPdfAdapter);\r\r                    }\r\r                }\r\r\r            }\r\r            @Override\r            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r                // avi_indicator.smoothToHide();\r                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r            }\r        });\r\r\r    }\r\r    private void choosePhotoIDPdf() {\r\r        if(photoIdPicBeans!=null&&photoIdPicBeans.size()>=1){\r\r            Toasty.warning(getApplicationContext(), \"Sorry you can't Add more than 1\", Toast.LENGTH_SHORT).show();\r\r        }\r\r        else {\r\r            final CharSequence[] items = {\"Select Image\", \"Select File\",\"Cancel\"};\r            //AlertDialog.Builder alert=new AlertDialog.Builder(this);\r            AlertDialog.Builder builder = new AlertDialog.Builder(ServiceProviderRegisterFormActivity.this);\r            builder.setTitle(\"Choose option\");\r            builder.setItems(items, (dialog, item) -> {\r                if (items[item].equals(\"Select Image\"))\r                {\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(ServiceProviderRegisterFormActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_PHOTOID_CAMERA_PERMISSION_CODE);\r                    }\r                    else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTOID_PIC_PERMISSION);\r                    }\r                    {\r                        isAddPhotoIDproof=true;\r\r                        isAddClinicPic = false;\r\r                        isAddCertfProof = false;\r\r                        isAddGovtIdproof = false;\r\r                        CropImage.activity().start(ServiceProviderRegisterFormActivity.this);\r\r                    }\r\r                }\r\r                else if (items[item].equals(\"Select File\")){\r\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M   && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTO_ID_PDF_PERMISSION);\r                    }\r\r                    else{\r\r                        Intent intent = new Intent();\r                        intent.setType(\"application/pdf\");\r                        intent.setAction(Intent.ACTION_GET_CONTENT);\r                        startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_PHOTOID_PDF);\r\r\r                    }\r\r\r                }\r\r                else if (items[item].equals(\"Cancel\")) {\r                    dialog.dismiss();\r                }\r            });\r            builder.show();\r\r        }\r\r\r\r    }\r\r    @SuppressLint(\"LongLogTag\")\r    private void uploadPhotoIDPdf() {\r\r        avi_indicator.show();\r\r        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);\r\r        //RestApiInterface ApiService = RetrofitClient.getApiService();\r\r        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(photIDPart);\r\r//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());\r\r        Log.w(TAG,\"url  :%s\"+ call.request().url().toString());\r\r        call.enqueue(new Callback<FileUploadResponse>() {\r            @Override\r            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"PdfFileLink\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                if (response.body() != null) {\r\r                    if (200 == response.body().getCode()) {\r\r                        isAddPhotoIDproof = false;\r\r                        DocBusInfoUploadRequest.PhotoIdPicBean photoIdPicBean = new DocBusInfoUploadRequest.PhotoIdPicBean(response.body().getData());\r\r                        photoIdPicBeans.add(photoIdPicBean);\r\r                        addPhotoIDPdfAdapter = new AddPhotoIDPdfAdapter(getApplicationContext(), photoIdPicBeans);\r\r                        recylerView_choosen_photo_id_images.setAdapter(addPhotoIDPdfAdapter);\r\r                    }\r\r                }\r\r\r\r\r            }\r\r            @Override\r            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {\r                // avi_indicator.smoothToHide();\r                Log.w(TAG,\"ServerUrlImagePath\"+ \"On failure working\"+ t.getMessage());\r                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();\r            }\r        });\r\r\r    }\r\r    @SuppressLint({\"LongLogTag\", \"LogNotTimber\"})\r    private void checkValidation() {\r            business_name = edt_business_name.getText().toString().trim();\r            Log.w(TAG,\"bus_service_list : \"+new Gson().toJson(bus_service_list));\r            boolean can_proceed = true;\r\r                if(business_name.isEmpty()){\r                    edt_business_name.setError(\"Please fill the business name\");\r                    edt_business_name.requestFocus();\r                    can_proceed = false;\r\r                }\r               else if(bus_service_list != null && bus_service_list.size()<1){\r                   Toasty.warning(getApplicationContext(),\"Please Choose minimum 1 Service\",Toast.LENGTH_SHORT).show();\r                   can_proceed = false;\r               }\r               /*else if(ServiceCostAmount ==  null){\r                    Toasty.warning(getApplicationContext(),\"Please enter the service amount\",Toast.LENGTH_SHORT).show();\r                    can_proceed = false;\r                }*/\r                 else if(bus_spec_list != null && bus_spec_list.size()<1){\r\r                    Toasty.warning(getApplicationContext(),\"Please Choose minimum 1 Specialization\",Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r\r                }\r\r                else if(bus_service_gall_list != null &&bus_service_gall_list.size()<1){\r\r                    Toasty.warning(getApplicationContext(), \"Please Choose minimum 1 Service gallery image\", Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r                }\r                else if(photoIdPicBeans != null &&photoIdPicBeans.size()<1){\r\r                    Toasty.warning(getApplicationContext(), \"Please Choose PhotoID File\", Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r                }\r                else if(govtIdPicBeans != null &&govtIdPicBeans.size()<1){\r\r                    Toasty.warning(getApplicationContext(), \"Please Choose GovtID File\", Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r                }\r                else if(bus_certif_list != null &&bus_certif_list.size()<1){\r\r                    Toasty.warning(getApplicationContext(), \"Please Choose Certificate File\", Toast.LENGTH_SHORT).show();\r\r                    can_proceed = false;\r\r                }\r\r\r\r\r                if(can_proceed){\r                    if(latitude != 0 && longitude != 0){\r                        if (new ConnectionDetector(getApplicationContext()).isNetworkAvailable(getApplicationContext())) {\r                           serviceProviderRegisterFormCreateResponseCall();\r                        }\r                    }\r                    else{\r                        latitude = mLastLocation.getLatitude();\r                        longitude = mLastLocation.getLongitude();\r                        if(latitude != 0 && longitude != 0){\r                            getAddress(latitude,longitude);\r                        }\r                        if(latitude != 0 && longitude != 0){\r                            if (new ConnectionDetector(getApplicationContext()).isNetworkAvailable(getApplicationContext())) {\r                                serviceProviderRegisterFormCreateResponseCall();\r\r                            }\r                        }else{\r                            GPSTracker gps = new GPSTracker(getApplicationContext());\r                            // Check if GPS enabled\r                            if (gps.canGetLocation()) {\r                                latitude = gps.getLatitude();\r                                longitude = gps.getLongitude();\r                                Log.w(TAG, \"getLatandLong--->\" + \"latitude\" + \" \" + latitude + \"longitude\" + \" \" + longitude);\r                                if(latitude != 0 && longitude != 0){\r                                    getAddress(latitude,longitude);\r                                }\r                                if(latitude != 0 && longitude != 0){\r                                    if (new ConnectionDetector(getApplicationContext()).isNetworkAvailable(getApplicationContext())) {\r                                     serviceProviderRegisterFormCreateResponseCall();\r                                    }\r                                }\r\r\r                            }\r\r                        }\r\r\r                    }\r                }\r\r\r\r\r\r\r\r\r    }\r\r\r\r\r    @SuppressLint(\"LogNotTimber\")\r    @Override\r    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r        super.onActivityResult(requestCode, resultCode, data);\r\r        try {\r\r            switch (requestCode) {\r                case REQUEST_CHECK_SETTINGS_GPS:\r                    switch (resultCode) {\r                        case Activity.RESULT_OK:\r                            getMyLocation();\r                            break;\r                        case Activity.RESULT_CANCELED:\r                            getMyLocation();\r                            break;\r                    }\r                    break;\r            }\r\r            if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {\r                CropImage.ActivityResult result = CropImage.getActivityResult(data);\r                if (resultCode == RESULT_OK) {\r                    Uri resultUri = result.getUri();\r\r                    if (resultUri != null) {\r\r                        Log.w(\"selectedImageUri\", \" \" + resultUri);\r\r                        String filename = getFileName(resultUri);\r\r                        Log.w(\"filename\", \" \" + filename);\r\r                        String filePath = FileUtil.getPath(ServiceProviderRegisterFormActivity.this, resultUri);\r\r                        assert filePath != null;\r\r                        File file = new File(filePath); // initialize file here\r\r                        long length = file.length() / 1024; // Size in KB\r\r                        Log.w(\"filesize\", \" \" + length);\r\r                        if (length > 2000) {\r\r                            new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                                    .setTitleText(\"File Size\")\r                                    .setContentText(\"Please choose file size less than 2 MB \")\r                                    .setConfirmText(\"Ok\")\r                                    .show();\r                        } else {\r\r\r                            SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy hh:mm aa\", Locale.getDefault());\r                            String currentDateandTime = sdf.format(new Date());\r\r                            if(isAddClinicPic){\r\r                                filePart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                                uploadClinicImage();\r                            }\r\r                            else if(isAddCertfProof){\r\r                                certPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                                uploadCertPdf();\r                            }\r\r                            else if(isAddGovtIdproof){\r\r                                govIdPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                                uploadGovtIDPdf();\r                            }\r                            else if(isAddPhotoIDproof){\r\r                                photIDPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                                uploadPhotoIDPdf();\r                            }\r                        }\r\r\r                    } else {\r\r                        Toasty.warning(ServiceProviderRegisterFormActivity.this, \"Image Error!!Please upload Some other image\", Toasty.LENGTH_LONG).show();\r                    }\r\r\r                }\r            }\r\r            //\tToast.makeText(getActivity(),\"kk\",Toast.LENGTH_SHORT).show();\r            else if(requestCode== SELECT_CLINIC_PICTURE || requestCode == SELECT_CLINIC_CAMERA) {\r\r                if(requestCode == SELECT_CLINIC_CAMERA)\r                {\r                    Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get(\"data\");\r\r                    File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\r                    OutputStream os;\r                    try {\r                        os = new FileOutputStream(file);\r                        if (photo != null) {\r                            photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r                        }\r                        os.flush();\r                        os.close();\r                    } catch (Exception e) {\r                        Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r                    }\r\r                    RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\r                    filePart = MultipartBody.Part.createFormData(\"sampleFile\",  user_id+currentDateandTime+file.getName(), requestFile);\r\r                    uploadClinicImage();\r\r                }\r\r                else{\r\r                    try {\r                        if (resultCode == Activity.RESULT_OK)\r                        {\r\r                            Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\r                            Uri selectedImageUri = data.getData();\r\r                            Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\r                            String filename = null;\r                            if (selectedImageUri != null) {\r                                filename = getFileName(selectedImageUri);\r                            }\r\r                            Log.w(\"filename\", \" \" + filename);\r\r                            String filePath = FileUtil.getPath(ServiceProviderRegisterFormActivity.this,selectedImageUri);\r\r                            assert filePath != null;\r\r                            File file = new File(filePath); // initialize file here\r\r                            long length = file.length() / 1024; // Size in KB\r\r                            Log.w(\"filesize\", \" \" + length);\r\r//                        if(length>200){\r//\r//                            new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r//                                    .setTitleText(\"File Size\")\r//                                    .setContentText(\"Please choose file size less than 200 kb \")\r//                                    .setConfirmText(\"Ok\")\r//                                    .show();\r//                        }\r//\r//                        else{\r\r                            filePart = MultipartBody.Part.createFormData(\"sampleFile\", user_id+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                            uploadClinicImage();\r                            //}\r\r                        }\r                    } catch (Exception e) {\r\r                        Log.w(\"Exception\", \" \" + e);\r                    }\r\r                }\r\r            }\r\r            else if(requestCode == SELECT_CERTIFICATE_CAMERA)\r            {\r                Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get(\"data\");\r\r                File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\r                OutputStream os;\r                try {\r                    os = new FileOutputStream(file);\r                    if (photo != null) {\r                        photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r                    }\r                    os.flush();\r                    os.close();\r                } catch (Exception e) {\r                    Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r                }\r\r                RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\r                certPart = MultipartBody.Part.createFormData(\"sampleFile\",  user_id+currentDateandTime+file.getName(), requestFile);\r\r                uploadCertPdf();\r\r            }\r\r            else if(requestCode == SELECT_CERTIFICATE_PICTURE){\r\r                try {\r                    if (resultCode == Activity.RESULT_OK) {\r\r                        Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\r                        Uri selectedImageUri = data.getData();\r\r                        Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\r                        String filename = null;\r                        if (selectedImageUri != null) {\r                            filename = getFileName(selectedImageUri);\r                        }\r\r                        Log.w(\"filename\", \" \" + filename);\r\r                        String filePath = FileUtil.getPath(ServiceProviderRegisterFormActivity.this,selectedImageUri);\r\r                        assert filePath != null;\r\r                        File file = new File(filePath); // initialize file here\r\r                        long length = file.length() / 1024; // Size in KB\r\r                        Log.w(\"filesize\", \" \" + length);\r\r                        certPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                        uploadCertPdf();\r\r\r                    }\r                } catch (Exception e) {\r\r                    Log.w(\"Exception\", \" \" + e);\r                }\r\r            }\r\r            else if(requestCode== SELECT_CERT_PDF){\r\r                if(data!=null){\r\r                    try {\r                        if (resultCode == Activity.RESULT_OK)\r                        {\r\r                            Log.w(\"URI\", \" \" + data);\r\r                            Uri selectedFileUri = data.getData();\r\r                            if(selectedFileUri!=null){\r\r                                Log.w(\"selectedFileUri\", \" \" + selectedFileUri);\r\r                                String filename = getFileName(selectedFileUri);\r\r                                Log.w(\"filename\", \" \" + filename);\r\r                                String filePath = FileUtil.getPath(ServiceProviderRegisterFormActivity.this,selectedFileUri);\r\r                                assert filePath != null;\r\r                                File file = new File(filePath); // initialize file here\r\r                                long length = file.length() / 1024; // Size in KB\r\r                                Log.w(\"filesize\", \" \" + length);\r\r                                if(length>2000){\r\r                                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                                            .setTitleText(\"File Size\")\r                                            .setContentText(\"Please choose file size less than 2MB \")\r                                            .setConfirmText(\"Ok\")\r                                            .show();\r                                }\r\r                                else{\r\r                                certPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"pdf/*\"), file));\r\r                                uploadCertPdf();\r                                   }\r\r\r                             }\r                            else {\r\r                                Toasty.warning(ServiceProviderRegisterFormActivity.this, \"File Error!!Please upload Some other File\", Toasty.LENGTH_LONG).show();\r\r                            }\r\r                        }\r                    } catch (Exception e) {\r\r                        Log.w(\"Exception\", \" \" + e);\r                    }\r                }\r\r                else {\r\r                    Toasty.warning(ServiceProviderRegisterFormActivity.this, \"File Error!!Please upload Some other File\", Toasty.LENGTH_LONG).show();\r\r                }\r\r            }\r\r            else if(requestCode == SELECT_GOVTID_CAMERA)\r            {\r                Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get(\"data\");\r\r                File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\r                OutputStream os;\r                try {\r                    os = new FileOutputStream(file);\r                    if (photo != null) {\r                        photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r                    }\r                    os.flush();\r                    os.close();\r                } catch (Exception e) {\r                    Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r                }\r\r                RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\r                govIdPart = MultipartBody.Part.createFormData(\"sampleFile\",  user_id+currentDateandTime+file.getName(), requestFile);\r\r                uploadGovtIDPdf();\r\r            }\r\r            else if(requestCode == SELECT_GOVTID_PICTURE){\r\r                try {\r                    if (resultCode == Activity.RESULT_OK) {\r\r                        if(data!=null){\r\r                            Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\r                            Uri selectedImageUri = data.getData();\r\r                            if(selectedImageUri!=null){\r\r                                Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\r                                String filename = null;\r                                if (selectedImageUri != null) {\r                                    filename = getFileName(selectedImageUri);\r                                }\r\r                                Log.w(\"filename\", \" \" + filename);\r\r                                String filePath = FileUtil.getPath(ServiceProviderRegisterFormActivity.this,selectedImageUri);\r\r                                assert filePath != null;\r\r                                File file = new File(filePath); // initialize file here\r\r                                long length = file.length() / 1024; // Size in KB\r\r                                Log.w(\"filesize\", \" \" + length);\r\r                                govIdPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                                uploadGovtIDPdf();\r                            }\r                            else {\r\r                                Toasty.warning(ServiceProviderRegisterFormActivity.this, \"File Error!!Please upload Some other File\", Toasty.LENGTH_LONG).show();\r\r                            }\r                        }\r                        else {\r\r                            Toasty.warning(ServiceProviderRegisterFormActivity.this, \"File Error!!Please upload Some other File\", Toasty.LENGTH_LONG).show();\r\r                        }\r                    }\r                } catch (Exception e) {\r\r                    Log.w(\"Exception\", \" \" + e);\r                }\r\r            }\r\r            else if(requestCode== SELECT_GOVTID_PDF){\r\r                try {\r                    if (resultCode == Activity.RESULT_OK)\r                    {\r                        if(data!=null){\r\r                            Log.w(\"URI\", \" \" + data);\r\r                            Uri selectedFileUri = data.getData();\r\r                            if(selectedFileUri!=null){\r\r                                Log.w(\"selectedFileUri\", \" \" + selectedFileUri);\r\r                                String filename = getFileName(selectedFileUri);\r\r                                Log.w(\"filename\", \" \" + filename);\r\r                                String filePath = FileUtil.getPath(ServiceProviderRegisterFormActivity.this,selectedFileUri);\r\r                                assert filePath != null;\r\r                                File file = new File(filePath); // initialize file here\r\r                                long length = file.length() / 1024; // Size in KB\r\r                                Log.w(\"filesize\", \" \" + length);\r\r                                if(length>2000){\r\r                                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                                            .setTitleText(\"File Size\")\r                                            .setContentText(\"Please choose file size less than 2MB \")\r                                            .setConfirmText(\"Ok\")\r                                            .show();\r                                }\r\r                                else{\r\r                                    govIdPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"pdf/*\"), file));\r\r                                    uploadGovtIDPdf();\r                                }\r                            }\r\r                            else {\r\r                                Toasty.warning(ServiceProviderRegisterFormActivity.this, \"File Error!!Please upload Some other File\", Toasty.LENGTH_LONG).show();\r\r                            }\r\r                        }\r\r                       else {\r\r                            Toasty.warning(ServiceProviderRegisterFormActivity.this, \"File Error!!Please upload Some other File\", Toasty.LENGTH_LONG).show();\r\r                        }\r\r                    }\r                } catch (Exception e) {\r\r                    Log.w(\"Exception\", \" \" + e);\r                }\r            }\r\r            else if(requestCode == SELECT_PHOTOID_CAMERA)\r            {\r                Bitmap photo = (Bitmap) Objects.requireNonNull(data.getExtras()).get(\"data\");\r\r                File file = new File(getFilesDir(), \"Petfolio1\" + \".jpg\");\r\r                OutputStream os;\r                try {\r                    os = new FileOutputStream(file);\r                    if (photo != null) {\r                        photo.compress(Bitmap.CompressFormat.JPEG, 100, os);\r                    }\r                    os.flush();\r                    os.close();\r                } catch (Exception e) {\r                    Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\r                }\r\r                RequestBody requestFile = RequestBody.create(MediaType.parse(\"image*/\"), file);\r\r                photIDPart = MultipartBody.Part.createFormData(\"sampleFile\",  user_id+currentDateandTime+file.getName(), requestFile);\r\r                uploadPhotoIDPdf();\r\r            }\r\r            else if(requestCode == SELECT_PHOTOID_PICTURE){\r\r                try {\r                    if (resultCode == Activity.RESULT_OK) {\r\r                        Log.w(\"VALUEEEEEEE1111\", \" \" + data);\r\r                        Uri selectedImageUri = data.getData();\r\r                        Log.w(\"selectedImageUri\", \" \" + selectedImageUri);\r\r                        String filename = null;\r                        if (selectedImageUri != null) {\r                            filename = getFileName(selectedImageUri);\r                        }\r\r                        Log.w(\"filename\", \" \" + filename);\r\r                        String filePath = FileUtil.getPath(ServiceProviderRegisterFormActivity.this,selectedImageUri);\r\r                        assert filePath != null;\r\r                        File file = new File(filePath); // initialize file here\r\r                        long length = file.length() / 1024; // Size in KB\r\r                        Log.w(\"filesize\", \" \" + length);\r\r                        photIDPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id+currentDateandTime+file.getName(), RequestBody.create(MediaType.parse(\"image/*\"), file));\r\r                        uploadPhotoIDPdf();\r\r\r                    }\r                } catch (Exception e) {\r\r                    Log.w(\"Exception\", \" \" + e);\r                }\r\r            }\r\r            else if(requestCode== SELECT_PHOTOID_PDF){\r\r                try {\r                    if (resultCode == Activity.RESULT_OK)\r                    {\r                        if(data!=null){\r\r                            Log.w(\"URI\", \" \" + data);\r\r                            Uri selectedFileUri = data.getData();\r\r                            if(selectedFileUri!=null){\r\r                                Log.w(\"selectedFileUri\", \" \" + selectedFileUri);\r\r                                String filename = getFileName(selectedFileUri);\r\r                                Log.w(\"filename\", \" \" + filename);\r\r                                String filePath = FileUtil.getPath(ServiceProviderRegisterFormActivity.this,selectedFileUri);\r\r                                assert filePath != null;\r\r                                File file = new File(filePath); // initialize file here\r\r                                long length = file.length() / 1024; // Size in KB\r\r                                Log.w(\"filesize\", \" \" + length);\r\r                                if(length>2000){\r\r                                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                                            .setTitleText(\"File Size\")\r                                            .setContentText(\"Please choose file size less than 2MB \")\r                                            .setConfirmText(\"Ok\")\r                                            .show();\r                                }\r\r                                else{\r\r                                    photIDPart = MultipartBody.Part.createFormData(\"sampleFile\", user_id + currentDateandTime + file.getName(), RequestBody.create(MediaType.parse(\"pdf/*\"), file));\r\r                                    uploadPhotoIDPdf();\r                                }\r\r                            }\r\r                            else {\r\r                                Toasty.warning(ServiceProviderRegisterFormActivity.this, \"File Error!!Please upload Some other File\", Toasty.LENGTH_LONG).show();\r\r                            }\r\r                        }\r\r                        else {\r\r                            Toasty.warning(ServiceProviderRegisterFormActivity.this, \"File Error!!Please upload Some other File\", Toasty.LENGTH_LONG).show();\r\r                        }\r\r                    }\r                } catch (Exception e) {\r\r                    Log.w(\"Exception\", \" \" + e);\r                }\r            }\r\r\r        } catch (Exception e) {\r            e.printStackTrace();\r        }\r\r\r\r    }\r\r    @Override\r    public void onBackPressed() {\r        super.onBackPressed();\r        startActivity(new Intent(ServiceProviderRegisterFormActivity.this, LoginActivity.class));\r        finish();\r    }\r\r    @SuppressLint({\"NonConstantResourceId\", \"LogNotTimber\"})\r    @Override\r    public void onClick(View v) {\r\r        switch (v.getId()){\r\r            case R.id.buttonsubmit:\r                checkValidation();\r                break;\r\r            case R.id.img_bck:\r                onBackPressed();\r                break;\r\r                case R.id.rl_service_gallery_image:\r                    chooseServiceGalleryImage();\r                break;\r\r            case R.id.rl_certificates:\r                chooseCertPdf();\r                break;\r\r            case R.id.rl_govtid:\r                chooseGovIDPdf();\r                break;\r\r            case R.id.rl_photoid:\r                choosePhotoIDPdf();\r                break;\r\r                case R.id.btn_add_service:\r                    addMoreService();\r\r                break;\r                case R.id.btn_add_specialization:\r                    addMoreSpecialzation();\r                    break;\r\r            case R.id.txt_location_change:\r                gotoSetlocation();\r                break;\r\r\r\r\r        }\r\r    }\r\r    private void gotoSetlocation() {\r        Intent intent = new Intent(getApplicationContext(), SetLocationSPNewActivity.class);\r        intent.putExtra(\"fromactivity\",TAG);\r        startActivity(intent);\r    }\r\r\r    @SuppressLint(\"LongLogTag\")\r    private void addMoreService() {\r        if(edt_addmore_service.getText().toString() != null && !edt_addmore_service.getText().toString().isEmpty()){\r            ServiceProviderRegisterFormCreateRequest.BusServiceListBean busServiceListBean = new ServiceProviderRegisterFormCreateRequest.BusServiceListBean();\r            busServiceListBean.setBus_service_list(edt_addmore_service.getText().toString());\r            busServiceListBean.setTime_slots(strTimeslot);\r            busServiceListBean.setAmount(1);\r            bus_service_addmore_list.add(busServiceListBean);\r            bus_service_list.add(busServiceListBean);\r            rcylr_sp_servicestaticlist.setVisibility(View.VISIBLE);\r            setSPAddMoreServiceList(bus_service_addmore_list);\r            edt_addmore_service.setText(\"\");\r            Log.w(TAG,\"moreServiceArrayList : \"+new Gson().toJson(bus_service_list));\r        }else{\r            showWarningAddMoreService();\r        }\r    }\r\r    @SuppressLint(\"LongLogTag\")\r    private void addMoreSpecialzation() {\r        if(edt_specialization_ifany.getText().toString() != null && !edt_specialization_ifany.getText().toString().isEmpty()){\r            ServiceProviderRegisterFormCreateRequest.BusSpecListBean busSpecListBean = new ServiceProviderRegisterFormCreateRequest.BusSpecListBean();\r            busSpecListBean.setBus_spec_list(edt_specialization_ifany.getText().toString());\r            bus_specialzation_addmore_list.add(busSpecListBean);\r            bus_spec_list.add(busSpecListBean);\r            rcylr_sp_specializationstaticlist.setVisibility(View.VISIBLE);\r            setSPAddMoreSpecialzationList(bus_specialzation_addmore_list);\r            edt_specialization_ifany.setText(\"\");\r            Log.w(TAG,\"moreSpecialzationArrayList : \"+new Gson().toJson(bus_spec_list));\r        }else{\r            showWarningAddMoreSpecialzation();\r        }\r    }\r\r    @Override\r    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\r        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r        if (requestCode == MY_PERMISSIONS_REQUEST_LOCATION) {\r            if (grantResults.length > 0\r                    && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r                if (ContextCompat.checkSelfPermission(getApplicationContext(),\r                        Manifest.permission.ACCESS_FINE_LOCATION)\r                        == PackageManager.PERMISSION_GRANTED) {\r\r\r                }\r            } else {\r                Toast.makeText(getApplicationContext(), \"permission denied\", Toast.LENGTH_LONG).show();\r            }\r        }\r\r        if (requestCode == REQUEST_READ_CLINIC_PIC_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r               /* Intent intent = new Intent();\r                intent.setType(\"image/*\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_CLINIC_PICTURE);\r*/\r                chooseServiceGalleryImage();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_CLINIC_CAMERA_PERMISSION_CODE) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r//\r//                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r//\r//                //    intent.putExtra(MediaStore.EXTRA_SCREEN_ORIENTATION, ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\r//\r//                startActivityForResult(intent, SELECT_CLINIC_CAMERA);\r\r                chooseServiceGalleryImage();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Camera for taking picture\")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_READ_CLINIC_PDF_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r                Intent intent = new Intent();\r                intent.setType(\"application/pdf\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_CERT_PDF);\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Pdf files \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PDF_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_READ_GOVT_ID_PDF_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r                Intent intent = new Intent();\r                intent.setType(\"application/pdf\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_GOVTID_PDF);\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Pdf Files \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVT_ID_PDF_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", new SweetAlertDialog.OnSweetClickListener() {\r                            @Override\r                            public void onClick(SweetAlertDialog sDialog) {\r                                sDialog.dismissWithAnimation();\r\r                            }\r                        })\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_READ_PHOTO_ID_PDF_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r                Intent intent = new Intent();\r                intent.setType(\"application/pdf\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select PDF\"), SELECT_PHOTOID_PDF);\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Pdf files \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTO_ID_PDF_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == MY_PERMISSIONS_REQUEST_LOCATION) {\r            // If request is cancelled, the result arrays are empty.\r            if (grantResults.length > 0\r                    && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r\r                checkValidation();\r\r\r            } else {\r\r                // permission denied\r                showWarning(MY_PERMISSIONS_REQUEST_LOCATION);\r\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_READ_CERTIFICATE_PIC_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r//                Intent intent = new Intent();\r//                intent.setType(\"image/*\");\r//                intent.setAction(Intent.ACTION_GET_CONTENT);\r//                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_CERTIFICATE_PICTURE);\r\r                chooseCertPdf();\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CERTIFICATE_PIC_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r          /*      Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\r                //    intent.putExtra(MediaStore.EXTRA_SCREEN_ORIENTATION, ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\r\r                startActivityForResult(intent, SELECT_CERTIFICATE_CAMERA);*/\r\r                chooseCertPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Camera for taking picture\")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_READ_GOVTID_PIC_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r        /*        Intent intent = new Intent();\r                intent.setType(\"image/*\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_GOVTID_PICTURE);*/\r\r                chooseGovIDPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVTID_PIC_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_GOVTID_CAMERA_PERMISSION_CODE) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r//                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r//\r//                //    intent.putExtra(MediaStore.EXTRA_SCREEN_ORIENTATION, ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\r//\r//                startActivityForResult(intent, SELECT_GOVTID_CAMERA);\r\r                chooseGovIDPdf();\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Camera for taking picture\")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_GOVTID_CAMERA_PERMISSION_CODE);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_READ_PHOTOID_PIC_PERMISSION) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r        /*        Intent intent = new Intent();\r                intent.setType(\"image/*\");\r                intent.setAction(Intent.ACTION_GET_CONTENT);\r                startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), SELECT_PHOTOID_PICTURE);*/\r\r                choosePhotoIDPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Permissions for choosing Images from Gallery \")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTOID_PIC_PERMISSION);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                        .show();\r\r            }\r\r        }\r\r        else if (requestCode == REQUEST_PHOTOID_CAMERA_PERMISSION_CODE) {\r\r            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\r        /*        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\r                //    intent.putExtra(MediaStore.EXTRA_SCREEN_ORIENTATION, ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\r\r                startActivityForResult(intent, SELECT_PHOTOID_CAMERA);*/\r\r                choosePhotoIDPdf();\r\r            } else {\r                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                        .setTitleText(\"Permission Required\")\r                        .setContentText(\"Please Allow Camera for taking picture\")\r                        .setConfirmText(\"Ok\")\r                        .setConfirmClickListener(sDialog -> {\r\r                            sDialog.dismissWithAnimation();\r\r                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r                                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_PHOTOID_CAMERA_PERMISSION_CODE);\r                            }\r\r\r                        })\r                        .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                        .show();\r\r            }\r\r        }\r    }\r\r\r    private void showWarning(int REQUEST_PERMISSION_CODE) {\r\r        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                .setTitleText(\"Sorry!!\")\r                .setContentText(\"You Can't proceed further unless you allow permission\")\r                .setConfirmText(\"Ok\")\r                .setConfirmClickListener(sDialog -> {\r\r                    sDialog.dismissWithAnimation();\r\r                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)\r                    {\r                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_PERMISSION_CODE);\r                    }\r\r\r                })\r                .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                .show();\r    }\r    private void showWarningAddMoreService() {\r\r        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                .setTitleText(\"Add More Service!!\")\r                .setContentText(\"Please enter the service name\")\r                .setConfirmText(\"Ok\")\r                .setConfirmClickListener(SweetAlertDialog::dismissWithAnimation)\r                .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                .show();\r    }\r    private void showWarningAddMoreSpecialzation() {\r\r        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\r                .setTitleText(\"Add More Specialzation!!\")\r                .setContentText(\"Please enter the specialzation name\")\r                .setConfirmText(\"Ok\")\r                .setConfirmClickListener(SweetAlertDialog::dismissWithAnimation)\r                .setCancelButton(\"Cancel\", SweetAlertDialog::dismissWithAnimation)\r                .show();\r    }\r\r    public String getFileName(Uri uri) {\r        String result = null;\r        if (Objects.requireNonNull(uri.getScheme()).equals(\"content\")) {\r            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {\r                if (cursor != null && cursor.moveToFirst()) {\r                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));\r                }\r            }\r        }\r        if (result == null) {\r            result = uri.getPath();\r            int cut = 0;\r            if (result != null) {\r                cut = result.lastIndexOf('/');\r            }\r            if (cut != -1) {\r                if (result != null) {\r                    result = result.substring(cut + 1);\r                }\r            }\r        }\r        return result;\r    }\r\r\r\r\r    @SuppressLint({\"LongLogTag\", \"LogNotTimber\"})\r    private void serviceProviderRegisterFormCreateResponseCall() {\r        avi_indicator.setVisibility(View.VISIBLE);\r        avi_indicator.smoothToShow();\r        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);\r        Call<ServiceProviderRegisterFormCreateResponse> call = apiInterface.serviceProviderRegisterFormCreateResponseCall(RestUtils.getContentType(), serviceProviderRegisterFormCreateRequest());\r        Log.w(TAG,\"ServiceProviderRegisterFormCreateResponse url  :%s\"+\" \"+ call.request().url().toString());\r\r        call.enqueue(new Callback<ServiceProviderRegisterFormCreateResponse>() {\r            @SuppressLint({\"LongLogTag\", \"LogNotTimber\"})\r            @Override\r            public void onResponse(@NonNull Call<ServiceProviderRegisterFormCreateResponse> call, @NonNull Response<ServiceProviderRegisterFormCreateResponse> response) {\r\r                Log.w(TAG,\"ServiceProviderRegisterFormCreateResponse\"+ \"--->\" + new Gson().toJson(response.body()));\r\r                avi_indicator.smoothToHide();\r\r                if (response.body() != null) {\r                    if(response.body().getCode() == 200){\r\r                        if (response.body().getMessage() != null){\r                            showRegisterSuccessalert(response.body().getMessage());\r                        }\r\r\r                    }\r                    else{\r                        showErrorLoading(response.body().getMessage());\r                    }\r                }\r\r\r            }\r\r            @SuppressLint(\"LongLogTag\")\r            @Override\r            public void onFailure(@NonNull Call<ServiceProviderRegisterFormCreateResponse> call, @NonNull Throwable t) {\r\r                avi_indicator.smoothToHide();\r                Log.w(TAG,\"ServiceProviderRegisterFormCreateResponse flr\"+\"--->\" + t.getMessage());\r            }\r        });\r\r    }\r    @SuppressLint({\"LongLogTag\", \"LogNotTimber\"})\r    private ServiceProviderRegisterFormCreateRequest serviceProviderRegisterFormCreateRequest() {\r        /**\r         * user_id : 5fc61b82b750da703e48da78\r         * bus_user_name : mohammed Imthiyas\r         * profile_status : true\r         * profile_verification_status : Not verified\r         * sp_loc : No, chennai tamil nadu\r         * sp_lat : 12.00909\r         * sp_long : 80.980098\r         * bus_user_email : mohammed@gmail.com\r         * bussiness_name : Mohammed imthiyas\r         * bus_user_phone : 9876543210\r         * bus_service_list : [{\"bus_service_list\":\"Service - 1\",\"time_slots\":\"15 mins\"},{\"bus_service_list\":\"Service - 2\",\"time_slots\":\"15 mins\"},{\"bus_service_list\":\"Service - 3\",\"time_slots\":\"15 mins\"}]\r         * bus_spec_list : [{\"bus_spec_list\":\"Spec -1\"},{\"bus_spec_list\":\"Spec -1\"},{\"bus_spec_list\":\"Spec -1\"}]\r         * bus_service_gall : [{\"bus_service_gall\":\"\"},{\"bus_service_gall\":\"\"},{\"bus_service_gall\":\"\"}]\r         * bus_profile :\r         * bus_proof :\r         * bus_certif : [{\"bus_certif\":\"\"},{\"bus_certif\":\"\"},{\"bus_certif\":\"\"}]\r         * date_and_time : 23-10-2020 12:00 AM\r         * mobile_type : Admin\r         * city_name : Chennai\r         * sp_info\r         */\r\r        SimpleDateFormat sdf = new SimpleDateFormat(\"dd/MM/yyyy hh:mm aa\", Locale.getDefault());\r        String currentDateandTime = sdf.format(new Date());\r        ServiceProviderRegisterFormCreateRequest serviceProviderRegisterFormCreateRequest = new ServiceProviderRegisterFormCreateRequest();\r        serviceProviderRegisterFormCreateRequest.setUser_id(user_id);\r        serviceProviderRegisterFormCreateRequest.setBus_user_name(username);\r        serviceProviderRegisterFormCreateRequest.setBus_user_email(useremail);\r        serviceProviderRegisterFormCreateRequest.setBussiness_name(edt_business_name.getText().toString());\r        serviceProviderRegisterFormCreateRequest.setBus_user_phone(userphone);\r        serviceProviderRegisterFormCreateRequest.setBus_service_list(bus_service_list);\r        serviceProviderRegisterFormCreateRequest.setBus_spec_list(bus_spec_list);\r        serviceProviderRegisterFormCreateRequest.setBus_service_gall(bus_service_gall_list);\r        serviceProviderRegisterFormCreateRequest.setBus_profile(photoIdPic);\r        serviceProviderRegisterFormCreateRequest.setBus_proof(govtIdPic);\r        serviceProviderRegisterFormCreateRequest.setBus_certif(bus_certif_list);\r        serviceProviderRegisterFormCreateRequest.setDate_and_time(currentDateandTime);\r        serviceProviderRegisterFormCreateRequest.setMobile_type(\"Android\");\r        serviceProviderRegisterFormCreateRequest.setProfile_status(true);\r        serviceProviderRegisterFormCreateRequest.setProfile_verification_status(\"Not verified\");\r        serviceProviderRegisterFormCreateRequest.setSp_loc(txt_address.getText().toString());\r        serviceProviderRegisterFormCreateRequest.setSp_lat(latitude);\r        serviceProviderRegisterFormCreateRequest.setSp_long(longitude);\r        serviceProviderRegisterFormCreateRequest.setCity_name(CityName);\r        serviceProviderRegisterFormCreateRequest.setSp_info(edt_aboutsp.getText().toString());\r\r        Log.w(TAG,\"serviceProviderRegisterFormCreateRequest\"+ \"--->\" + new Gson().toJson(serviceProviderRegisterFormCreateRequest));\r        return serviceProviderRegisterFormCreateRequest;\r    }\r\r\r    @SuppressLint(\"LongLogTag\")\r    @Override\r    public void addMoreServiceRemoveListener(int position, String servicevalue) {\r        Log.w(TAG,\"addMoreServiceRemoveListener : \"+servicevalue);\r        if(servicevalue != null){\r            if(bus_service_list != null){\r                for (int i = 0; i < bus_service_list.size(); i++)\r                    if (bus_service_list.get(i).getBus_service_list().equalsIgnoreCase(servicevalue)) {\r                        bus_service_list.remove(i);\r                        Log.w(TAG, \"after removing list if\" + new Gson().toJson(bus_service_list));\r\r                    }\r\r            }\r\r\r\r        }\r    }\r\r    public void showErrorLoading(String errormesage){\r        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);\r        alertDialogBuilder.setMessage(errormesage);\r        alertDialogBuilder.setPositiveButton(\"ok\",\r                (arg0, arg1) -> hideLoading());\r\r\r\r\r        AlertDialog alertDialog = alertDialogBuilder.create();\r        alertDialog.show();\r    }\r    public void hideLoading(){\r        try {\r            alertDialog.dismiss();\r        }catch (Exception ignored){\r\r        }\r    }\r\r    @SuppressLint(\"LongLogTag\")\r    @Override\r    public void onItemSPSpecialzationCheck(int position, String specValue) {\r        ServiceProviderRegisterFormCreateRequest.BusSpecListBean busSpecListBean = new ServiceProviderRegisterFormCreateRequest.BusSpecListBean();\r        busSpecListBean.setBus_spec_list(specValue);\r        bus_spec_list.add(busSpecListBean);\r        Log.w(TAG + \"added_specialzation_list\",new Gson().toJson(bus_spec_list));\r\r\r    }\r\r    @SuppressLint(\"LongLogTag\")\r    @Override\r    public void onItemSPSpecialzationUnCheck(int position, String specValue) {\r        if(specValue != null){\r            if(bus_spec_list != null){\r                for (int i = 0; i < bus_spec_list.size(); i++)\r                    if (bus_spec_list.get(i).getBus_spec_list().equalsIgnoreCase(specValue)) {\r                        bus_spec_list.remove(i);\r                        Log.w(TAG, \"after removing list if\" + new Gson().toJson(bus_spec_list));\r\r                    }\r\r            }\r\r\r\r        }\r    }\r\r    @SuppressLint(\"LongLogTag\")\r    @Override\r    public void addMoreSpecialzationRemoveListener(int position, String specValue) {\r        Log.w(TAG,\"addMoreSpecialzationRemoveListener : \"+specValue);\r        if(specValue != null){\r            if(bus_spec_list != null){\r                for (int i = 0; i < bus_spec_list.size(); i++)\r                    if (bus_spec_list.get(i).getBus_spec_list().equalsIgnoreCase(specValue)) {\r                        bus_spec_list.remove(i);\r                        Log.w(TAG, \"after removing list if\" + new Gson().toJson(bus_spec_list));\r\r                    }\r\r            }\r\r\r\r        }\r    }\r\r    private void googleApiConnected() {\r\r        googleApiClient = new GoogleApiClient.Builder(Objects.requireNonNull(getApplicationContext())).\r                addConnectionCallbacks(this).\r                addOnConnectionFailedListener(this).\r                addApi(LocationServices.API).build();\r        googleApiClient.connect();\r\r    }\r    private void checkLocation() {\r        try {\r            LocationManager lm = (LocationManager) getApplicationContext().getSystemService(Context.LOCATION_SERVICE);\r            boolean gps_enabled = false;\r            boolean network_enabled = false;\r\r            try {\r                gps_enabled = lm.isProviderEnabled(LocationManager.GPS_PROVIDER);\r            } catch (Exception ignored) {\r            }\r\r            try {\r                network_enabled = lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER);\r            } catch (Exception ignored) {\r            }\r\r            if (!gps_enabled && !network_enabled) {\r\r                if (!lm.isProviderEnabled(LocationManager.GPS_PROVIDER)) {\r                    getMyLocation();\r                }\r\r            } else {\r                getLatandLong();\r            }\r        } catch (Exception e) {\r            e.printStackTrace();\r        }\r\r    }\r    @SuppressLint(\"LongLogTag\")\r    @Override\r    public void onLocationChanged(Location location) {\r\r        mLastLocation = location;\r        if(!isSetAddress){\r            latitude = mLastLocation.getLatitude();\r            longitude = mLastLocation.getLongitude();\r\r            Log.w(TAG,\"onLocationChanged : \"+\" latitude : \"+latitude+ \" longitude : \"+longitude);\r        }\r\r        if(latitude != 0 && longitude != 0){\r            getAddress(latitude,longitude);\r        }\r       /* mLastLocation = location;\r        latitude = mLastLocation.getLatitude();\r        longitude = mLastLocation.getLongitude();\r\r        if(latitude != 0 && longitude != 0){\r            getAddress(latitude,longitude);\r        }\r\r        Log.w(TAG,\"onLocationChanged : \"+\" latitude : \"+latitude+ \" longitude : \"+longitude);\r\r*/\r\r\r\r\r    }\r    @Override\r    public void onConnected(@Nullable Bundle bundle) {\r        permissionChecking();\r    }\r    @Override\r    public void onConnectionSuspended(int i) {\r\r    }\r    @Override\r    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {\r\r    }\r    @SuppressLint(\"LongLogTag\")\r    @Override\r    public void onMapReady(GoogleMap googleMap) {\r\r\r    }\r    private void permissionChecking() {\r        if (getApplicationContext() != null) {\r            if (Build.VERSION.SDK_INT >= 23 && (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) &&\r                    (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED)) {\r\r                ActivityCompat.requestPermissions(Objects.requireNonNull(this), new String[]{Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION}, 5);\r\r            } else {\r\r                checkLocation();\r            }\r        }\r    }\r    public void getMyLocation() {\r\r        if (googleApiClient != null) {\r\r            if (googleApiClient.isConnected()) {\r                if(getApplicationContext() != null){\r                    if (ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r                        // TODO: Consider calling\r                        //    ActivityCompat#requestPermissions\r                        // here to request the missing permissions, and then overriding\r                        //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\r                        //                                          int[] grantResults)\r                        // to handle the case where the user grants the permission. See the documentation\r                        // for ActivityCompat#requestPermissions for more details.\r\r                        return;\r                    }\r\r                }\r\r                mLastLocation = LocationServices.FusedLocationApi.getLastLocation(googleApiClient);\r                LocationRequest locationRequest = new LocationRequest();\r                locationRequest.setInterval(2000);\r                locationRequest.setFastestInterval(2000);\r                locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);\r                LocationSettingsRequest.Builder builder = new LocationSettingsRequest.Builder().addLocationRequest(locationRequest);\r                builder.setAlwaysShow(true);\r                LocationServices.FusedLocationApi.requestLocationUpdates(googleApiClient, locationRequest, this);\r                PendingResult<LocationSettingsResult> result = LocationServices.SettingsApi.checkLocationSettings(googleApiClient, builder.build());\r                result.setResultCallback(result1 -> {\r                    Status status = result1.getStatus();\r                    switch (status.getStatusCode()) {\r                        case LocationSettingsStatusCodes.SUCCESS:\r                            // All location settings are satisfied.\r                            // You can initialize location requests here.\r                            mLastLocation = LocationServices.FusedLocationApi.getLastLocation(googleApiClient);\r\r\r\r\r\r\r                            Handler handler = new Handler();\r                            int delay = 1000; //milliseconds\r\r                            handler.postDelayed(new Runnable() {\r                                @SuppressLint(\"LongLogTag\")\r                                public void run() {\r                                    //do something\r                                    Log.w(TAG, \"getMyLocation-->\");\r\r                                    //parkingListResponseCall(checkinhours,checkouthours,requestCheckinDate,requestCheckoutDate, selectedVehicleTypeId);\r\r\r                                }\r                            }, delay);\r\r\r                            break;\r                        case LocationSettingsStatusCodes.RESOLUTION_REQUIRED:\r                            try {\r                                status.startResolutionForResult(this, REQUEST_CHECK_SETTINGS_GPS);\r                            } catch (IntentSender.SendIntentException e) {\r                                // Ignore the error.\r                            }\r                            break;\r                        case LocationSettingsStatusCodes.SETTINGS_CHANGE_UNAVAILABLE:\r                            break;\r                    }\r                });\r            }\r\r\r        }\r    }\r\r    @SuppressLint({\"LogNotTimber\", \"LongLogTag\"})\r    private void getLatandLong() {\r        try {\r            if (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 1);\r\r            } else {\r                GPSTracker gps = new GPSTracker(getApplicationContext());\r                // Check if GPS enabled\r                if (gps.canGetLocation()) {\r                    if(!isSetAddress) {\r                        latitude = gps.getLatitude();\r                        longitude = gps.getLongitude();\r                        Log.w(TAG, \"getLatandLong--->\" + \"latitude\" + \" \" + latitude + \"longitude\" + \" \" + longitude);\r                    }\r                    if(latitude != 0 && longitude != 0){\r                        getAddress(latitude,longitude);\r                    }\r\r\r\r\r\r                }\r            }\r\r\r\r\r        } catch (Exception e) {\r            e.printStackTrace();\r        }\r    }\r\r\r\r    @SuppressLint({\"LongLogTag\", \"LogNotTimber\"})\r    private void getAddress(double latitude, double longitude) {\r        StringBuilder result = new StringBuilder();\r        try {\r            Geocoder geocoder = new Geocoder(this, Locale.getDefault());\r            List<Address> listAddresses = geocoder.getFromLocation(latitude, longitude, 1);\r            if (null != listAddresses && listAddresses.size() > 0) {\r                Address address = listAddresses.get(0);\r                result.append(address.getLocality()).append(\"\\n\");\r                result.append(address.getCountryName());\r\r                String state = listAddresses.get(0).getAdminArea();\r                String country = listAddresses.get(0).getCountryName();\r                String subLocality = listAddresses.get(0).getSubLocality();\r                String postalcode = listAddresses.get(0).getPostalCode();\r                AddressLine = listAddresses.get(0).getAddressLine(0);\r                CityName = listAddresses.get(0).getLocality();\r                if(CityName != null){\r                    AddressLine = CityName+\" \"+listAddresses.get(0).getAddressLine(0);\r\r                }\r\r                if(AddressLine != null) {\r                    txt_address.setText(AddressLine);\r                    isSetAddress = true;\r                }\r\r\r                // Thoroughfare seems to be the street name without numbers\r               String street = address.getThoroughfare();\r\r            }\r        } catch (IOException e) {\r        }\r\r        result.toString();\r    }\r\r    @SuppressLint({\"LongLogTag\", \"LogNotTimber\"})\r    private void showAddAmount(int position) {\r        try {\r            Log.w(TAG,\"showAddAmount : \"+\"position : \"+position);\r            Dialog dialog = new Dialog(ServiceProviderRegisterFormActivity.this);\r            dialog.setContentView(R.layout.alert_add_sp_amout_layout);\r            dialog.setCancelable(false);\r            Button btn_add = dialog.findViewById(R.id.btn_add);\r            Spinner spr_timeslottype = dialog.findViewById(R.id.spr_timeslottype);\r            ImageView img_close = dialog.findViewById(R.id.img_close);\r            EditText edt_amount = dialog.findViewById(R.id.edt_amount);\r            edt_amount.setTransformationMethod(new NumericKeyBoardTransformationMethod());\r            ArrayList<String> timetypeArrayList = new ArrayList<>();\r            //timetypeArrayList.add(\"Select Time Type\");\r            if(spTimeList != null && spTimeList.size()>0){\r                for (int i = 0; i < spTimeList.size(); i++) {\r                    //strTimeslot = spTimeList.get(0).getTime();\r                    String timeType = spTimeList.get(i).getTime();\r                    timetypeArrayList.add(timeType);\r                    ArrayAdapter<String> spinnerArrayAdapter = new ArrayAdapter<>(ServiceProviderRegisterFormActivity.this, R.layout.spinner_item, timetypeArrayList);\r                    spinnerArrayAdapter.setDropDownViewResource(R.layout.spinner_item); // The drop down view\r                    spr_timeslottype.setAdapter(spinnerArrayAdapter);\r\r\r                }\r\r            }\r\r            spr_timeslottype.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r                @SuppressLint({\"LongLogTag\", \"LogNotTimber\"})\r                @Override\r                public void onItemSelected(AdapterView<?> parent, View view, int arg2, long arg3) {\r                    String  strTimeslot = spr_timeslottype.getSelectedItem().toString();\r                    Log.w(TAG,\"strTimeslot : \"+strTimeslot);\r                   /* for(int i=0;i<bus_service_list.size();i++){\r                        bus_service_list.get(i).setTime_slots(strTimeslot);\r\r                    }*/\r                    spServiceList.get(position).setTime_slots(strTimeslot);\r                    //bus_service_list.get(position).setTime_slots(strTimeslot);\r                    //spServiceListAdapter.notifyItemChanged(position);\r\r                }\r\r                @Override\r                public void onNothingSelected(AdapterView<?> arg0) {\r                    // TODO Auto-generated method stub\r\r                }\r            });\r            btn_add.setOnClickListener(new View.OnClickListener() {\r                @SuppressLint(\"LongLogTag\")\r                @Override\r                public void onClick(View view) {\r                    if(edt_amount.getText().toString().isEmpty()){\r                        Toasty.warning(getApplicationContext(),\"Please enter the service amount\",Toast.LENGTH_SHORT).show();\r\r\r                    }else{\r                        spServiceList.get(position).setAmount(Integer.valueOf(edt_amount.getText().toString()));\r                        spServiceList.get(position).setChbxChecked(true);\r                        spServiceList.get(position).setValueAdded(true);\r                        spServiceListAdapter.notifyItemChanged(position);\r\r                        ServiceProviderRegisterFormCreateRequest.BusServiceListBean busServiceListBean = new ServiceProviderRegisterFormCreateRequest.BusServiceListBean();\r                        busServiceListBean.setBus_service_list(spServiceList.get(position).getService_list());\r                        busServiceListBean.setTime_slots(spServiceList.get(position).getTime_slots());\r                        busServiceListBean.setAmount(spServiceList.get(position).getAmount());\r                        bus_service_list.add(busServiceListBean);\r\r                        Log.w(TAG + \" onItemSPServiceCheck added_service_list\",new Gson().toJson(bus_service_list));\r\r                    }\r\r                    dialog.dismiss();\r\r                }\r            });\r\r            img_close.setOnClickListener(new View.OnClickListener() {\r                @SuppressLint(\"LogNotTimber\")\r                @Override\r                public void onClick(View v) {\r                    Log.w(TAG,\"img_close : \"+\"position : \"+position);\r\r                    if(spServiceList != null && spServiceList.size()>0){\r                        spServiceList.get(position).setValueAdded(false);\r                        spServiceList.get(position).setChbxChecked(false);\r                        spServiceListAdapter.notifyItemChanged(position);\r                        Log.w(TAG,\"img_close : \"+\"notifyItemChanged position : \"+position);\r                    }\r                    Log.w(TAG,\"img_close spServiceList : \"+new Gson().toJson(spServiceList));\r                    dialog.dismiss();\r\r                }\r            });\r            Objects.requireNonNull(dialog.getWindow()).setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r            dialog.show();\r\r        } catch (WindowManager.BadTokenException e) {\r            e.printStackTrace();\r        }\r\r\r\r\r    }\r\r\r\r    private void showRegisterSuccessalert(String message) {\r        try {\r\r            dialog = new Dialog(ServiceProviderRegisterFormActivity.this);\r            dialog.setCancelable(false);\r            dialog.setContentView(R.layout.alert_success_register);\r            TextView txt_success_msg = dialog.findViewById(R.id.txt_success_msg);\r            Button btn_back_to_login = dialog.findViewById(R.id.btn_back_to_login);\r            txt_success_msg.setText(message);\r\r            btn_back_to_login.setOnClickListener(new View.OnClickListener() {\r                @Override\r                public void onClick(View view) {\r                    startActivity(new Intent(ServiceProviderRegisterFormActivity.this, SPMyCalendarNewUserActivity.class));\r                    finish();\r                    dialog.dismiss();\r\r                }\r            });\r            Objects.requireNonNull(dialog.getWindow()).setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r            dialog.show();\r\r        } catch (WindowManager.BadTokenException e) {\r            e.printStackTrace();\r        }\r\r\r\r\r    }\r\r\r\r}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/petfolio/infinituss/serviceprovider/ServiceProviderRegisterFormActivity.java b/app/src/main/java/com/petfolio/infinituss/serviceprovider/ServiceProviderRegisterFormActivity.java
--- a/app/src/main/java/com/petfolio/infinituss/serviceprovider/ServiceProviderRegisterFormActivity.java	(revision f1734ca40ba206b2d8b7b0e5c5470841991c7822)
+++ b/app/src/main/java/com/petfolio/infinituss/serviceprovider/ServiceProviderRegisterFormActivity.java	(date 1632498661314)
@@ -1,5 +1,7 @@
 package com.petfolio.infinituss.serviceprovider;
 
+import static android.os.Environment.DIRECTORY_DOCUMENTS;
+
 import android.Manifest;
 import android.annotation.SuppressLint;
 import android.app.Activity;
@@ -22,9 +24,11 @@
 import android.os.Build;
 import android.os.Bundle;
 
+import android.os.Environment;
 import android.os.Handler;
 import android.provider.MediaStore;
 import android.provider.OpenableColumns;
+import android.text.TextUtils;
 import android.util.Log;
 import android.view.View;
 
@@ -57,6 +61,7 @@
 import com.google.android.gms.common.api.GoogleApiClient;
 import com.google.android.gms.common.api.PendingResult;
 import com.google.android.gms.common.api.Status;
+import com.google.android.gms.common.util.IOUtils;
 import com.google.android.gms.location.LocationListener;
 import com.google.android.gms.location.LocationRequest;
 import com.google.android.gms.location.LocationServices;
@@ -102,12 +107,13 @@
 import com.petfolio.infinituss.sessionmanager.SessionManager;
 import com.petfolio.infinituss.utils.ConnectionDetector;
 import com.petfolio.infinituss.utils.RestUtils;
-import com.theartofdev.edmodo.cropper.CropImage;
+import com.canhub.cropper.CropImage;
 import com.wang.avi.AVLoadingIndicatorView;
 
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.OutputStream;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
@@ -1364,7 +1370,7 @@
             if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {
                 CropImage.ActivityResult result = CropImage.getActivityResult(data);
                 if (resultCode == RESULT_OK) {
-                    Uri resultUri = result.getUri();
+                    Uri resultUri = result.getUriContent();
 
                     if (resultUri != null) {
 
@@ -1374,7 +1380,7 @@
 
                         Log.w("filename", " " + filename);
 
-                        String filePath = FileUtil.getPath(ServiceProviderRegisterFormActivity.this, resultUri);
+                        String filePath = getFilePathFromURI(ServiceProviderRegisterFormActivity.this, resultUri);
 
                         assert filePath != null;
 
@@ -2485,29 +2491,52 @@
                 .show();
     }
 
-    public String getFileName(Uri uri) {
-        String result = null;
-        if (Objects.requireNonNull(uri.getScheme()).equals("content")) {
-            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {
-                if (cursor != null && cursor.moveToFirst()) {
-                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));
-                }
+    public static String getFilePathFromURI(Context context, Uri contentUri) {
+        //copy file and send new file path
+        String fileName = getFileName(contentUri);
+        if (!TextUtils.isEmpty(fileName)) {
+
+            String path = Environment.getExternalStoragePublicDirectory(DIRECTORY_DOCUMENTS).getPath() + "/" + "MyFirstApp/";
+            // Create the parent path
+            File dir = new File(path);
+            if (!dir.exists()) {
+                dir.mkdirs();
             }
+
+            String fullName = path + "mylog";
+            File copyFile = new File (fullName);
+
+            /* File copyFile = new File(Environment.DIRECTORY_DOWNLOADS + File.separator + fileName);*/
+            copy(context, contentUri, copyFile);
+            return copyFile.getAbsolutePath();
         }
-        if (result == null) {
-            result = uri.getPath();
-            int cut = 0;
-            if (result != null) {
-                cut = result.lastIndexOf('/');
-            }
-            if (cut != -1) {
-                if (result != null) {
-                    result = result.substring(cut + 1);
-                }
-            }
+        return null;
+    }
+
+    public static String getFileName(Uri uri) {
+        if (uri == null) return null;
+        String fileName = null;
+        String path = uri.getPath();
+        int cut = path.lastIndexOf('/');
+        if (cut != -1) {
+            fileName = path.substring(cut + 1);
+        }
+        return fileName;
+    }
+
+    public static void copy(Context context, Uri srcUri, File dstFile) {
+        try {
+            InputStream inputStream = context.getContentResolver().openInputStream(srcUri);
+            if (inputStream == null) return;
+            OutputStream outputStream = new FileOutputStream(dstFile);
+            IOUtils.copyStream(inputStream, outputStream);
+            inputStream.close();
+            outputStream.close();
+        } catch (IOException e) {
+            e.printStackTrace();
         }
-        return result;
     }
+
 
 
 
